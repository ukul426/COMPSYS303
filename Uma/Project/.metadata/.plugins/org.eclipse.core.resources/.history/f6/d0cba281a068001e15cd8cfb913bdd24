/*
 * "Hello World" example.
 *
 * This example prints 'Hello from Nios II' to the STDOUT stream. It runs on
 * the Nios II 'standard', 'full_featured', 'fast', and 'low_cost' example
 * designs. It runs with or without the MicroC/OS-II RTOS and requires a STDOUT
 * device in your system's hardware.
 * The memory footprint of this hosted application is ~69 kbytes by default
 * using the standard reference design.
 *
 * For a reduced footprint version of this template, and an explanation of how
 * to reduce the memory footprint for a given application, see the
 * "small_hello_world" template.
 *
 */
#include <unistd.h>;
#include "stdio.h"
#include "system.h"



#include "sys/alt_alarm.h"
#include <altera_avalon_pio_regs.h>
#include <system.h> // to use the symbolic names
#include <altera_avalon_pio_regs.h> // to use PIO functions
#include <alt_types.h> // alt_u32 is a kind of alt_types
#include <sys/alt_irq.h>

/*Include SCchart files*/
#include "pacemaker.h"


int deltaCounter = 0;



// Timer ISR
alt_u32 timer_isr_function(void* context) {
	int* timeCount = (int*) context;

	// deltaT update with the time since last timer interrupt
	deltaCounter +=100;

	return 1; // Set the timer to trigger every 500ms
}


int main(){

	//create the struct
	TickData model;

	//call reset function
		reset(&model);

	// TIMER
	alt_alarm timer;
	int timeCountMain = 0;
	void* timerContext = (void*) &timeCountMain;
	//start the timer, with timeout of 100 milli-seconds
	alt_alarm_start(&timer, 1, timer_isr_function, timerContext);





	while (1);
	// input readings
		model.AS = IORD_ALTERA_AVALON_PIO_DATA(KEYS_BASE&0x2);
		model.VS = IORD_ALTERA_AVALON_PIO_DATA(KEYS_BASE&0x1);



		model.deltaT = deltaCounter;



		//call tick function
		tick(&model);

		IOWR_ALTERA_AVALON_PIO_DATA(LEDS_GREEN_BASE &0x2, model.AP);
		IOWR_ALTERA_AVALON_PIO_DATA(LEDS_GREEN_BASE &0x1, model.VP);

		return 0;
}
