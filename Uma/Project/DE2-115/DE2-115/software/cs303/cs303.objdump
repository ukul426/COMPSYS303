
cs303.elf:     file format elf32-littlenios2
cs303.elf
architecture: nios2:r1, flags 0x00000112:
EXEC_P, HAS_SYMS, D_PAGED
start address 0x00800244

Program Header:
    LOAD off    0x00001000 vaddr 0x00800000 paddr 0x00800000 align 2**12
         filesz 0x00000020 memsz 0x00000020 flags r-x
    LOAD off    0x00001020 vaddr 0x00800020 paddr 0x00800020 align 2**12
         filesz 0x0000d8c8 memsz 0x0000d8c8 flags r-x
    LOAD off    0x0000e8e8 vaddr 0x0080d8e8 paddr 0x0080f540 align 2**12
         filesz 0x00001c58 memsz 0x00001c58 flags rw-
    LOAD off    0x00011198 vaddr 0x00811198 paddr 0x00811198 align 2**12
         filesz 0x00000000 memsz 0x00000158 flags rw-

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .entry        00000020  00800000  00800000  00001000  2**5
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .exceptions   00000224  00800020  00800020  00001020  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .text         0000d2c8  00800244  00800244  00001244  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .rodata       000003dc  0080d50c  0080d50c  0000e50c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .rwdata       00001c58  0080d8e8  0080f540  0000e8e8  2**2
                  CONTENTS, ALLOC, LOAD, DATA, SMALL_DATA
  5 .bss          00000158  00811198  00811198  00011198  2**2
                  ALLOC, SMALL_DATA
  6 .sdram        00000000  008112f0  008112f0  00010540  2**0
                  CONTENTS
  7 .onchip_mem   00000000  01008000  01008000  00010540  2**0
                  CONTENTS
  8 .comment      00000023  00000000  00000000  00010540  2**0
                  CONTENTS, READONLY
  9 .debug_aranges 00000c40  00000000  00000000  00010568  2**3
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_info   0001adf8  00000000  00000000  000111a8  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_abbrev 0000735a  00000000  00000000  0002bfa0  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_line   00009563  00000000  00000000  000332fa  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_frame  00001b9c  00000000  00000000  0003c860  2**2
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_str    00003793  00000000  00000000  0003e3fc  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_loc    00007ba8  00000000  00000000  00041b8f  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_alt_sim_info 00000060  00000000  00000000  00049738  2**2
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_ranges 00000ca8  00000000  00000000  00049798  2**3
                  CONTENTS, READONLY, DEBUGGING
 18 .thread_model 00000003  00000000  00000000  0004d0b1  2**0
                  CONTENTS, READONLY
 19 .cpu          00000003  00000000  00000000  0004d0b4  2**0
                  CONTENTS, READONLY
 20 .qsys         00000001  00000000  00000000  0004d0b7  2**0
                  CONTENTS, READONLY
 21 .simulation_enabled 00000001  00000000  00000000  0004d0b8  2**0
                  CONTENTS, READONLY
 22 .stderr_dev   00000009  00000000  00000000  0004d0b9  2**0
                  CONTENTS, READONLY
 23 .stdin_dev    00000009  00000000  00000000  0004d0c2  2**0
                  CONTENTS, READONLY
 24 .stdout_dev   00000009  00000000  00000000  0004d0cb  2**0
                  CONTENTS, READONLY
 25 .sopc_system_name 0000000c  00000000  00000000  0004d0d4  2**0
                  CONTENTS, READONLY
 26 .quartus_project_dir 00000033  00000000  00000000  0004d0e0  2**0
                  CONTENTS, READONLY
 27 .sopcinfo     000677b7  00000000  00000000  0004d113  2**0
                  CONTENTS, READONLY
SYMBOL TABLE:
00800000 l    d  .entry	00000000 .entry
00800020 l    d  .exceptions	00000000 .exceptions
00800244 l    d  .text	00000000 .text
0080d50c l    d  .rodata	00000000 .rodata
0080d8e8 l    d  .rwdata	00000000 .rwdata
00811198 l    d  .bss	00000000 .bss
008112f0 l    d  .sdram	00000000 .sdram
01008000 l    d  .onchip_mem	00000000 .onchip_mem
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .debug_loc	00000000 .debug_loc
00000000 l    d  .debug_alt_sim_info	00000000 .debug_alt_sim_info
00000000 l    d  .debug_ranges	00000000 .debug_ranges
00000000 l    df *ABS*	00000000 ../cs303_bsp//obj/HAL/src/crt0.o
0080028c l       .text	00000000 alt_after_alt_main
00000000 l    df *ABS*	00000000 alt_irq_handler.c
00000000 l    df *ABS*	00000000 alt_instruction_exception_entry.c
00000000 l    df *ABS*	00000000 hello_world.c
00000000 l    df *ABS*	00000000 pacemaker.c
00000000 l    df *ABS*	00000000 adddf3.c
00000000 l    df *ABS*	00000000 gedf2.c
00000000 l    df *ABS*	00000000 ledf2.c
00000000 l    df *ABS*	00000000 subdf3.c
00000000 l    df *ABS*	00000000 floatsidf.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 puts.c
00000000 l    df *ABS*	00000000 strlen.c
00000000 l    df *ABS*	00000000 findfp.c
00806790 l     F .text	00000008 __fp_unlock
008067a4 l     F .text	0000019c __sinit.part.1
00806940 l     F .text	00000008 __fp_lock
00000000 l    df *ABS*	00000000 fvwrite.c
00000000 l    df *ABS*	00000000 fwalk.c
00000000 l    df *ABS*	00000000 impure.c
0080d8e8 l     O .rwdata	00000424 impure_data
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 memchr.c
00000000 l    df *ABS*	00000000 memcpy.c
00000000 l    df *ABS*	00000000 memmove.c
00000000 l    df *ABS*	00000000 memset.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 sbrkr.c
00000000 l    df *ABS*	00000000 stdio.c
00000000 l    df *ABS*	00000000 writer.c
00000000 l    df *ABS*	00000000 wsetup.c
00000000 l    df *ABS*	00000000 closer.c
00000000 l    df *ABS*	00000000 fclose.c
00000000 l    df *ABS*	00000000 fflush.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 int_errno.c
00000000 l    df *ABS*	00000000 lseekr.c
00000000 l    df *ABS*	00000000 makebuf.c
00000000 l    df *ABS*	00000000 readr.c
00000000 l    df *ABS*	00000000 fstatr.c
00000000 l    df *ABS*	00000000 isattyr.c
00000000 l    df *ABS*	00000000 lib2-divmod.c
00000000 l    df *ABS*	00000000 alt_alarm_start.c
00000000 l    df *ABS*	00000000 alt_close.c
00809518 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_dev.c
00809624 l     F .text	0000002c alt_dev_null_write
00000000 l    df *ABS*	00000000 alt_errno.c
00000000 l    df *ABS*	00000000 alt_fstat.c
00809650 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_isatty.c
0080973c l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_load.c
0080981c l     F .text	00000068 alt_load_section
00000000 l    df *ABS*	00000000 alt_lseek.c
00809908 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_main.c
00000000 l    df *ABS*	00000000 alt_malloc_lock.c
00000000 l    df *ABS*	00000000 alt_read.c
00809adc l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_release_fd.c
00000000 l    df *ABS*	00000000 alt_sbrk.c
0080f528 l     O .rwdata	00000004 heap_end
00000000 l    df *ABS*	00000000 alt_tick.c
00000000 l    df *ABS*	00000000 alt_write.c
00809ecc l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_sys_init.c
0080a000 l     F .text	00000034 alt_dev_reg
0080e2bc l     O .rwdata	00001060 jtag_uart
0080f31c l     O .rwdata	00000120 lcd
0080f43c l     O .rwdata	000000c4 uart
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_fd.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_init.c
0080a328 l     F .text	0000020c altera_avalon_jtag_uart_irq
0080a534 l     F .text	000000a0 altera_avalon_jtag_uart_timeout
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_ioctl.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_read.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_write.c
00000000 l    df *ABS*	00000000 altera_avalon_lcd_16207.c
0080f534 l     O .rwdata	00000004 colstart
0080ab6c l     F .text	000000b8 lcd_write_command
0080ac24 l     F .text	000000d8 lcd_write_data
0080acfc l     F .text	000000d0 lcd_clear_screen
0080adcc l     F .text	000001ec lcd_repaint_screen
0080afb8 l     F .text	000000cc lcd_scroll_up
0080b084 l     F .text	000002ac lcd_handle_escape
0080b808 l     F .text	000000ac alt_lcd_16207_timeout
00000000 l    df *ABS*	00000000 altera_avalon_lcd_16207_fd.c
00000000 l    df *ABS*	00000000 altera_avalon_timer_sc.c
0080ba48 l     F .text	00000078 alt_avalon_timer_sc_irq
00000000 l    df *ABS*	00000000 altera_avalon_uart_fd.c
00000000 l    df *ABS*	00000000 altera_avalon_uart_init.c
0080bcf8 l     F .text	0000009c altera_avalon_uart_irq
0080bd94 l     F .text	000000e4 altera_avalon_uart_rxirq
0080be78 l     F .text	00000148 altera_avalon_uart_txirq
00000000 l    df *ABS*	00000000 altera_avalon_uart_read.c
0080c014 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 altera_avalon_uart_write.c
0080c22c l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_dcache_flush_all.c
00000000 l    df *ABS*	00000000 alt_dev_llist_insert.c
0080c45c l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_do_ctors.c
00000000 l    df *ABS*	00000000 alt_do_dtors.c
00000000 l    df *ABS*	00000000 alt_icache_flush_all.c
00000000 l    df *ABS*	00000000 alt_iic.c
00000000 l    df *ABS*	00000000 alt_iic_isr_register.c
00000000 l    df *ABS*	00000000 alt_io_redirect.c
0080c8d0 l     F .text	000000c4 alt_open_fd
00000000 l    df *ABS*	00000000 alt_irq_vars.c
00000000 l    df *ABS*	00000000 alt_open.c
0080ca10 l     F .text	0000003c alt_get_errno
0080ca4c l     F .text	000000c4 alt_file_locked
00000000 l    df *ABS*	00000000 alt_usleep.c
00000000 l    df *ABS*	00000000 altera_nios2_gen2_irq.c
00000000 l    df *ABS*	00000000 alt_busy_sleep.c
00000000 l    df *ABS*	00000000 alt_find_dev.c
00000000 l    df *ABS*	00000000 alt_find_file.c
00000000 l    df *ABS*	00000000 alt_get_fd.c
00000000 l    df *ABS*	00000000 alt_icache_flush.c
00000000 l    df *ABS*	00000000 atexit.c
00000000 l    df *ABS*	00000000 ctype_.c
0080d767 l     O .rodata	00000180 _ctype_b
00000000 l    df *ABS*	00000000 exit.c
00000000 l    df *ABS*	00000000 memcmp.c
00000000 l    df *ABS*	00000000 __atexit.c
00000000 l    df *ABS*	00000000 __call_atexit.c
00000000 l    df *ABS*	00000000 alt_exit.c
008111c4 g     O .bss	00000004 alt_instruction_exception_handler
008091e4 g     F .text	00000054 _isatty_r
00809a18 g     F .text	0000007c alt_main
00806624 g     F .text	000000c0 _puts_r
008111f0 g     O .bss	00000100 alt_irq
00808f0c g     F .text	00000060 _lseek_r
0080f540 g       *ABS*	00000000 __flash_rwdata_start
008112f0 g       *ABS*	00000000 __alt_heap_start
008084c0 g     F .text	0000005c __sseek
00806ae0 g     F .text	00000010 __sinit
00806948 g     F .text	00000068 __sfmoreglue
00809ab8 g     F .text	00000024 __malloc_unlock
00807bac g     F .text	0000015c memmove
00806ac8 g     F .text	00000018 _cleanup
00805a18 g     F .text	000000dc .hidden __gtdf2
0080cc94 g     F .text	00000024 altera_nios2_gen2_irq_init
00800000 g     F .entry	0000001c __reset
00800020 g       *ABS*	00000000 __flash_exceptions_start
00809188 g     F .text	0000005c _fstat_r
008111a8 g     O .bss	00000004 errno
0080843c g     F .text	00000008 __seofread
008111b0 g     O .bss	00000004 alt_argv
00817500 g       *ABS*	00000000 _gp
0080cc64 g     F .text	00000030 usleep
00804d58 g     F .text	000001e8 reset
0080e13c g     O .rwdata	00000180 alt_fd_list
0080ce10 g     F .text	00000090 alt_find_dev
00807a64 g     F .text	00000148 memcpy
00806798 g     F .text	0000000c _cleanup_r
008064e4 g     F .text	000000dc .hidden __floatsidf
0080c994 g     F .text	0000007c alt_io_redirect
00805af4 g     F .text	000000f4 .hidden __ltdf2
0080d50c g       *ABS*	00000000 __DTOR_END__
008066e4 g     F .text	00000014 puts
0080d0dc g     F .text	0000009c alt_exception_cause_generated_bad_addr
0080a72c g     F .text	0000021c altera_avalon_jtag_uart_read
00809330 g     F .text	00000064 .hidden __udivsi3
00809778 g     F .text	000000a4 isatty
0080d04c g     F .text	00000090 alt_icache_flush
008111a4 g     O .bss	00000004 __malloc_top_pad
00806b30 g     F .text	000004bc __sfvwrite_r
00808394 g     F .text	00000054 _sbrk_r
00809128 g     F .text	00000060 _read_r
0080f520 g     O .rwdata	00000004 alt_max_fd
0080872c g     F .text	000000f0 _fclose_r
00808aa8 g     F .text	00000030 fflush
008111a0 g     O .bss	00000004 __malloc_max_sbrked_mem
0080516c g     F .text	000008ac .hidden __adddf3
00809944 g     F .text	000000d4 lseek
0080f500 g     O .rwdata	00000004 _global_impure_ptr
00807e30 g     F .text	00000564 _realloc_r
008112f0 g       *ABS*	00000000 __bss_end
0080c7e0 g     F .text	000000f0 alt_iic_isr_register
00809dc4 g     F .text	00000108 alt_tick
0080bc4c g     F .text	000000ac altera_avalon_uart_init
00806b00 g     F .text	00000018 __fp_lock_all
0080c794 g     F .text	0000004c alt_ic_irq_enabled
00809d28 g     F .text	0000009c alt_alarm_stop
008111c0 g     O .bss	00000004 alt_irq_active
01008000 g       *ABS*	00000000 __alt_mem_onchip_mem
008000fc g     F .exceptions	000000d4 alt_irq_handler
0080e114 g     O .rwdata	00000028 alt_dev_null
0080c414 g     F .text	00000048 alt_dcache_flush_all
0080f540 g       *ABS*	00000000 __ram_rwdata_end
0080f518 g     O .rwdata	00000008 alt_dev_list
00809f08 g     F .text	000000f8 write
0080d8e8 g       *ABS*	00000000 __ram_rodata_end
0080968c g     F .text	000000b0 fstat
00805af4 g     F .text	000000f4 .hidden __ledf2
00809394 g     F .text	00000058 .hidden __umodsi3
008112f0 g       *ABS*	00000000 end
0080b330 g     F .text	000004d8 altera_avalon_lcd_16207_write
0080c268 g     F .text	000001ac altera_avalon_uart_write
0080a268 g     F .text	000000c0 altera_avalon_jtag_uart_init
008001d0 g     F .exceptions	00000074 alt_instruction_exception_entry
0080d50c g       *ABS*	00000000 __CTOR_LIST__
01000000 g       *ABS*	00000000 __alt_stack_pointer
0080bac0 g     F .text	0000007c alt_avalon_timer_sc_init
0080bb9c g     F .text	00000060 altera_avalon_uart_write_fd
008065c0 g     F .text	00000064 .hidden __clzsi2
0080bbfc g     F .text	00000050 altera_avalon_uart_close_fd
0080a948 g     F .text	00000224 altera_avalon_jtag_uart_write
00806af0 g     F .text	00000004 __sfp_lock_acquire
00807980 g     F .text	000000e4 memchr
00808bfc g     F .text	00000310 _free_r
0080d358 g     F .text	00000180 __call_exitprocs
0080f508 g     O .rwdata	00000004 __malloc_sbrk_base
00800244 g     F .text	0000004c _start
008111b8 g     O .bss	00000004 _alt_tick_rate
008111bc g     O .bss	00000004 _alt_nticks
00809b18 g     F .text	000000fc read
0080a06c g     F .text	00000098 alt_sys_init
0080d240 g     F .text	00000118 __register_exitproc
0080a5d4 g     F .text	00000068 altera_avalon_jtag_uart_close
0080d8e8 g       *ABS*	00000000 __ram_rwdata_start
0080d50c g       *ABS*	00000000 __ram_rodata_start
008111c8 g     O .bss	00000028 __malloc_current_mallinfo
0080a104 g     F .text	00000060 altera_avalon_jtag_uart_read_fd
0080cfa8 g     F .text	000000a4 alt_get_fd
0080ccb8 g     F .text	00000158 alt_busy_sleep
008086d8 g     F .text	00000054 _close_r
0080d1c4 g     F .text	0000007c memcmp
0080a1c4 g     F .text	00000050 altera_avalon_jtag_uart_close_fd
008112f0 g       *ABS*	00000000 __alt_stack_base
0080a214 g     F .text	00000054 altera_avalon_jtag_uart_ioctl_fd
00808584 g     F .text	00000154 __swsetup_r
00804f40 g     F .text	0000022c tick
008069b0 g     F .text	00000118 __sfp
0080dd0c g     O .rwdata	00000408 __malloc_av_
00806afc g     F .text	00000004 __sinit_lock_release
008083e8 g     F .text	00000054 __sread
0080cea0 g     F .text	00000108 alt_find_file
0080c498 g     F .text	000000a4 alt_dev_llist_insert
00809a94 g     F .text	00000024 __malloc_lock
00809c78 g     F .text	000000b0 sbrk
00808a4c g     F .text	0000005c _fflush_r
00811198 g       *ABS*	00000000 __bss_start
00807d08 g     F .text	00000128 memset
008002bc g     F .text	00000144 main
008111b4 g     O .bss	00000004 alt_envp
0081119c g     O .bss	00000004 __malloc_max_total_mem
0080a164 g     F .text	00000060 altera_avalon_jtag_uart_write_fd
0080b8b4 g     F .text	00000134 altera_avalon_lcd_16207_init
0080851c g     F .text	00000008 __sclose
01000000 g       *ABS*	00000000 __alt_heap_limit
0080881c g     F .text	00000014 fclose
00807174 g     F .text	0000080c _malloc_r
0080f524 g     O .rwdata	00000004 alt_errno
00806fec g     F .text	000000c4 _fwalk
00809238 g     F .text	00000084 .hidden __divsi3
00808ad8 g     F .text	00000124 _malloc_trim_r
0080d50c g       *ABS*	00000000 __CTOR_END__
0080d50c g       *ABS*	00000000 __flash_rodata_start
0080d50c g       *ABS*	00000000 __DTOR_LIST__
0080a034 g     F .text	00000038 alt_irq_init
00809c14 g     F .text	00000064 alt_release_fd
0080d51b g     O .rodata	00000100 .hidden __clz_tab
0080d178 g     F .text	00000014 atexit
00808524 g     F .text	00000060 _write_r
0080f504 g     O .rwdata	00000004 _impure_ptr
008111ac g     O .bss	00000004 alt_argc
00808830 g     F .text	0000021c __sflush_r
0080c59c g     F .text	00000060 _do_dtors
00800020 g       .exceptions	00000000 alt_irq_entry
00806b18 g     F .text	00000018 __fp_unlock_all
0080b9e8 g     F .text	00000060 altera_avalon_lcd_16207_write_fd
0080f510 g     O .rwdata	00000008 alt_fs_list
00800020 g       *ABS*	00000000 __ram_exceptions_start
0080c630 g     F .text	00000050 alt_ic_isr_register
0080f540 g       *ABS*	00000000 _edata
0080bb3c g     F .text	00000060 altera_avalon_uart_read_fd
008112f0 g       *ABS*	00000000 _end
00800244 g       *ABS*	00000000 __ram_exceptions_end
0080a63c g     F .text	000000f0 altera_avalon_jtag_uart_ioctl
0080c708 g     F .text	0000008c alt_ic_irq_disable
00808444 g     F .text	0000007c __swrite
0080f50c g     O .rwdata	00000004 __malloc_trim_threshold
0080d18c g     F .text	00000038 exit
008070b0 g     F .text	000000c4 _fwalk_reent
008092bc g     F .text	00000074 .hidden __modsi3
00800400 g     F .text	00004958 logic
0080f53c g     O .rwdata	00000004 __ctype_ptr__
01000000 g       *ABS*	00000000 __alt_data_end
00800020 g     F .exceptions	00000000 alt_exception
00806af4 g     F .text	00000004 __sfp_lock_release
00800000 g       *ABS*	00000000 __alt_mem_sdram
0080d666 g     O .rodata	00000101 _ctype_
00800290 g     F .text	0000002c timer_isr_function
0080bfc0 g     F .text	00000054 altera_avalon_uart_close
0080d4d8 g     F .text	00000034 _exit
008093ec g     F .text	0000012c alt_alarm_start
00808f6c g     F .text	000001bc __smakebuf_r
008066f8 g     F .text	00000098 strlen
0080cb10 g     F .text	00000154 open
00805a18 g     F .text	000000dc .hidden __gedf2
0080c5fc g     F .text	00000034 alt_icache_flush_all
0080f538 g     O .rwdata	00000004 alt_priority_mask
00811198 g     O .bss	00000004 doTick
0080c680 g     F .text	00000088 alt_ic_irq_enable
0080c050 g     F .text	000001dc altera_avalon_uart_read
00805be8 g     F .text	000008fc .hidden __subdf3
0080f52c g     O .rwdata	00000008 alt_alarm_list
0080c53c g     F .text	00000060 _do_ctors
00809554 g     F .text	000000d0 close
00809884 g     F .text	00000084 alt_load
00806af8 g     F .text	00000004 __sinit_lock_acquire



Disassembly of section .entry:

00800000 <__reset>:
#if NIOS2_ICACHE_SIZE > 0 && defined(ALT_ALLOW_CODE_AT_RESET) && (!defined(ALT_SIM_OPTIMIZE) || defined(NIOS2_ECC_PRESENT))
    /* Assume the instruction cache size is always a power of two. */
#if NIOS2_ICACHE_SIZE > 0x8000
    movhi r2, %hi(NIOS2_ICACHE_SIZE)
#else
    movui r2, NIOS2_ICACHE_SIZE
  800000:	00840014 	movui	r2,4096
#endif

0:
    initi r2
  800004:	1001483a 	initi	r2
    addi r2, r2, -NIOS2_ICACHE_LINE_SIZE
  800008:	10bff804 	addi	r2,r2,-32
    bgt r2, zero, 0b
  80000c:	00bffd16 	blt	zero,r2,800004 <__alt_mem_onchip_mem+0xff7f8004>
 * Jump to the _start entry point in the .text section if reset code
 * is allowed or if optimizing for RTL simulation.
 */
#if defined(ALT_ALLOW_CODE_AT_RESET) || defined(ALT_SIM_OPTIMIZE)
    /* Jump to the _start entry point in the .text section. */
    movhi r1, %hi(_start)
  800010:	00402034 	movhi	at,128
    ori r1, r1, %lo(_start)
  800014:	08409114 	ori	at,at,580
    jmp r1
  800018:	0800683a 	jmp	at
  80001c:	00000000 	call	0 <__reset-0x800000>

Disassembly of section .exceptions:

00800020 <alt_exception>:

#else /* ALT_EXCEPTION_STACK disabled */
        /* 
         * Reserve space on normal stack for registers about to be pushed.
         */
        addi  sp, sp, -76
  800020:	deffed04 	addi	sp,sp,-76
         * documentation for details).
         *
         * Leave a gap in the stack frame at 4(sp) for the muldiv handler to
         * store zero into.
         */
        stw   ra,  0(sp)
  800024:	dfc00015 	stw	ra,0(sp)
        stw   r1,   8(sp)
  800028:	d8400215 	stw	at,8(sp)
        stw   r2,  12(sp)
  80002c:	d8800315 	stw	r2,12(sp)
        stw   r3,  16(sp)
  800030:	d8c00415 	stw	r3,16(sp)
        stw   r4,  20(sp)
  800034:	d9000515 	stw	r4,20(sp)
        stw   r5,  24(sp)
  800038:	d9400615 	stw	r5,24(sp)
        stw   r6,  28(sp)
  80003c:	d9800715 	stw	r6,28(sp)
        stw   r7,  32(sp)
  800040:	d9c00815 	stw	r7,32(sp)
        rdctl r5, estatus   /* Read early to avoid usage stall */
  800044:	000b307a 	rdctl	r5,estatus
        stw   r8,  36(sp)
  800048:	da000915 	stw	r8,36(sp)
        stw   r9,  40(sp)
  80004c:	da400a15 	stw	r9,40(sp)
        stw   r10, 44(sp)
  800050:	da800b15 	stw	r10,44(sp)
        stw   r11, 48(sp)
  800054:	dac00c15 	stw	r11,48(sp)
        stw   r12, 52(sp)
  800058:	db000d15 	stw	r12,52(sp)
        stw   r13, 56(sp)
  80005c:	db400e15 	stw	r13,56(sp)
        stw   r14, 60(sp)
  800060:	db800f15 	stw	r14,60(sp)
        stw   r15, 64(sp)
  800064:	dbc01015 	stw	r15,64(sp)
        /*
         * ea-4 contains the address of the instruction being executed
         * when the exception occured. For interrupt exceptions, we will
         * will be re-issue the isntruction. Store it in 72(sp)
         */
        stw   r5,  68(sp)  /* estatus */
  800068:	d9401115 	stw	r5,68(sp)
        addi  r15, ea, -4  /* instruction that caused exception */
  80006c:	ebffff04 	addi	r15,ea,-4
        stw   r15,  72(sp)
  800070:	dbc01215 	stw	r15,72(sp)
#else
        /*
         * Test to see if the exception was a software exception or caused 
         * by an external interrupt, and vector accordingly.
         */
        rdctl r4, ipending
  800074:	0009313a 	rdctl	r4,ipending
        andi  r2, r5, 1
  800078:	2880004c 	andi	r2,r5,1
        beq   r2, zero, .Lnot_irq
  80007c:	10000326 	beq	r2,zero,80008c <alt_exception+0x6c>
        beq   r4, zero, .Lnot_irq
  800080:	20000226 	beq	r4,zero,80008c <alt_exception+0x6c>
        /*
         * Now that all necessary registers have been preserved, call 
         * alt_irq_handler() to process the interrupts.
         */

        call alt_irq_handler
  800084:	08000fc0 	call	8000fc <alt_irq_handler>

        .section .exceptions.irqreturn, "xa"

        br    .Lexception_exit
  800088:	00000706 	br	8000a8 <alt_exception+0x88>
         * upon completion, so we write ea (address of instruction *after*
         * the one where the exception occured) into 72(sp). The actual
         * instruction that caused the exception is written in r2, which these
         * handlers will utilize.
         */
        stw ea, 72(sp) /* EA is PC+4 so will skip over instruction causing exception */
  80008c:	df401215 	stw	ea,72(sp)
.Lunknown_16bit:
        addi.n r4, r4, 2 /* Need PC+2 to skip over instruction causing exception */
        stw r4, 72(sp)

#else /* CDX is not Enabled and all instructions are 32bits */
        ldw r2, -4(ea) /* Instruction value that caused exception */
  800090:	e8bfff17 	ldw	r2,-4(ea)
         * debugger is present) or go into an infinite loop since the
         * handling behavior is undefined; in that case we will not return here.
         */

        /* Load exception-causing address as first argument (r4) */
        addi   r4, ea, -4
  800094:	e93fff04 	addi	r4,ea,-4

        /* Call the instruction-exception entry */
        call   alt_instruction_exception_entry
  800098:	08001d00 	call	8001d0 <alt_instruction_exception_entry>
         * instruction
         *
         * Return code was 0: Skip. The instruction after the exception is
         * already stored in 72(sp).
         */
        bne   r2, r0, .Lexception_exit
  80009c:	1000021e 	bne	r2,zero,8000a8 <alt_exception+0x88>

        /*
         * Otherwise, modify 72(sp) to re-issue the instruction that caused the
         * exception.
         */
        addi  r15, ea, -4  /* instruction that caused exception */
  8000a0:	ebffff04 	addi	r15,ea,-4
        stw   r15,  72(sp)
  8000a4:	dbc01215 	stw	r15,72(sp)
        /* 
         * Restore the saved registers, so that all general purpose registers 
         * have been restored to their state at the time the interrupt occured.
         */

        ldw   r5,  68(sp)
  8000a8:	d9401117 	ldw	r5,68(sp)
        ldw   ea,  72(sp)  /* This becomes the PC once eret is executed */
  8000ac:	df401217 	ldw	ea,72(sp)
        ldw   ra,   0(sp)
  8000b0:	dfc00017 	ldw	ra,0(sp)

        wrctl estatus, r5
  8000b4:	2801707a 	wrctl	estatus,r5

        ldw   r1,   8(sp)
  8000b8:	d8400217 	ldw	at,8(sp)
        ldw   r2,  12(sp)
  8000bc:	d8800317 	ldw	r2,12(sp)
        ldw   r3,  16(sp)
  8000c0:	d8c00417 	ldw	r3,16(sp)
        ldw   r4,  20(sp)
  8000c4:	d9000517 	ldw	r4,20(sp)
        ldw   r5,  24(sp)
  8000c8:	d9400617 	ldw	r5,24(sp)
        ldw   r6,  28(sp)
  8000cc:	d9800717 	ldw	r6,28(sp)
        ldw   r7,  32(sp)
  8000d0:	d9c00817 	ldw	r7,32(sp)

#if defined(ALT_EXCEPTION_STACK) && defined(ALT_STACK_CHECK)
        ldw   et, %gprel(alt_exception_old_stack_limit)(gp)
#endif

        ldw   r8,  36(sp)
  8000d4:	da000917 	ldw	r8,36(sp)
        ldw   r9,  40(sp)
  8000d8:	da400a17 	ldw	r9,40(sp)
        ldw   r10, 44(sp)
  8000dc:	da800b17 	ldw	r10,44(sp)
        ldw   r11, 48(sp)
  8000e0:	dac00c17 	ldw	r11,48(sp)
        ldw   r12, 52(sp)
  8000e4:	db000d17 	ldw	r12,52(sp)
        ldw   r13, 56(sp)
  8000e8:	db400e17 	ldw	r13,56(sp)
        ldw   r14, 60(sp)
  8000ec:	db800f17 	ldw	r14,60(sp)
        ldw   r15, 64(sp)
  8000f0:	dbc01017 	ldw	r15,64(sp)
        stw   et, %gprel(alt_stack_limit_value)(gp)
        stw   zero, %gprel(alt_exception_old_stack_limit)(gp)
#endif /* ALT_STACK_CHECK */
        ldw   sp,  76(sp)
#else /* ALT_EXCEPTION_STACK disabled */
        addi  sp, sp, 76
  8000f4:	dec01304 	addi	sp,sp,76

        /*
         * Return to the interrupted instruction.
         */

        eret
  8000f8:	ef80083a 	eret

008000fc <alt_irq_handler>:
 * instruction is present if the macro ALT_CI_INTERRUPT_VECTOR defined.
 */

void alt_irq_handler (void) __attribute__ ((section (".exceptions")));
void alt_irq_handler (void)
{
  8000fc:	defff904 	addi	sp,sp,-28
  800100:	dfc00615 	stw	ra,24(sp)
  800104:	df000515 	stw	fp,20(sp)
  800108:	df000504 	addi	fp,sp,20
  
  /*
   * Notify the operating system that we are at interrupt level.
   */ 
  
  ALT_OS_INT_ENTER();
  80010c:	0001883a 	nop
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
  800110:	0005313a 	rdctl	r2,ipending
  800114:	e0bffe15 	stw	r2,-8(fp)

  return active;
  800118:	e0bffe17 	ldw	r2,-8(fp)
   * Consider the case where the high priority interupt is asserted during
   * the interrupt entry sequence for a lower priority interrupt to see why
   * this is the case.
   */

  active = alt_irq_pending ();
  80011c:	e0bffb15 	stw	r2,-20(fp)

  do
  {
    i = 0;
  800120:	e03ffd15 	stw	zero,-12(fp)
    mask = 1;
  800124:	00800044 	movi	r2,1
  800128:	e0bffc15 	stw	r2,-16(fp)
     * called to clear the interrupt condition.
     */

    do
    {
      if (active & mask)
  80012c:	e0fffb17 	ldw	r3,-20(fp)
  800130:	e0bffc17 	ldw	r2,-16(fp)
  800134:	1884703a 	and	r2,r3,r2
  800138:	10001426 	beq	r2,zero,80018c <alt_irq_handler+0x90>
      { 
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
        alt_irq[i].handler(alt_irq[i].context); 
  80013c:	00802074 	movhi	r2,129
  800140:	10847c04 	addi	r2,r2,4592
  800144:	e0fffd17 	ldw	r3,-12(fp)
  800148:	180690fa 	slli	r3,r3,3
  80014c:	10c5883a 	add	r2,r2,r3
  800150:	10c00017 	ldw	r3,0(r2)
  800154:	00802074 	movhi	r2,129
  800158:	10847c04 	addi	r2,r2,4592
  80015c:	e13ffd17 	ldw	r4,-12(fp)
  800160:	200890fa 	slli	r4,r4,3
  800164:	1105883a 	add	r2,r2,r4
  800168:	10800104 	addi	r2,r2,4
  80016c:	10800017 	ldw	r2,0(r2)
  800170:	1009883a 	mov	r4,r2
  800174:	183ee83a 	callr	r3
#else
        alt_irq[i].handler(alt_irq[i].context, i); 
#endif
        break;
  800178:	0001883a 	nop
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
  80017c:	0005313a 	rdctl	r2,ipending
  800180:	e0bfff15 	stw	r2,-4(fp)

  return active;
  800184:	e0bfff17 	ldw	r2,-4(fp)
  800188:	00000706 	br	8001a8 <alt_irq_handler+0xac>
      }
      mask <<= 1;
  80018c:	e0bffc17 	ldw	r2,-16(fp)
  800190:	1085883a 	add	r2,r2,r2
  800194:	e0bffc15 	stw	r2,-16(fp)
      i++;
  800198:	e0bffd17 	ldw	r2,-12(fp)
  80019c:	10800044 	addi	r2,r2,1
  8001a0:	e0bffd15 	stw	r2,-12(fp)

    } while (1);
  8001a4:	003fe106 	br	80012c <__alt_mem_onchip_mem+0xff7f812c>

    active = alt_irq_pending ();
  8001a8:	e0bffb15 	stw	r2,-20(fp)
    
  } while (active);
  8001ac:	e0bffb17 	ldw	r2,-20(fp)
  8001b0:	103fdb1e 	bne	r2,zero,800120 <__alt_mem_onchip_mem+0xff7f8120>

  /*
   * Notify the operating system that interrupt processing is complete.
   */ 

  ALT_OS_INT_EXIT();
  8001b4:	0001883a 	nop
}
  8001b8:	0001883a 	nop
  8001bc:	e037883a 	mov	sp,fp
  8001c0:	dfc00117 	ldw	ra,4(sp)
  8001c4:	df000017 	ldw	fp,0(sp)
  8001c8:	dec00204 	addi	sp,sp,8
  8001cc:	f800283a 	ret

008001d0 <alt_instruction_exception_entry>:
 * that handler if it has been registered. Absent a handler, it will
 * break break or hang as discussed below.
 */
int 
alt_instruction_exception_entry (alt_u32 exception_pc)
{
  8001d0:	defffb04 	addi	sp,sp,-20
  8001d4:	dfc00415 	stw	ra,16(sp)
  8001d8:	df000315 	stw	fp,12(sp)
  8001dc:	df000304 	addi	fp,sp,12
  8001e0:	e13fff15 	stw	r4,-4(fp)
 * NIOS2_EXCEPTION_CAUSE_NOT_PRESENT. Your handling routine should
 * check the validity of the cause argument before proceeding.
 */
#ifdef NIOS2_HAS_EXTRA_EXCEPTION_INFO
  /* Get exception cause & "badaddr" */
  NIOS2_READ_EXCEPTION(cause);
  8001e4:	000531fa 	rdctl	r2,exception
  8001e8:	e0bffd15 	stw	r2,-12(fp)
  cause = ( (cause & NIOS2_EXCEPTION_REG_CAUSE_MASK) >>
  8001ec:	e0bffd17 	ldw	r2,-12(fp)
  8001f0:	10801f0c 	andi	r2,r2,124
  8001f4:	1004d0ba 	srli	r2,r2,2
  8001f8:	e0bffd15 	stw	r2,-12(fp)
              NIOS2_EXCEPTION_REG_CAUSE_OFST );

  NIOS2_READ_BADADDR(badaddr);
  8001fc:	0005333a 	rdctl	r2,badaddr
  800200:	e0bffe15 	stw	r2,-8(fp)
#else
  cause = NIOS2_EXCEPTION_CAUSE_NOT_PRESENT;
  badaddr = 0;
#endif /* NIOS2_HAS_EXTRA_EXCEPTION_INFO */

  if(alt_instruction_exception_handler) {
  800204:	d0a73117 	ldw	r2,-25404(gp)
  800208:	10000726 	beq	r2,zero,800228 <alt_instruction_exception_entry+0x58>
     * Call handler. Its return value indicates whether the exception-causing
     * instruction should be re-issued. The code that called us,
     * alt_eceptions_entry.S, will look at this value and adjust the ea
     * register as necessary
     */
    return alt_instruction_exception_handler(cause, exception_pc, badaddr);
  80020c:	d0a73117 	ldw	r2,-25404(gp)
  800210:	e0fffd17 	ldw	r3,-12(fp)
  800214:	e1bffe17 	ldw	r6,-8(fp)
  800218:	e17fff17 	ldw	r5,-4(fp)
  80021c:	1809883a 	mov	r4,r3
  800220:	103ee83a 	callr	r2
  800224:	00000206 	br	800230 <alt_instruction_exception_entry+0x60>
   *    (a peripheral which negates its interrupt output before its
   *    interrupt handler has been executed will cause spurious interrupts)
   */
  else {
#ifdef NIOS2_HAS_DEBUG_STUB
    NIOS2_BREAK();
  800228:	003da03a 	break	0
      ;
#endif /* NIOS2_HAS_DEBUG_STUB */
  }

  /* We should not get here. Remove compiler warning. */
  return NIOS2_EXCEPTION_RETURN_REISSUE_INST;
  80022c:	0005883a 	mov	r2,zero
}
  800230:	e037883a 	mov	sp,fp
  800234:	dfc00117 	ldw	ra,4(sp)
  800238:	df000017 	ldw	fp,0(sp)
  80023c:	dec00204 	addi	sp,sp,8
  800240:	f800283a 	ret

Disassembly of section .text:

00800244 <_start>:

    /* Assume the data cache size is always a power of two. */
#if NIOS2_DCACHE_SIZE > 0x8000
    movhi r2, %hi(NIOS2_DCACHE_SIZE)
#else
    movui r2, NIOS2_DCACHE_SIZE
  800244:	00820014 	movui	r2,2048
#endif

0:
    initd 0(r2)
  800248:	10000033 	initd	0(r2)
#ifdef NIOS2_ECC_PRESENT
    addi r2, r2, -4
#else
    addi r2, r2, -NIOS2_DCACHE_LINE_SIZE
  80024c:	10bff804 	addi	r2,r2,-32
#endif
    bgt r2, zero, 0b
  800250:	00bffd16 	blt	zero,r2,800248 <__alt_mem_onchip_mem+0xff7f8248>

    /*
     * Now that the caches are initialized, set up the stack pointer and global pointer.
     * The values provided by the linker are assumed to be correctly aligned.
     */
    movhi sp, %hi(__alt_stack_pointer)
  800254:	06c04034 	movhi	sp,256
    ori sp, sp, %lo(__alt_stack_pointer)
  800258:	dec00014 	ori	sp,sp,0
    movhi gp, %hi(_gp)
  80025c:	06802074 	movhi	gp,129
    ori gp, gp, %lo(_gp)
  800260:	d69d4014 	ori	gp,gp,29952
 */
#ifndef ALT_SIM_OPTIMIZE
    /* Log that the BSS is about to be cleared. */
    ALT_LOG_PUTS(alt_log_msg_bss)

    movhi r2, %hi(__bss_start)
  800264:	00802074 	movhi	r2,129
    ori r2, r2, %lo(__bss_start)
  800268:	10846614 	ori	r2,r2,4504

    movhi r3, %hi(__bss_end)
  80026c:	00c02074 	movhi	r3,129
    ori r3, r3, %lo(__bss_end)
  800270:	18c4bc14 	ori	r3,r3,4848

    beq r2, r3, 1f
  800274:	10c00326 	beq	r2,r3,800284 <_start+0x40>

0:
    stw zero, (r2)
  800278:	10000015 	stw	zero,0(r2)
    addi r2, r2, 4
  80027c:	10800104 	addi	r2,r2,4
    bltu r2, r3, 0b
  800280:	10fffd36 	bltu	r2,r3,800278 <__alt_mem_onchip_mem+0xff7f8278>
     * section aren't defined until alt_load() has been called).
     */
    mov   et, zero
#endif

    call alt_load
  800284:	08098840 	call	809884 <alt_load>

    /* Log that alt_main is about to be called. */
    ALT_LOG_PUTS(alt_log_msg_alt_main)

    /* Call the C entry point. It should never return. */
    call alt_main
  800288:	0809a180 	call	809a18 <alt_main>

0080028c <alt_after_alt_main>:

    /* Wait in infinite loop in case alt_main does return. */
alt_after_alt_main:
    br alt_after_alt_main
  80028c:	003fff06 	br	80028c <__alt_mem_onchip_mem+0xff7f828c>

00800290 <timer_isr_function>:
#include <sys/alt_irq.h>
#include "pacemaker.h"

int doTick = 0;
// Timer ISR
alt_u32 timer_isr_function(void* context) {
  800290:	defffe04 	addi	sp,sp,-8
  800294:	df000115 	stw	fp,4(sp)
  800298:	df000104 	addi	fp,sp,4
  80029c:	e13fff15 	stw	r4,-4(fp)
	doTick = 1;
  8002a0:	00800044 	movi	r2,1
  8002a4:	d0a72615 	stw	r2,-25448(gp)
	return 10; // Set the timer to trigger every 10ms
  8002a8:	00800284 	movi	r2,10
}
  8002ac:	e037883a 	mov	sp,fp
  8002b0:	df000017 	ldw	fp,0(sp)
  8002b4:	dec00104 	addi	sp,sp,4
  8002b8:	f800283a 	ret

008002bc <main>:


int main(){
  8002bc:	deffa604 	addi	sp,sp,-360
  8002c0:	dfc05915 	stw	ra,356(sp)
  8002c4:	df005815 	stw	fp,352(sp)
  8002c8:	df005804 	addi	fp,sp,352

	TickData model;//create the struct
	reset(&model);//call reset function
  8002cc:	e13fa804 	addi	r4,fp,-352
  8002d0:	0804d580 	call	804d58 <reset>
	alt_alarm timer;// TIMER
	alt_alarm_start(&timer, 10, timer_isr_function, NULL);//start the timer, with timeout of 100 milli-seconds
  8002d4:	e0bffa04 	addi	r2,fp,-24
  8002d8:	000f883a 	mov	r7,zero
  8002dc:	01802034 	movhi	r6,128
  8002e0:	3180a404 	addi	r6,r6,656
  8002e4:	01400284 	movi	r5,10
  8002e8:	1009883a 	mov	r4,r2
  8002ec:	08093ec0 	call	8093ec <alt_alarm_start>


	while (1) {
		if(doTick) {
  8002f0:	d0a72617 	ldw	r2,-25448(gp)
  8002f4:	103ffe26 	beq	r2,zero,8002f0 <__alt_mem_onchip_mem+0xff7f82f0>
			doTick = 0;
  8002f8:	d0272615 	stw	zero,-25448(gp)
			// input readings
			model.AS = (((~IORD_ALTERA_AVALON_PIO_DATA(KEYS_BASE)) & 0x2) >> 1);
  8002fc:	00804074 	movhi	r2,257
  800300:	10842804 	addi	r2,r2,4256
  800304:	10800037 	ldwio	r2,0(r2)
  800308:	0084303a 	nor	r2,zero,r2
  80030c:	1080008c 	andi	r2,r2,2
  800310:	1005d07a 	srai	r2,r2,1
  800314:	e0bfbf05 	stb	r2,-260(fp)
			model.VS = ((~IORD_ALTERA_AVALON_PIO_DATA(KEYS_BASE)) & 0x1);
  800318:	00804074 	movhi	r2,257
  80031c:	10842804 	addi	r2,r2,4256
  800320:	10800037 	ldwio	r2,0(r2)
  800324:	1080004c 	andi	r2,r2,1
  800328:	1005003a 	cmpeq	r2,r2,zero
  80032c:	e0bfbf45 	stb	r2,-259(fp)

			if(model.AS) {
  800330:	e0bfbf03 	ldbu	r2,-260(fp)
  800334:	10803fcc 	andi	r2,r2,255
  800338:	1080201c 	xori	r2,r2,128
  80033c:	10bfe004 	addi	r2,r2,-128
  800340:	10000326 	beq	r2,zero,800350 <main+0x94>
				printf("AS\n");
  800344:	01002074 	movhi	r4,129
  800348:	21354304 	addi	r4,r4,-10996
  80034c:	08066e40 	call	8066e4 <puts>
			}
			if(model.VS) {
  800350:	e0bfbf43 	ldbu	r2,-259(fp)
  800354:	10803fcc 	andi	r2,r2,255
  800358:	1080201c 	xori	r2,r2,128
  80035c:	10bfe004 	addi	r2,r2,-128
  800360:	10000326 	beq	r2,zero,800370 <main+0xb4>
				printf("VS\n");
  800364:	01002074 	movhi	r4,129
  800368:	21354404 	addi	r4,r4,-10992
  80036c:	08066e40 	call	8066e4 <puts>
			}

			model.deltaT = 10;
  800370:	e03fbb15 	stw	zero,-276(fp)
  800374:	00900934 	movhi	r2,16420
  800378:	e0bfbc15 	stw	r2,-272(fp)

			tick(&model);//call tick function
  80037c:	e13fa804 	addi	r4,fp,-352
  800380:	0804f400 	call	804f40 <tick>

			if(model.AP) {
  800384:	e0bfbf83 	ldbu	r2,-258(fp)
  800388:	10803fcc 	andi	r2,r2,255
  80038c:	1080201c 	xori	r2,r2,128
  800390:	10bfe004 	addi	r2,r2,-128
  800394:	10000826 	beq	r2,zero,8003b8 <main+0xfc>
				printf("AP\n");
  800398:	01002074 	movhi	r4,129
  80039c:	21354504 	addi	r4,r4,-10988
  8003a0:	08066e40 	call	8066e4 <puts>
				IOWR_ALTERA_AVALON_PIO_DATA(LEDS_GREEN_BASE, 0b10);
  8003a4:	00c00084 	movi	r3,2
  8003a8:	00804074 	movhi	r2,257
  8003ac:	10841c04 	addi	r2,r2,4208
  8003b0:	10c00035 	stwio	r3,0(r2)
  8003b4:	003fce06 	br	8002f0 <__alt_mem_onchip_mem+0xff7f82f0>
			}
			else if(model.VP) {
  8003b8:	e0bfbfc3 	ldbu	r2,-257(fp)
  8003bc:	10803fcc 	andi	r2,r2,255
  8003c0:	1080201c 	xori	r2,r2,128
  8003c4:	10bfe004 	addi	r2,r2,-128
  8003c8:	10000826 	beq	r2,zero,8003ec <main+0x130>
				printf("VP\n");
  8003cc:	01002074 	movhi	r4,129
  8003d0:	21354604 	addi	r4,r4,-10984
  8003d4:	08066e40 	call	8066e4 <puts>
				IOWR_ALTERA_AVALON_PIO_DATA(LEDS_GREEN_BASE, 0b01);
  8003d8:	00c00044 	movi	r3,1
  8003dc:	00804074 	movhi	r2,257
  8003e0:	10841c04 	addi	r2,r2,4208
  8003e4:	10c00035 	stwio	r3,0(r2)
  8003e8:	003fc106 	br	8002f0 <__alt_mem_onchip_mem+0xff7f82f0>
			}
			else {
				IOWR_ALTERA_AVALON_PIO_DATA(LEDS_GREEN_BASE, 0b00);
  8003ec:	0007883a 	mov	r3,zero
  8003f0:	00804074 	movhi	r2,257
  8003f4:	10841c04 	addi	r2,r2,4208
  8003f8:	10c00035 	stwio	r3,0(r2)
			}
		}
	}
  8003fc:	003fbc06 	br	8002f0 <__alt_mem_onchip_mem+0xff7f82f0>

00800400 <logic>:
#include "timing.h"
#include <stdio.h>

#include "pacemaker.h"

void logic(TickData* d) {
  800400:	defffa04 	addi	sp,sp,-24
  800404:	dfc00515 	stw	ra,20(sp)
  800408:	df000415 	stw	fp,16(sp)
  80040c:	dc800315 	stw	r18,12(sp)
  800410:	dc400215 	stw	r17,8(sp)
  800414:	dc000115 	stw	r16,4(sp)
  800418:	df000404 	addi	fp,sp,16
  80041c:	e13ffc15 	stw	r4,-16(fp)
  d->AP = 0;
  800420:	e0bffc17 	ldw	r2,-16(fp)
  800424:	10001785 	stb	zero,94(r2)
  d->VP = 0;
  800428:	e0bffc17 	ldw	r2,-16(fp)
  80042c:	100017c5 	stb	zero,95(r2)
  d->V_event = 0;
  800430:	e0bffc17 	ldw	r2,-16(fp)
  800434:	10001805 	stb	zero,96(r2)
  d->VR = 0;
  800438:	e0bffc17 	ldw	r2,-16(fp)
  80043c:	10001845 	stb	zero,97(r2)
  d->A_event = 0;
  800440:	e0bffc17 	ldw	r2,-16(fp)
  800444:	10001885 	stb	zero,98(r2)
  d->AR = 0;
  800448:	e0bffc17 	ldw	r2,-16(fp)
  80044c:	100018c5 	stb	zero,99(r2)
  d->_g170 = d->_pg139;
  800450:	e0bffc17 	ldw	r2,-16(fp)
  800454:	10c04a43 	ldbu	r3,297(r2)
  800458:	e0bffc17 	ldw	r2,-16(fp)
  80045c:	10c03845 	stb	r3,225(r2)
  if (d->_g170) {
  800460:	e0bffc17 	ldw	r2,-16(fp)
  800464:	10803843 	ldbu	r2,225(r2)
  800468:	10803fcc 	andi	r2,r2,255
  80046c:	1080201c 	xori	r2,r2,128
  800470:	10bfe004 	addi	r2,r2,-128
  800474:	10001226 	beq	r2,zero,8004c0 <logic+0xc0>
    d->_region2_VRP_timer_t += d->deltaT;
  800478:	e13ffc17 	ldw	r4,-16(fp)
  80047c:	20800b17 	ldw	r2,44(r4)
  800480:	20c00c17 	ldw	r3,48(r4)
  800484:	e1bffc17 	ldw	r6,-16(fp)
  800488:	31001317 	ldw	r4,76(r6)
  80048c:	31401417 	ldw	r5,80(r6)
  800490:	200d883a 	mov	r6,r4
  800494:	280f883a 	mov	r7,r5
  800498:	1009883a 	mov	r4,r2
  80049c:	180b883a 	mov	r5,r3
  8004a0:	080516c0 	call	80516c <__adddf3>
  8004a4:	1009883a 	mov	r4,r2
  8004a8:	180b883a 	mov	r5,r3
  8004ac:	2005883a 	mov	r2,r4
  8004b0:	2807883a 	mov	r3,r5
  8004b4:	e13ffc17 	ldw	r4,-16(fp)
  8004b8:	20800b15 	stw	r2,44(r4)
  8004bc:	20c00c15 	stw	r3,48(r4)
  }
  d->_pre_VP = d->_reg_VP;
  8004c0:	e0bffc17 	ldw	r2,-16(fp)
  8004c4:	10c01903 	ldbu	r3,100(r2)
  8004c8:	e0bffc17 	ldw	r2,-16(fp)
  8004cc:	10c01945 	stb	r3,101(r2)
  d->_g55 = d->_pg64_e1;
  8004d0:	e0bffc17 	ldw	r2,-16(fp)
  8004d4:	10c04a83 	ldbu	r3,298(r2)
  8004d8:	e0bffc17 	ldw	r2,-16(fp)
  8004dc:	10c02645 	stb	r3,153(r2)
  d->_cg55 = d->VS || d->_pre_VP;
  8004e0:	e0bffc17 	ldw	r2,-16(fp)
  8004e4:	10801743 	ldbu	r2,93(r2)
  8004e8:	10803fcc 	andi	r2,r2,255
  8004ec:	1080201c 	xori	r2,r2,128
  8004f0:	10bfe004 	addi	r2,r2,-128
  8004f4:	1000061e 	bne	r2,zero,800510 <logic+0x110>
  8004f8:	e0bffc17 	ldw	r2,-16(fp)
  8004fc:	10801943 	ldbu	r2,101(r2)
  800500:	10803fcc 	andi	r2,r2,255
  800504:	1080201c 	xori	r2,r2,128
  800508:	10bfe004 	addi	r2,r2,-128
  80050c:	10000226 	beq	r2,zero,800518 <logic+0x118>
  800510:	00800044 	movi	r2,1
  800514:	00000106 	br	80051c <logic+0x11c>
  800518:	0005883a 	mov	r2,zero
  80051c:	1007883a 	mov	r3,r2
  800520:	e0bffc17 	ldw	r2,-16(fp)
  800524:	10c03e05 	stb	r3,248(r2)
  d->_g56 = d->_g55 && d->_cg55;
  800528:	e0bffc17 	ldw	r2,-16(fp)
  80052c:	10802643 	ldbu	r2,153(r2)
  800530:	10803fcc 	andi	r2,r2,255
  800534:	1080201c 	xori	r2,r2,128
  800538:	10bfe004 	addi	r2,r2,-128
  80053c:	10000826 	beq	r2,zero,800560 <logic+0x160>
  800540:	e0bffc17 	ldw	r2,-16(fp)
  800544:	10803e03 	ldbu	r2,248(r2)
  800548:	10803fcc 	andi	r2,r2,255
  80054c:	1080201c 	xori	r2,r2,128
  800550:	10bfe004 	addi	r2,r2,-128
  800554:	10000226 	beq	r2,zero,800560 <logic+0x160>
  800558:	00800044 	movi	r2,1
  80055c:	00000106 	br	800564 <logic+0x164>
  800560:	0005883a 	mov	r2,zero
  800564:	1007883a 	mov	r3,r2
  800568:	e0bffc17 	ldw	r2,-16(fp)
  80056c:	10c02685 	stb	r3,154(r2)
  if (d->_g56) {
  800570:	e0bffc17 	ldw	r2,-16(fp)
  800574:	10802683 	ldbu	r2,154(r2)
  800578:	10803fcc 	andi	r2,r2,255
  80057c:	1080201c 	xori	r2,r2,128
  800580:	10bfe004 	addi	r2,r2,-128
  800584:	10000926 	beq	r2,zero,8005ac <logic+0x1ac>
    d->_region2_VRP_timer_t = 0;
  800588:	e0bffc17 	ldw	r2,-16(fp)
  80058c:	10000b15 	stw	zero,44(r2)
  800590:	10000c15 	stw	zero,48(r2)
    d->V_event |= 1;
  800594:	e0bffc17 	ldw	r2,-16(fp)
  800598:	10801803 	ldbu	r2,96(r2)
  80059c:	10800054 	ori	r2,r2,1
  8005a0:	1007883a 	mov	r3,r2
  8005a4:	e0bffc17 	ldw	r2,-16(fp)
  8005a8:	10c01805 	stb	r3,96(r2)
  }
  d->_g17 = d->_pg8;
  8005ac:	e0bffc17 	ldw	r2,-16(fp)
  8005b0:	10c04ac3 	ldbu	r3,299(r2)
  8005b4:	e0bffc17 	ldw	r2,-16(fp)
  8005b8:	10c01f85 	stb	r3,126(r2)
  d->_cg17 = d->V_event;
  8005bc:	e0bffc17 	ldw	r2,-16(fp)
  8005c0:	10c01803 	ldbu	r3,96(r2)
  8005c4:	e0bffc17 	ldw	r2,-16(fp)
  8005c8:	10c03ac5 	stb	r3,235(r2)
  d->_g18 = d->_g17 && d->_cg17;
  8005cc:	e0bffc17 	ldw	r2,-16(fp)
  8005d0:	10801f83 	ldbu	r2,126(r2)
  8005d4:	10803fcc 	andi	r2,r2,255
  8005d8:	1080201c 	xori	r2,r2,128
  8005dc:	10bfe004 	addi	r2,r2,-128
  8005e0:	10000826 	beq	r2,zero,800604 <logic+0x204>
  8005e4:	e0bffc17 	ldw	r2,-16(fp)
  8005e8:	10803ac3 	ldbu	r2,235(r2)
  8005ec:	10803fcc 	andi	r2,r2,255
  8005f0:	1080201c 	xori	r2,r2,128
  8005f4:	10bfe004 	addi	r2,r2,-128
  8005f8:	10000226 	beq	r2,zero,800604 <logic+0x204>
  8005fc:	00800044 	movi	r2,1
  800600:	00000106 	br	800608 <logic+0x208>
  800604:	0005883a 	mov	r2,zero
  800608:	1007883a 	mov	r3,r2
  80060c:	e0bffc17 	ldw	r2,-16(fp)
  800610:	10c01fc5 	stb	r3,127(r2)
  if (d->_g18) {
  800614:	e0bffc17 	ldw	r2,-16(fp)
  800618:	10801fc3 	ldbu	r2,127(r2)
  80061c:	10803fcc 	andi	r2,r2,255
  800620:	1080201c 	xori	r2,r2,128
  800624:	10bfe004 	addi	r2,r2,-128
  800628:	10000326 	beq	r2,zero,800638 <logic+0x238>
    d->_Pacemaker_local__Atrig = 1;
  80062c:	e0bffc17 	ldw	r2,-16(fp)
  800630:	00c00044 	movi	r3,1
  800634:	10c01a05 	stb	r3,104(r2)
  }
  d->_g182 = d->_pg150;
  800638:	e0bffc17 	ldw	r2,-16(fp)
  80063c:	10c04b03 	ldbu	r3,300(r2)
  800640:	e0bffc17 	ldw	r2,-16(fp)
  800644:	10c03885 	stb	r3,226(r2)
  if (d->_g182) {
  800648:	e0bffc17 	ldw	r2,-16(fp)
  80064c:	10803883 	ldbu	r2,226(r2)
  800650:	10803fcc 	andi	r2,r2,255
  800654:	1080201c 	xori	r2,r2,128
  800658:	10bfe004 	addi	r2,r2,-128
  80065c:	10001226 	beq	r2,zero,8006a8 <logic+0x2a8>
    d->_region5_URI_timer_t += d->deltaT;
  800660:	e13ffc17 	ldw	r4,-16(fp)
  800664:	20801117 	ldw	r2,68(r4)
  800668:	20c01217 	ldw	r3,72(r4)
  80066c:	e1bffc17 	ldw	r6,-16(fp)
  800670:	31001317 	ldw	r4,76(r6)
  800674:	31401417 	ldw	r5,80(r6)
  800678:	200d883a 	mov	r6,r4
  80067c:	280f883a 	mov	r7,r5
  800680:	1009883a 	mov	r4,r2
  800684:	180b883a 	mov	r5,r3
  800688:	080516c0 	call	80516c <__adddf3>
  80068c:	1009883a 	mov	r4,r2
  800690:	180b883a 	mov	r5,r3
  800694:	2005883a 	mov	r2,r4
  800698:	2807883a 	mov	r3,r5
  80069c:	e13ffc17 	ldw	r4,-16(fp)
  8006a0:	20801115 	stw	r2,68(r4)
  8006a4:	20c01215 	stw	r3,72(r4)
  }
  d->_g131 = d->_pg117;
  8006a8:	e0bffc17 	ldw	r2,-16(fp)
  8006ac:	10c04b43 	ldbu	r3,301(r2)
  8006b0:	e0bffc17 	ldw	r2,-16(fp)
  8006b4:	10c033c5 	stb	r3,207(r2)
  d->_cg131 = d->V_event;
  8006b8:	e0bffc17 	ldw	r2,-16(fp)
  8006bc:	10c01803 	ldbu	r3,96(r2)
  8006c0:	e0bffc17 	ldw	r2,-16(fp)
  8006c4:	10c04485 	stb	r3,274(r2)
  d->_g132 = d->_g131 && d->_cg131;
  8006c8:	e0bffc17 	ldw	r2,-16(fp)
  8006cc:	108033c3 	ldbu	r2,207(r2)
  8006d0:	10803fcc 	andi	r2,r2,255
  8006d4:	1080201c 	xori	r2,r2,128
  8006d8:	10bfe004 	addi	r2,r2,-128
  8006dc:	10000826 	beq	r2,zero,800700 <logic+0x300>
  8006e0:	e0bffc17 	ldw	r2,-16(fp)
  8006e4:	10804483 	ldbu	r2,274(r2)
  8006e8:	10803fcc 	andi	r2,r2,255
  8006ec:	1080201c 	xori	r2,r2,128
  8006f0:	10bfe004 	addi	r2,r2,-128
  8006f4:	10000226 	beq	r2,zero,800700 <logic+0x300>
  8006f8:	00800044 	movi	r2,1
  8006fc:	00000106 	br	800704 <logic+0x304>
  800700:	0005883a 	mov	r2,zero
  800704:	1007883a 	mov	r3,r2
  800708:	e0bffc17 	ldw	r2,-16(fp)
  80070c:	10c03405 	stb	r3,208(r2)
  if (d->_g132) {
  800710:	e0bffc17 	ldw	r2,-16(fp)
  800714:	10803403 	ldbu	r2,208(r2)
  800718:	10803fcc 	andi	r2,r2,255
  80071c:	1080201c 	xori	r2,r2,128
  800720:	10bfe004 	addi	r2,r2,-128
  800724:	10000626 	beq	r2,zero,800740 <logic+0x340>
    d->_region5_URI_timer_t = 0;
  800728:	e0bffc17 	ldw	r2,-16(fp)
  80072c:	10001115 	stw	zero,68(r2)
  800730:	10001215 	stw	zero,72(r2)
    d->inside_URI = 1;
  800734:	e0bffc17 	ldw	r2,-16(fp)
  800738:	00c00044 	movi	r3,1
  80073c:	10c00005 	stb	r3,0(r2)
  }
  d->_g143 = d->_pg152;
  800740:	e0bffc17 	ldw	r2,-16(fp)
  800744:	10c04b83 	ldbu	r3,302(r2)
  800748:	e0bffc17 	ldw	r2,-16(fp)
  80074c:	10c035c5 	stb	r3,215(r2)
  d->_g137 = d->_pg131;
  800750:	e0bffc17 	ldw	r2,-16(fp)
  800754:	10c04bc3 	ldbu	r3,303(r2)
  800758:	e0bffc17 	ldw	r2,-16(fp)
  80075c:	10c03485 	stb	r3,210(r2)
  d->_g140_e1 = !(d->_g143 || d->_g137);
  800760:	e0bffc17 	ldw	r2,-16(fp)
  800764:	108035c3 	ldbu	r2,215(r2)
  800768:	10803fcc 	andi	r2,r2,255
  80076c:	1080201c 	xori	r2,r2,128
  800770:	10bfe004 	addi	r2,r2,-128
  800774:	1000081e 	bne	r2,zero,800798 <logic+0x398>
  800778:	e0bffc17 	ldw	r2,-16(fp)
  80077c:	10803483 	ldbu	r2,210(r2)
  800780:	10803fcc 	andi	r2,r2,255
  800784:	1080201c 	xori	r2,r2,128
  800788:	10bfe004 	addi	r2,r2,-128
  80078c:	1000021e 	bne	r2,zero,800798 <logic+0x398>
  800790:	00800044 	movi	r2,1
  800794:	00000106 	br	80079c <logic+0x39c>
  800798:	0005883a 	mov	r2,zero
  80079c:	1007883a 	mov	r3,r2
  8007a0:	e0bffc17 	ldw	r2,-16(fp)
  8007a4:	10c04985 	stb	r3,294(r2)
  d->_g147 = d->_pg153;
  8007a8:	e0bffc17 	ldw	r2,-16(fp)
  8007ac:	10c04c03 	ldbu	r3,304(r2)
  8007b0:	e0bffc17 	ldw	r2,-16(fp)
  8007b4:	10c03645 	stb	r3,217(r2)
  d->_cg147 = d->V_event;
  8007b8:	e0bffc17 	ldw	r2,-16(fp)
  8007bc:	10c01803 	ldbu	r3,96(r2)
  8007c0:	e0bffc17 	ldw	r2,-16(fp)
  8007c4:	10c04685 	stb	r3,282(r2)
  d->_g148 = d->_g147 && d->_cg147;
  8007c8:	e0bffc17 	ldw	r2,-16(fp)
  8007cc:	10803643 	ldbu	r2,217(r2)
  8007d0:	10803fcc 	andi	r2,r2,255
  8007d4:	1080201c 	xori	r2,r2,128
  8007d8:	10bfe004 	addi	r2,r2,-128
  8007dc:	10000826 	beq	r2,zero,800800 <logic+0x400>
  8007e0:	e0bffc17 	ldw	r2,-16(fp)
  8007e4:	10804683 	ldbu	r2,282(r2)
  8007e8:	10803fcc 	andi	r2,r2,255
  8007ec:	1080201c 	xori	r2,r2,128
  8007f0:	10bfe004 	addi	r2,r2,-128
  8007f4:	10000226 	beq	r2,zero,800800 <logic+0x400>
  8007f8:	00800044 	movi	r2,1
  8007fc:	00000106 	br	800804 <logic+0x404>
  800800:	0005883a 	mov	r2,zero
  800804:	1007883a 	mov	r3,r2
  800808:	e0bffc17 	ldw	r2,-16(fp)
  80080c:	10c03685 	stb	r3,218(r2)
  if (d->_g148) {
  800810:	e0bffc17 	ldw	r2,-16(fp)
  800814:	10803683 	ldbu	r2,218(r2)
  800818:	10803fcc 	andi	r2,r2,255
  80081c:	1080201c 	xori	r2,r2,128
  800820:	10bfe004 	addi	r2,r2,-128
  800824:	10000326 	beq	r2,zero,800834 <logic+0x434>
    d->_Pacemaker_local__Atrig10 = 1;
  800828:	e0bffc17 	ldw	r2,-16(fp)
  80082c:	00c00044 	movi	r3,1
  800830:	10c01c85 	stb	r3,114(r2)
  }
  d->_g150 = d->_g147 && !d->_cg147;
  800834:	e0bffc17 	ldw	r2,-16(fp)
  800838:	10803643 	ldbu	r2,217(r2)
  80083c:	10803fcc 	andi	r2,r2,255
  800840:	1080201c 	xori	r2,r2,128
  800844:	10bfe004 	addi	r2,r2,-128
  800848:	10000826 	beq	r2,zero,80086c <logic+0x46c>
  80084c:	e0bffc17 	ldw	r2,-16(fp)
  800850:	10804683 	ldbu	r2,282(r2)
  800854:	10803fcc 	andi	r2,r2,255
  800858:	1080201c 	xori	r2,r2,128
  80085c:	10bfe004 	addi	r2,r2,-128
  800860:	1000021e 	bne	r2,zero,80086c <logic+0x46c>
  800864:	00800044 	movi	r2,1
  800868:	00000106 	br	800870 <logic+0x470>
  80086c:	0005883a 	mov	r2,zero
  800870:	1007883a 	mov	r3,r2
  800874:	e0bffc17 	ldw	r2,-16(fp)
  800878:	10c03705 	stb	r3,220(r2)
  d->_cg150 = d->_region5_URI_timer_t >= d->URI_Constraint;
  80087c:	e0bffc17 	ldw	r2,-16(fp)
  800880:	14001117 	ldw	r16,68(r2)
  800884:	14401217 	ldw	r17,72(r2)
  800888:	e0bffc17 	ldw	r2,-16(fp)
  80088c:	10800617 	ldw	r2,24(r2)
  800890:	1009883a 	mov	r4,r2
  800894:	08064e40 	call	8064e4 <__floatsidf>
  800898:	1009883a 	mov	r4,r2
  80089c:	180b883a 	mov	r5,r3
  8008a0:	04800044 	movi	r18,1
  8008a4:	200d883a 	mov	r6,r4
  8008a8:	280f883a 	mov	r7,r5
  8008ac:	8009883a 	mov	r4,r16
  8008b0:	880b883a 	mov	r5,r17
  8008b4:	0805a180 	call	805a18 <__gedf2>
  8008b8:	1000010e 	bge	r2,zero,8008c0 <logic+0x4c0>
  8008bc:	0025883a 	mov	r18,zero
  8008c0:	9007883a 	mov	r3,r18
  8008c4:	e0bffc17 	ldw	r2,-16(fp)
  8008c8:	10c04645 	stb	r3,281(r2)
  d->_g151 = d->_g150 && d->_cg150;
  8008cc:	e0bffc17 	ldw	r2,-16(fp)
  8008d0:	10803703 	ldbu	r2,220(r2)
  8008d4:	10803fcc 	andi	r2,r2,255
  8008d8:	1080201c 	xori	r2,r2,128
  8008dc:	10bfe004 	addi	r2,r2,-128
  8008e0:	10000826 	beq	r2,zero,800904 <logic+0x504>
  8008e4:	e0bffc17 	ldw	r2,-16(fp)
  8008e8:	10804643 	ldbu	r2,281(r2)
  8008ec:	10803fcc 	andi	r2,r2,255
  8008f0:	1080201c 	xori	r2,r2,128
  8008f4:	10bfe004 	addi	r2,r2,-128
  8008f8:	10000226 	beq	r2,zero,800904 <logic+0x504>
  8008fc:	00800044 	movi	r2,1
  800900:	00000106 	br	800908 <logic+0x508>
  800904:	0005883a 	mov	r2,zero
  800908:	1007883a 	mov	r3,r2
  80090c:	e0bffc17 	ldw	r2,-16(fp)
  800910:	10c03745 	stb	r3,221(r2)
  if (d->_g151) {
  800914:	e0bffc17 	ldw	r2,-16(fp)
  800918:	10803743 	ldbu	r2,221(r2)
  80091c:	10803fcc 	andi	r2,r2,255
  800920:	1080201c 	xori	r2,r2,128
  800924:	10bfe004 	addi	r2,r2,-128
  800928:	10000326 	beq	r2,zero,800938 <logic+0x538>
    d->_Pacemaker_local__Atrig11 = 1;
  80092c:	e0bffc17 	ldw	r2,-16(fp)
  800930:	00c00044 	movi	r3,1
  800934:	10c01cc5 	stb	r3,115(r2)
  }
  d->sleepT = 1000.0;
  800938:	e0fffc17 	ldw	r3,-16(fp)
  80093c:	18001515 	stw	zero,84(r3)
  800940:	009023f4 	movhi	r2,16527
  800944:	10900004 	addi	r2,r2,16384
  800948:	18801615 	stw	r2,88(r3)
  d->_g143 = d->_g137 || d->_g143;
  80094c:	e0bffc17 	ldw	r2,-16(fp)
  800950:	10803483 	ldbu	r2,210(r2)
  800954:	10803fcc 	andi	r2,r2,255
  800958:	1080201c 	xori	r2,r2,128
  80095c:	10bfe004 	addi	r2,r2,-128
  800960:	1000061e 	bne	r2,zero,80097c <logic+0x57c>
  800964:	e0bffc17 	ldw	r2,-16(fp)
  800968:	108035c3 	ldbu	r2,215(r2)
  80096c:	10803fcc 	andi	r2,r2,255
  800970:	1080201c 	xori	r2,r2,128
  800974:	10bfe004 	addi	r2,r2,-128
  800978:	10000226 	beq	r2,zero,800984 <logic+0x584>
  80097c:	00800044 	movi	r2,1
  800980:	00000106 	br	800988 <logic+0x588>
  800984:	0005883a 	mov	r2,zero
  800988:	1007883a 	mov	r3,r2
  80098c:	e0bffc17 	ldw	r2,-16(fp)
  800990:	10c035c5 	stb	r3,215(r2)
  d->_cg138 = d->_region5_URI_timer_t < d->URI_Constraint;
  800994:	e0bffc17 	ldw	r2,-16(fp)
  800998:	14001117 	ldw	r16,68(r2)
  80099c:	14401217 	ldw	r17,72(r2)
  8009a0:	e0bffc17 	ldw	r2,-16(fp)
  8009a4:	10800617 	ldw	r2,24(r2)
  8009a8:	1009883a 	mov	r4,r2
  8009ac:	08064e40 	call	8064e4 <__floatsidf>
  8009b0:	1009883a 	mov	r4,r2
  8009b4:	180b883a 	mov	r5,r3
  8009b8:	04800044 	movi	r18,1
  8009bc:	200d883a 	mov	r6,r4
  8009c0:	280f883a 	mov	r7,r5
  8009c4:	8009883a 	mov	r4,r16
  8009c8:	880b883a 	mov	r5,r17
  8009cc:	0805af40 	call	805af4 <__ledf2>
  8009d0:	10000116 	blt	r2,zero,8009d8 <logic+0x5d8>
  8009d4:	0025883a 	mov	r18,zero
  8009d8:	9007883a 	mov	r3,r18
  8009dc:	e0bffc17 	ldw	r2,-16(fp)
  8009e0:	10c04585 	stb	r3,278(r2)
  d->_g137 = d->_g143 && d->_cg138;
  8009e4:	e0bffc17 	ldw	r2,-16(fp)
  8009e8:	108035c3 	ldbu	r2,215(r2)
  8009ec:	10803fcc 	andi	r2,r2,255
  8009f0:	1080201c 	xori	r2,r2,128
  8009f4:	10bfe004 	addi	r2,r2,-128
  8009f8:	10000826 	beq	r2,zero,800a1c <logic+0x61c>
  8009fc:	e0bffc17 	ldw	r2,-16(fp)
  800a00:	10804583 	ldbu	r2,278(r2)
  800a04:	10803fcc 	andi	r2,r2,255
  800a08:	1080201c 	xori	r2,r2,128
  800a0c:	10bfe004 	addi	r2,r2,-128
  800a10:	10000226 	beq	r2,zero,800a1c <logic+0x61c>
  800a14:	00800044 	movi	r2,1
  800a18:	00000106 	br	800a20 <logic+0x620>
  800a1c:	0005883a 	mov	r2,zero
  800a20:	1007883a 	mov	r3,r2
  800a24:	e0bffc17 	ldw	r2,-16(fp)
  800a28:	10c03485 	stb	r3,210(r2)
  if (d->_g137) {
  800a2c:	e0bffc17 	ldw	r2,-16(fp)
  800a30:	10803483 	ldbu	r2,210(r2)
  800a34:	10803fcc 	andi	r2,r2,255
  800a38:	1080201c 	xori	r2,r2,128
  800a3c:	10bfe004 	addi	r2,r2,-128
  800a40:	10003426 	beq	r2,zero,800b14 <logic+0x714>
    d->sleepT = (d->sleepT < (d->URI_Constraint - d->_region5_URI_timer_t)) ? d->sleepT : (d->URI_Constraint - d->_region5_URI_timer_t);
  800a44:	e0bffc17 	ldw	r2,-16(fp)
  800a48:	14001517 	ldw	r16,84(r2)
  800a4c:	14401617 	ldw	r17,88(r2)
  800a50:	e0bffc17 	ldw	r2,-16(fp)
  800a54:	10800617 	ldw	r2,24(r2)
  800a58:	1009883a 	mov	r4,r2
  800a5c:	08064e40 	call	8064e4 <__floatsidf>
  800a60:	1011883a 	mov	r8,r2
  800a64:	1813883a 	mov	r9,r3
  800a68:	e13ffc17 	ldw	r4,-16(fp)
  800a6c:	20801117 	ldw	r2,68(r4)
  800a70:	20c01217 	ldw	r3,72(r4)
  800a74:	100d883a 	mov	r6,r2
  800a78:	180f883a 	mov	r7,r3
  800a7c:	4009883a 	mov	r4,r8
  800a80:	480b883a 	mov	r5,r9
  800a84:	0805be80 	call	805be8 <__subdf3>
  800a88:	1009883a 	mov	r4,r2
  800a8c:	180b883a 	mov	r5,r3
  800a90:	2005883a 	mov	r2,r4
  800a94:	2807883a 	mov	r3,r5
  800a98:	100d883a 	mov	r6,r2
  800a9c:	180f883a 	mov	r7,r3
  800aa0:	8009883a 	mov	r4,r16
  800aa4:	880b883a 	mov	r5,r17
  800aa8:	0805af40 	call	805af4 <__ledf2>
  800aac:	1000040e 	bge	r2,zero,800ac0 <logic+0x6c0>
  800ab0:	e13ffc17 	ldw	r4,-16(fp)
  800ab4:	20801517 	ldw	r2,84(r4)
  800ab8:	20c01617 	ldw	r3,88(r4)
  800abc:	00001206 	br	800b08 <logic+0x708>
  800ac0:	e0bffc17 	ldw	r2,-16(fp)
  800ac4:	10800617 	ldw	r2,24(r2)
  800ac8:	1009883a 	mov	r4,r2
  800acc:	08064e40 	call	8064e4 <__floatsidf>
  800ad0:	1011883a 	mov	r8,r2
  800ad4:	1813883a 	mov	r9,r3
  800ad8:	e13ffc17 	ldw	r4,-16(fp)
  800adc:	20801117 	ldw	r2,68(r4)
  800ae0:	20c01217 	ldw	r3,72(r4)
  800ae4:	100d883a 	mov	r6,r2
  800ae8:	180f883a 	mov	r7,r3
  800aec:	4009883a 	mov	r4,r8
  800af0:	480b883a 	mov	r5,r9
  800af4:	0805be80 	call	805be8 <__subdf3>
  800af8:	1009883a 	mov	r4,r2
  800afc:	180b883a 	mov	r5,r3
  800b00:	2005883a 	mov	r2,r4
  800b04:	2807883a 	mov	r3,r5
  800b08:	e13ffc17 	ldw	r4,-16(fp)
  800b0c:	20801515 	stw	r2,84(r4)
  800b10:	20c01615 	stw	r3,88(r4)
  }
  d->_cg139 = d->_Pacemaker_local__Atrig10 || d->_Pacemaker_local__Atrig11;
  800b14:	e0bffc17 	ldw	r2,-16(fp)
  800b18:	10801c83 	ldbu	r2,114(r2)
  800b1c:	10803fcc 	andi	r2,r2,255
  800b20:	1080201c 	xori	r2,r2,128
  800b24:	10bfe004 	addi	r2,r2,-128
  800b28:	1000061e 	bne	r2,zero,800b44 <logic+0x744>
  800b2c:	e0bffc17 	ldw	r2,-16(fp)
  800b30:	10801cc3 	ldbu	r2,115(r2)
  800b34:	10803fcc 	andi	r2,r2,255
  800b38:	1080201c 	xori	r2,r2,128
  800b3c:	10bfe004 	addi	r2,r2,-128
  800b40:	10000226 	beq	r2,zero,800b4c <logic+0x74c>
  800b44:	00800044 	movi	r2,1
  800b48:	00000106 	br	800b50 <logic+0x750>
  800b4c:	0005883a 	mov	r2,zero
  800b50:	1007883a 	mov	r3,r2
  800b54:	e0bffc17 	ldw	r2,-16(fp)
  800b58:	10c04545 	stb	r3,277(r2)
  d->_g138 = d->_g143 && !d->_cg138;
  800b5c:	e0bffc17 	ldw	r2,-16(fp)
  800b60:	108035c3 	ldbu	r2,215(r2)
  800b64:	10803fcc 	andi	r2,r2,255
  800b68:	1080201c 	xori	r2,r2,128
  800b6c:	10bfe004 	addi	r2,r2,-128
  800b70:	10000826 	beq	r2,zero,800b94 <logic+0x794>
  800b74:	e0bffc17 	ldw	r2,-16(fp)
  800b78:	10804583 	ldbu	r2,278(r2)
  800b7c:	10803fcc 	andi	r2,r2,255
  800b80:	1080201c 	xori	r2,r2,128
  800b84:	10bfe004 	addi	r2,r2,-128
  800b88:	1000021e 	bne	r2,zero,800b94 <logic+0x794>
  800b8c:	00800044 	movi	r2,1
  800b90:	00000106 	br	800b98 <logic+0x798>
  800b94:	0005883a 	mov	r2,zero
  800b98:	1007883a 	mov	r3,r2
  800b9c:	e0bffc17 	ldw	r2,-16(fp)
  800ba0:	10c034c5 	stb	r3,211(r2)
  d->_cg141 = d->_Pacemaker_local__Atrig10 || d->_Pacemaker_local__Atrig11;
  800ba4:	e0bffc17 	ldw	r2,-16(fp)
  800ba8:	10801c83 	ldbu	r2,114(r2)
  800bac:	10803fcc 	andi	r2,r2,255
  800bb0:	1080201c 	xori	r2,r2,128
  800bb4:	10bfe004 	addi	r2,r2,-128
  800bb8:	1000061e 	bne	r2,zero,800bd4 <logic+0x7d4>
  800bbc:	e0bffc17 	ldw	r2,-16(fp)
  800bc0:	10801cc3 	ldbu	r2,115(r2)
  800bc4:	10803fcc 	andi	r2,r2,255
  800bc8:	1080201c 	xori	r2,r2,128
  800bcc:	10bfe004 	addi	r2,r2,-128
  800bd0:	10000226 	beq	r2,zero,800bdc <logic+0x7dc>
  800bd4:	00800044 	movi	r2,1
  800bd8:	00000106 	br	800be0 <logic+0x7e0>
  800bdc:	0005883a 	mov	r2,zero
  800be0:	1007883a 	mov	r3,r2
  800be4:	e0bffc17 	ldw	r2,-16(fp)
  800be8:	10c045c5 	stb	r3,279(r2)
  d->_g140 = d->_g137 && d->_cg139 || d->_g138 && d->_cg141;
  800bec:	e0bffc17 	ldw	r2,-16(fp)
  800bf0:	10803483 	ldbu	r2,210(r2)
  800bf4:	10803fcc 	andi	r2,r2,255
  800bf8:	1080201c 	xori	r2,r2,128
  800bfc:	10bfe004 	addi	r2,r2,-128
  800c00:	10000626 	beq	r2,zero,800c1c <logic+0x81c>
  800c04:	e0bffc17 	ldw	r2,-16(fp)
  800c08:	10804543 	ldbu	r2,277(r2)
  800c0c:	10803fcc 	andi	r2,r2,255
  800c10:	1080201c 	xori	r2,r2,128
  800c14:	10bfe004 	addi	r2,r2,-128
  800c18:	10000c1e 	bne	r2,zero,800c4c <logic+0x84c>
  800c1c:	e0bffc17 	ldw	r2,-16(fp)
  800c20:	108034c3 	ldbu	r2,211(r2)
  800c24:	10803fcc 	andi	r2,r2,255
  800c28:	1080201c 	xori	r2,r2,128
  800c2c:	10bfe004 	addi	r2,r2,-128
  800c30:	10000826 	beq	r2,zero,800c54 <logic+0x854>
  800c34:	e0bffc17 	ldw	r2,-16(fp)
  800c38:	108045c3 	ldbu	r2,279(r2)
  800c3c:	10803fcc 	andi	r2,r2,255
  800c40:	1080201c 	xori	r2,r2,128
  800c44:	10bfe004 	addi	r2,r2,-128
  800c48:	10000226 	beq	r2,zero,800c54 <logic+0x854>
  800c4c:	00800044 	movi	r2,1
  800c50:	00000106 	br	800c58 <logic+0x858>
  800c54:	0005883a 	mov	r2,zero
  800c58:	1007883a 	mov	r3,r2
  800c5c:	e0bffc17 	ldw	r2,-16(fp)
  800c60:	10c03545 	stb	r3,213(r2)
  d->_g147 = !d->_g147;
  800c64:	e0bffc17 	ldw	r2,-16(fp)
  800c68:	10803643 	ldbu	r2,217(r2)
  800c6c:	10803fcc 	andi	r2,r2,255
  800c70:	1080201c 	xori	r2,r2,128
  800c74:	10bfe004 	addi	r2,r2,-128
  800c78:	1005003a 	cmpeq	r2,r2,zero
  800c7c:	1007883a 	mov	r3,r2
  800c80:	e0bffc17 	ldw	r2,-16(fp)
  800c84:	10c03645 	stb	r3,217(r2)
  d->_g151 = d->_g148 || d->_g151;
  800c88:	e0bffc17 	ldw	r2,-16(fp)
  800c8c:	10803683 	ldbu	r2,218(r2)
  800c90:	10803fcc 	andi	r2,r2,255
  800c94:	1080201c 	xori	r2,r2,128
  800c98:	10bfe004 	addi	r2,r2,-128
  800c9c:	1000061e 	bne	r2,zero,800cb8 <logic+0x8b8>
  800ca0:	e0bffc17 	ldw	r2,-16(fp)
  800ca4:	10803743 	ldbu	r2,221(r2)
  800ca8:	10803fcc 	andi	r2,r2,255
  800cac:	1080201c 	xori	r2,r2,128
  800cb0:	10bfe004 	addi	r2,r2,-128
  800cb4:	10000226 	beq	r2,zero,800cc0 <logic+0x8c0>
  800cb8:	00800044 	movi	r2,1
  800cbc:	00000106 	br	800cc4 <logic+0x8c4>
  800cc0:	0005883a 	mov	r2,zero
  800cc4:	1007883a 	mov	r3,r2
  800cc8:	e0bffc17 	ldw	r2,-16(fp)
  800ccc:	10c03745 	stb	r3,221(r2)
  d->_g148 = (d->_g140_e1 || d->_g140) && (d->_g147 || d->_g151) && (d->_g140 || d->_g151);
  800cd0:	e0bffc17 	ldw	r2,-16(fp)
  800cd4:	10804983 	ldbu	r2,294(r2)
  800cd8:	10803fcc 	andi	r2,r2,255
  800cdc:	1080201c 	xori	r2,r2,128
  800ce0:	10bfe004 	addi	r2,r2,-128
  800ce4:	1000061e 	bne	r2,zero,800d00 <logic+0x900>
  800ce8:	e0bffc17 	ldw	r2,-16(fp)
  800cec:	10803543 	ldbu	r2,213(r2)
  800cf0:	10803fcc 	andi	r2,r2,255
  800cf4:	1080201c 	xori	r2,r2,128
  800cf8:	10bfe004 	addi	r2,r2,-128
  800cfc:	10001a26 	beq	r2,zero,800d68 <logic+0x968>
  800d00:	e0bffc17 	ldw	r2,-16(fp)
  800d04:	10803643 	ldbu	r2,217(r2)
  800d08:	10803fcc 	andi	r2,r2,255
  800d0c:	1080201c 	xori	r2,r2,128
  800d10:	10bfe004 	addi	r2,r2,-128
  800d14:	1000061e 	bne	r2,zero,800d30 <logic+0x930>
  800d18:	e0bffc17 	ldw	r2,-16(fp)
  800d1c:	10803743 	ldbu	r2,221(r2)
  800d20:	10803fcc 	andi	r2,r2,255
  800d24:	1080201c 	xori	r2,r2,128
  800d28:	10bfe004 	addi	r2,r2,-128
  800d2c:	10000e26 	beq	r2,zero,800d68 <logic+0x968>
  800d30:	e0bffc17 	ldw	r2,-16(fp)
  800d34:	10803543 	ldbu	r2,213(r2)
  800d38:	10803fcc 	andi	r2,r2,255
  800d3c:	1080201c 	xori	r2,r2,128
  800d40:	10bfe004 	addi	r2,r2,-128
  800d44:	1000061e 	bne	r2,zero,800d60 <logic+0x960>
  800d48:	e0bffc17 	ldw	r2,-16(fp)
  800d4c:	10803743 	ldbu	r2,221(r2)
  800d50:	10803fcc 	andi	r2,r2,255
  800d54:	1080201c 	xori	r2,r2,128
  800d58:	10bfe004 	addi	r2,r2,-128
  800d5c:	10000226 	beq	r2,zero,800d68 <logic+0x968>
  800d60:	00800044 	movi	r2,1
  800d64:	00000106 	br	800d6c <logic+0x96c>
  800d68:	0005883a 	mov	r2,zero
  800d6c:	1007883a 	mov	r3,r2
  800d70:	e0bffc17 	ldw	r2,-16(fp)
  800d74:	10c03685 	stb	r3,218(r2)
  d->_cg152 = d->_Pacemaker_local__Atrig10;
  800d78:	e0bffc17 	ldw	r2,-16(fp)
  800d7c:	10c01c83 	ldbu	r3,114(r2)
  800d80:	e0bffc17 	ldw	r2,-16(fp)
  800d84:	10c046c5 	stb	r3,283(r2)
  d->_g149_e2 = d->_g148 && !d->_cg152;
  800d88:	e0bffc17 	ldw	r2,-16(fp)
  800d8c:	10803683 	ldbu	r2,218(r2)
  800d90:	10803fcc 	andi	r2,r2,255
  800d94:	1080201c 	xori	r2,r2,128
  800d98:	10bfe004 	addi	r2,r2,-128
  800d9c:	10000826 	beq	r2,zero,800dc0 <logic+0x9c0>
  800da0:	e0bffc17 	ldw	r2,-16(fp)
  800da4:	108046c3 	ldbu	r2,283(r2)
  800da8:	10803fcc 	andi	r2,r2,255
  800dac:	1080201c 	xori	r2,r2,128
  800db0:	10bfe004 	addi	r2,r2,-128
  800db4:	1000021e 	bne	r2,zero,800dc0 <logic+0x9c0>
  800db8:	00800044 	movi	r2,1
  800dbc:	00000106 	br	800dc4 <logic+0x9c4>
  800dc0:	0005883a 	mov	r2,zero
  800dc4:	1007883a 	mov	r3,r2
  800dc8:	e0bffc17 	ldw	r2,-16(fp)
  800dcc:	10c049c5 	stb	r3,295(r2)
  if (d->_g149_e2) {
  800dd0:	e0bffc17 	ldw	r2,-16(fp)
  800dd4:	108049c3 	ldbu	r2,295(r2)
  800dd8:	10803fcc 	andi	r2,r2,255
  800ddc:	1080201c 	xori	r2,r2,128
  800de0:	10bfe004 	addi	r2,r2,-128
  800de4:	10000226 	beq	r2,zero,800df0 <logic+0x9f0>
    d->inside_URI = 0;
  800de8:	e0bffc17 	ldw	r2,-16(fp)
  800dec:	10000005 	stb	zero,0(r2)
  }
  d->_g140_e1 = d->_pg132;
  800df0:	e0bffc17 	ldw	r2,-16(fp)
  800df4:	10c04c43 	ldbu	r3,305(r2)
  800df8:	e0bffc17 	ldw	r2,-16(fp)
  800dfc:	10c04985 	stb	r3,294(r2)
  if (d->_g140_e1) {
  800e00:	e0bffc17 	ldw	r2,-16(fp)
  800e04:	10804983 	ldbu	r2,294(r2)
  800e08:	10803fcc 	andi	r2,r2,255
  800e0c:	1080201c 	xori	r2,r2,128
  800e10:	10bfe004 	addi	r2,r2,-128
  800e14:	10001226 	beq	r2,zero,800e60 <logic+0xa60>
    d->_region0_AVI_timer_t += d->deltaT;
  800e18:	e13ffc17 	ldw	r4,-16(fp)
  800e1c:	20800717 	ldw	r2,28(r4)
  800e20:	20c00817 	ldw	r3,32(r4)
  800e24:	e1bffc17 	ldw	r6,-16(fp)
  800e28:	31001317 	ldw	r4,76(r6)
  800e2c:	31401417 	ldw	r5,80(r6)
  800e30:	200d883a 	mov	r6,r4
  800e34:	280f883a 	mov	r7,r5
  800e38:	1009883a 	mov	r4,r2
  800e3c:	180b883a 	mov	r5,r3
  800e40:	080516c0 	call	80516c <__adddf3>
  800e44:	1009883a 	mov	r4,r2
  800e48:	180b883a 	mov	r5,r3
  800e4c:	2005883a 	mov	r2,r4
  800e50:	2807883a 	mov	r3,r5
  800e54:	e13ffc17 	ldw	r4,-16(fp)
  800e58:	20800715 	stw	r2,28(r4)
  800e5c:	20c00815 	stw	r3,32(r4)
  }
  d->_g149 = d->_g17 && !d->_cg17;
  800e60:	e0bffc17 	ldw	r2,-16(fp)
  800e64:	10801f83 	ldbu	r2,126(r2)
  800e68:	10803fcc 	andi	r2,r2,255
  800e6c:	1080201c 	xori	r2,r2,128
  800e70:	10bfe004 	addi	r2,r2,-128
  800e74:	10000826 	beq	r2,zero,800e98 <logic+0xa98>
  800e78:	e0bffc17 	ldw	r2,-16(fp)
  800e7c:	10803ac3 	ldbu	r2,235(r2)
  800e80:	10803fcc 	andi	r2,r2,255
  800e84:	1080201c 	xori	r2,r2,128
  800e88:	10bfe004 	addi	r2,r2,-128
  800e8c:	1000021e 	bne	r2,zero,800e98 <logic+0xa98>
  800e90:	00800044 	movi	r2,1
  800e94:	00000106 	br	800e9c <logic+0xa9c>
  800e98:	0005883a 	mov	r2,zero
  800e9c:	1007883a 	mov	r3,r2
  800ea0:	e0bffc17 	ldw	r2,-16(fp)
  800ea4:	10c036c5 	stb	r3,219(r2)
  d->_cg20 = d->_region0_AVI_timer_t >= d->AVI_Constraint && !d->inside_URI;
  800ea8:	e0bffc17 	ldw	r2,-16(fp)
  800eac:	14000717 	ldw	r16,28(r2)
  800eb0:	14400817 	ldw	r17,32(r2)
  800eb4:	e0bffc17 	ldw	r2,-16(fp)
  800eb8:	10800117 	ldw	r2,4(r2)
  800ebc:	1009883a 	mov	r4,r2
  800ec0:	08064e40 	call	8064e4 <__floatsidf>
  800ec4:	1009883a 	mov	r4,r2
  800ec8:	180b883a 	mov	r5,r3
  800ecc:	200d883a 	mov	r6,r4
  800ed0:	280f883a 	mov	r7,r5
  800ed4:	8009883a 	mov	r4,r16
  800ed8:	880b883a 	mov	r5,r17
  800edc:	0805a180 	call	805a18 <__gedf2>
  800ee0:	10000816 	blt	r2,zero,800f04 <logic+0xb04>
  800ee4:	e0bffc17 	ldw	r2,-16(fp)
  800ee8:	10800003 	ldbu	r2,0(r2)
  800eec:	10803fcc 	andi	r2,r2,255
  800ef0:	1080201c 	xori	r2,r2,128
  800ef4:	10bfe004 	addi	r2,r2,-128
  800ef8:	1000021e 	bne	r2,zero,800f04 <logic+0xb04>
  800efc:	00800044 	movi	r2,1
  800f00:	00000106 	br	800f08 <logic+0xb08>
  800f04:	0005883a 	mov	r2,zero
  800f08:	1007883a 	mov	r3,r2
  800f0c:	e0bffc17 	ldw	r2,-16(fp)
  800f10:	10c03a85 	stb	r3,234(r2)
  d->_g140 = d->_g149 && d->_cg20;
  800f14:	e0bffc17 	ldw	r2,-16(fp)
  800f18:	108036c3 	ldbu	r2,219(r2)
  800f1c:	10803fcc 	andi	r2,r2,255
  800f20:	1080201c 	xori	r2,r2,128
  800f24:	10bfe004 	addi	r2,r2,-128
  800f28:	10000826 	beq	r2,zero,800f4c <logic+0xb4c>
  800f2c:	e0bffc17 	ldw	r2,-16(fp)
  800f30:	10803a83 	ldbu	r2,234(r2)
  800f34:	10803fcc 	andi	r2,r2,255
  800f38:	1080201c 	xori	r2,r2,128
  800f3c:	10bfe004 	addi	r2,r2,-128
  800f40:	10000226 	beq	r2,zero,800f4c <logic+0xb4c>
  800f44:	00800044 	movi	r2,1
  800f48:	00000106 	br	800f50 <logic+0xb50>
  800f4c:	0005883a 	mov	r2,zero
  800f50:	1007883a 	mov	r3,r2
  800f54:	e0bffc17 	ldw	r2,-16(fp)
  800f58:	10c03545 	stb	r3,213(r2)
  if (d->_g140) {
  800f5c:	e0bffc17 	ldw	r2,-16(fp)
  800f60:	10803543 	ldbu	r2,213(r2)
  800f64:	10803fcc 	andi	r2,r2,255
  800f68:	1080201c 	xori	r2,r2,128
  800f6c:	10bfe004 	addi	r2,r2,-128
  800f70:	10000326 	beq	r2,zero,800f80 <logic+0xb80>
    d->_Pacemaker_local__Atrig1 = 1;
  800f74:	e0bffc17 	ldw	r2,-16(fp)
  800f78:	00c00044 	movi	r3,1
  800f7c:	10c01a45 	stb	r3,105(r2)
  }
  d->_g17 = d->_pg195;
  800f80:	e0bffc17 	ldw	r2,-16(fp)
  800f84:	10c04c83 	ldbu	r3,306(r2)
  800f88:	e0bffc17 	ldw	r2,-16(fp)
  800f8c:	10c01f85 	stb	r3,126(r2)
  d->_g195 = d->_GO || d->_g17;
  800f90:	e0bffc17 	ldw	r2,-16(fp)
  800f94:	10803903 	ldbu	r2,228(r2)
  800f98:	10803fcc 	andi	r2,r2,255
  800f9c:	1080201c 	xori	r2,r2,128
  800fa0:	10bfe004 	addi	r2,r2,-128
  800fa4:	1000061e 	bne	r2,zero,800fc0 <logic+0xbc0>
  800fa8:	e0bffc17 	ldw	r2,-16(fp)
  800fac:	10801f83 	ldbu	r2,126(r2)
  800fb0:	10803fcc 	andi	r2,r2,255
  800fb4:	1080201c 	xori	r2,r2,128
  800fb8:	10bfe004 	addi	r2,r2,-128
  800fbc:	10000226 	beq	r2,zero,800fc8 <logic+0xbc8>
  800fc0:	00800044 	movi	r2,1
  800fc4:	00000106 	br	800fcc <logic+0xbcc>
  800fc8:	0005883a 	mov	r2,zero
  800fcc:	1007883a 	mov	r3,r2
  800fd0:	e0bffc17 	ldw	r2,-16(fp)
  800fd4:	10c038c5 	stb	r3,227(r2)
  if (d->_g195) {
  800fd8:	e0bffc17 	ldw	r2,-16(fp)
  800fdc:	108038c3 	ldbu	r2,227(r2)
  800fe0:	10803fcc 	andi	r2,r2,255
  800fe4:	1080201c 	xori	r2,r2,128
  800fe8:	10bfe004 	addi	r2,r2,-128
  800fec:	10000426 	beq	r2,zero,801000 <logic+0xc00>
    d->_pre_AP = d->_reg_AP;
  800ff0:	e0bffc17 	ldw	r2,-16(fp)
  800ff4:	10c01983 	ldbu	r3,102(r2)
  800ff8:	e0bffc17 	ldw	r2,-16(fp)
  800ffc:	10c019c5 	stb	r3,103(r2)
  }
  d->_g27 = d->_pg45_e2;
  801000:	e0bffc17 	ldw	r2,-16(fp)
  801004:	10c04cc3 	ldbu	r3,307(r2)
  801008:	e0bffc17 	ldw	r2,-16(fp)
  80100c:	10c02145 	stb	r3,133(r2)
  d->_cg27 = d->VS || d->_pre_VP;
  801010:	e0bffc17 	ldw	r2,-16(fp)
  801014:	10801743 	ldbu	r2,93(r2)
  801018:	10803fcc 	andi	r2,r2,255
  80101c:	1080201c 	xori	r2,r2,128
  801020:	10bfe004 	addi	r2,r2,-128
  801024:	1000061e 	bne	r2,zero,801040 <logic+0xc40>
  801028:	e0bffc17 	ldw	r2,-16(fp)
  80102c:	10801943 	ldbu	r2,101(r2)
  801030:	10803fcc 	andi	r2,r2,255
  801034:	1080201c 	xori	r2,r2,128
  801038:	10bfe004 	addi	r2,r2,-128
  80103c:	10000226 	beq	r2,zero,801048 <logic+0xc48>
  801040:	00800044 	movi	r2,1
  801044:	00000106 	br	80104c <logic+0xc4c>
  801048:	0005883a 	mov	r2,zero
  80104c:	1007883a 	mov	r3,r2
  801050:	e0bffc17 	ldw	r2,-16(fp)
  801054:	10c03b85 	stb	r3,238(r2)
  d->_g50 = d->_g27 && !d->_cg27;
  801058:	e0bffc17 	ldw	r2,-16(fp)
  80105c:	10802143 	ldbu	r2,133(r2)
  801060:	10803fcc 	andi	r2,r2,255
  801064:	1080201c 	xori	r2,r2,128
  801068:	10bfe004 	addi	r2,r2,-128
  80106c:	10000826 	beq	r2,zero,801090 <logic+0xc90>
  801070:	e0bffc17 	ldw	r2,-16(fp)
  801074:	10803b83 	ldbu	r2,238(r2)
  801078:	10803fcc 	andi	r2,r2,255
  80107c:	1080201c 	xori	r2,r2,128
  801080:	10bfe004 	addi	r2,r2,-128
  801084:	1000021e 	bne	r2,zero,801090 <logic+0xc90>
  801088:	00800044 	movi	r2,1
  80108c:	00000106 	br	801094 <logic+0xc94>
  801090:	0005883a 	mov	r2,zero
  801094:	1007883a 	mov	r3,r2
  801098:	e0bffc17 	ldw	r2,-16(fp)
  80109c:	10c025c5 	stb	r3,151(r2)
  d->_cg50 = d->AS || d->_pre_AP;
  8010a0:	e0bffc17 	ldw	r2,-16(fp)
  8010a4:	10801703 	ldbu	r2,92(r2)
  8010a8:	10803fcc 	andi	r2,r2,255
  8010ac:	1080201c 	xori	r2,r2,128
  8010b0:	10bfe004 	addi	r2,r2,-128
  8010b4:	1000061e 	bne	r2,zero,8010d0 <logic+0xcd0>
  8010b8:	e0bffc17 	ldw	r2,-16(fp)
  8010bc:	108019c3 	ldbu	r2,103(r2)
  8010c0:	10803fcc 	andi	r2,r2,255
  8010c4:	1080201c 	xori	r2,r2,128
  8010c8:	10bfe004 	addi	r2,r2,-128
  8010cc:	10000226 	beq	r2,zero,8010d8 <logic+0xcd8>
  8010d0:	00800044 	movi	r2,1
  8010d4:	00000106 	br	8010dc <logic+0xcdc>
  8010d8:	0005883a 	mov	r2,zero
  8010dc:	1007883a 	mov	r3,r2
  8010e0:	e0bffc17 	ldw	r2,-16(fp)
  8010e4:	10c03b45 	stb	r3,237(r2)
  d->_g51 = d->_g50 && d->_cg50;
  8010e8:	e0bffc17 	ldw	r2,-16(fp)
  8010ec:	108025c3 	ldbu	r2,151(r2)
  8010f0:	10803fcc 	andi	r2,r2,255
  8010f4:	1080201c 	xori	r2,r2,128
  8010f8:	10bfe004 	addi	r2,r2,-128
  8010fc:	10000826 	beq	r2,zero,801120 <logic+0xd20>
  801100:	e0bffc17 	ldw	r2,-16(fp)
  801104:	10803b43 	ldbu	r2,237(r2)
  801108:	10803fcc 	andi	r2,r2,255
  80110c:	1080201c 	xori	r2,r2,128
  801110:	10bfe004 	addi	r2,r2,-128
  801114:	10000226 	beq	r2,zero,801120 <logic+0xd20>
  801118:	00800044 	movi	r2,1
  80111c:	00000106 	br	801124 <logic+0xd24>
  801120:	0005883a 	mov	r2,zero
  801124:	1007883a 	mov	r3,r2
  801128:	e0bffc17 	ldw	r2,-16(fp)
  80112c:	10c02605 	stb	r3,152(r2)
  if (d->_g51) {
  801130:	e0bffc17 	ldw	r2,-16(fp)
  801134:	10802603 	ldbu	r2,152(r2)
  801138:	10803fcc 	andi	r2,r2,255
  80113c:	1080201c 	xori	r2,r2,128
  801140:	10bfe004 	addi	r2,r2,-128
  801144:	10000626 	beq	r2,zero,801160 <logic+0xd60>
    d->A_event |= 1;
  801148:	e0bffc17 	ldw	r2,-16(fp)
  80114c:	10801883 	ldbu	r2,98(r2)
  801150:	10800054 	ori	r2,r2,1
  801154:	1007883a 	mov	r3,r2
  801158:	e0bffc17 	ldw	r2,-16(fp)
  80115c:	10c01885 	stb	r3,98(r2)
  }
  d->_g4 = d->_pg9;
  801160:	e0bffc17 	ldw	r2,-16(fp)
  801164:	10c04d03 	ldbu	r3,308(r2)
  801168:	e0bffc17 	ldw	r2,-16(fp)
  80116c:	10c01d05 	stb	r3,116(r2)
  d->_cg4 = d->A_event;
  801170:	e0bffc17 	ldw	r2,-16(fp)
  801174:	10c01883 	ldbu	r3,98(r2)
  801178:	e0bffc17 	ldw	r2,-16(fp)
  80117c:	10c03985 	stb	r3,230(r2)
  d->_g5 = d->_g4 && d->_cg4;
  801180:	e0bffc17 	ldw	r2,-16(fp)
  801184:	10801d03 	ldbu	r2,116(r2)
  801188:	10803fcc 	andi	r2,r2,255
  80118c:	1080201c 	xori	r2,r2,128
  801190:	10bfe004 	addi	r2,r2,-128
  801194:	10000826 	beq	r2,zero,8011b8 <logic+0xdb8>
  801198:	e0bffc17 	ldw	r2,-16(fp)
  80119c:	10803983 	ldbu	r2,230(r2)
  8011a0:	10803fcc 	andi	r2,r2,255
  8011a4:	1080201c 	xori	r2,r2,128
  8011a8:	10bfe004 	addi	r2,r2,-128
  8011ac:	10000226 	beq	r2,zero,8011b8 <logic+0xdb8>
  8011b0:	00800044 	movi	r2,1
  8011b4:	00000106 	br	8011bc <logic+0xdbc>
  8011b8:	0005883a 	mov	r2,zero
  8011bc:	1007883a 	mov	r3,r2
  8011c0:	e0bffc17 	ldw	r2,-16(fp)
  8011c4:	10c01d45 	stb	r3,117(r2)
  if (d->_g5) {
  8011c8:	e0bffc17 	ldw	r2,-16(fp)
  8011cc:	10801d43 	ldbu	r2,117(r2)
  8011d0:	10803fcc 	andi	r2,r2,255
  8011d4:	1080201c 	xori	r2,r2,128
  8011d8:	10bfe004 	addi	r2,r2,-128
  8011dc:	10000726 	beq	r2,zero,8011fc <logic+0xdfc>
    d->_region0_AVI_timer_t = 0;
  8011e0:	e0bffc17 	ldw	r2,-16(fp)
  8011e4:	10000715 	stw	zero,28(r2)
  8011e8:	10000815 	stw	zero,32(r2)
    d->_Pacemaker_local__Atrig = 0;
  8011ec:	e0bffc17 	ldw	r2,-16(fp)
  8011f0:	10001a05 	stb	zero,104(r2)
    d->_Pacemaker_local__Atrig1 = 0;
  8011f4:	e0bffc17 	ldw	r2,-16(fp)
  8011f8:	10001a45 	stb	zero,105(r2)
  }
  d->_g11 = d->_pg10;
  8011fc:	e0bffc17 	ldw	r2,-16(fp)
  801200:	10c04d43 	ldbu	r3,309(r2)
  801204:	e0bffc17 	ldw	r2,-16(fp)
  801208:	10c01e85 	stb	r3,122(r2)
  d->_g14 = d->_pg13;
  80120c:	e0bffc17 	ldw	r2,-16(fp)
  801210:	10c04d83 	ldbu	r3,310(r2)
  801214:	e0bffc17 	ldw	r2,-16(fp)
  801218:	10c01f45 	stb	r3,125(r2)
  d->_g11 = d->_g5 || d->_g11 || d->_g14;
  80121c:	e0bffc17 	ldw	r2,-16(fp)
  801220:	10801d43 	ldbu	r2,117(r2)
  801224:	10803fcc 	andi	r2,r2,255
  801228:	1080201c 	xori	r2,r2,128
  80122c:	10bfe004 	addi	r2,r2,-128
  801230:	10000c1e 	bne	r2,zero,801264 <logic+0xe64>
  801234:	e0bffc17 	ldw	r2,-16(fp)
  801238:	10801e83 	ldbu	r2,122(r2)
  80123c:	10803fcc 	andi	r2,r2,255
  801240:	1080201c 	xori	r2,r2,128
  801244:	10bfe004 	addi	r2,r2,-128
  801248:	1000061e 	bne	r2,zero,801264 <logic+0xe64>
  80124c:	e0bffc17 	ldw	r2,-16(fp)
  801250:	10801f43 	ldbu	r2,125(r2)
  801254:	10803fcc 	andi	r2,r2,255
  801258:	1080201c 	xori	r2,r2,128
  80125c:	10bfe004 	addi	r2,r2,-128
  801260:	10000226 	beq	r2,zero,80126c <logic+0xe6c>
  801264:	00800044 	movi	r2,1
  801268:	00000106 	br	801270 <logic+0xe70>
  80126c:	0005883a 	mov	r2,zero
  801270:	1007883a 	mov	r3,r2
  801274:	e0bffc17 	ldw	r2,-16(fp)
  801278:	10c01e85 	stb	r3,122(r2)
  d->_cg7 = d->_region0_AVI_timer_t < d->AVI_Constraint;
  80127c:	e0bffc17 	ldw	r2,-16(fp)
  801280:	14000717 	ldw	r16,28(r2)
  801284:	14400817 	ldw	r17,32(r2)
  801288:	e0bffc17 	ldw	r2,-16(fp)
  80128c:	10800117 	ldw	r2,4(r2)
  801290:	1009883a 	mov	r4,r2
  801294:	08064e40 	call	8064e4 <__floatsidf>
  801298:	1009883a 	mov	r4,r2
  80129c:	180b883a 	mov	r5,r3
  8012a0:	04800044 	movi	r18,1
  8012a4:	200d883a 	mov	r6,r4
  8012a8:	280f883a 	mov	r7,r5
  8012ac:	8009883a 	mov	r4,r16
  8012b0:	880b883a 	mov	r5,r17
  8012b4:	0805af40 	call	805af4 <__ledf2>
  8012b8:	10000116 	blt	r2,zero,8012c0 <logic+0xec0>
  8012bc:	0025883a 	mov	r18,zero
  8012c0:	9007883a 	mov	r3,r18
  8012c4:	e0bffc17 	ldw	r2,-16(fp)
  8012c8:	10c039c5 	stb	r3,231(r2)
  d->_g14 = d->_g11 && !d->_cg7;
  8012cc:	e0bffc17 	ldw	r2,-16(fp)
  8012d0:	10801e83 	ldbu	r2,122(r2)
  8012d4:	10803fcc 	andi	r2,r2,255
  8012d8:	1080201c 	xori	r2,r2,128
  8012dc:	10bfe004 	addi	r2,r2,-128
  8012e0:	10000826 	beq	r2,zero,801304 <logic+0xf04>
  8012e4:	e0bffc17 	ldw	r2,-16(fp)
  8012e8:	108039c3 	ldbu	r2,231(r2)
  8012ec:	10803fcc 	andi	r2,r2,255
  8012f0:	1080201c 	xori	r2,r2,128
  8012f4:	10bfe004 	addi	r2,r2,-128
  8012f8:	1000021e 	bne	r2,zero,801304 <logic+0xf04>
  8012fc:	00800044 	movi	r2,1
  801300:	00000106 	br	801308 <logic+0xf08>
  801304:	0005883a 	mov	r2,zero
  801308:	1007883a 	mov	r3,r2
  80130c:	e0bffc17 	ldw	r2,-16(fp)
  801310:	10c01f45 	stb	r3,125(r2)
  d->_cg12 = d->_Pacemaker_local__Atrig || d->_Pacemaker_local__Atrig1;
  801314:	e0bffc17 	ldw	r2,-16(fp)
  801318:	10801a03 	ldbu	r2,104(r2)
  80131c:	10803fcc 	andi	r2,r2,255
  801320:	1080201c 	xori	r2,r2,128
  801324:	10bfe004 	addi	r2,r2,-128
  801328:	1000061e 	bne	r2,zero,801344 <logic+0xf44>
  80132c:	e0bffc17 	ldw	r2,-16(fp)
  801330:	10801a43 	ldbu	r2,105(r2)
  801334:	10803fcc 	andi	r2,r2,255
  801338:	1080201c 	xori	r2,r2,128
  80133c:	10bfe004 	addi	r2,r2,-128
  801340:	10000226 	beq	r2,zero,80134c <logic+0xf4c>
  801344:	00800044 	movi	r2,1
  801348:	00000106 	br	801350 <logic+0xf50>
  80134c:	0005883a 	mov	r2,zero
  801350:	1007883a 	mov	r3,r2
  801354:	e0bffc17 	ldw	r2,-16(fp)
  801358:	10c03a45 	stb	r3,233(r2)
  d->_g13 = d->_g14 && !d->_cg12;
  80135c:	e0bffc17 	ldw	r2,-16(fp)
  801360:	10801f43 	ldbu	r2,125(r2)
  801364:	10803fcc 	andi	r2,r2,255
  801368:	1080201c 	xori	r2,r2,128
  80136c:	10bfe004 	addi	r2,r2,-128
  801370:	10000826 	beq	r2,zero,801394 <logic+0xf94>
  801374:	e0bffc17 	ldw	r2,-16(fp)
  801378:	10803a43 	ldbu	r2,233(r2)
  80137c:	10803fcc 	andi	r2,r2,255
  801380:	1080201c 	xori	r2,r2,128
  801384:	10bfe004 	addi	r2,r2,-128
  801388:	1000021e 	bne	r2,zero,801394 <logic+0xf94>
  80138c:	00800044 	movi	r2,1
  801390:	00000106 	br	801398 <logic+0xf98>
  801394:	0005883a 	mov	r2,zero
  801398:	1007883a 	mov	r3,r2
  80139c:	e0bffc17 	ldw	r2,-16(fp)
  8013a0:	10c01f05 	stb	r3,124(r2)
  d->_g7 = d->_g11 && d->_cg7;
  8013a4:	e0bffc17 	ldw	r2,-16(fp)
  8013a8:	10801e83 	ldbu	r2,122(r2)
  8013ac:	10803fcc 	andi	r2,r2,255
  8013b0:	1080201c 	xori	r2,r2,128
  8013b4:	10bfe004 	addi	r2,r2,-128
  8013b8:	10000826 	beq	r2,zero,8013dc <logic+0xfdc>
  8013bc:	e0bffc17 	ldw	r2,-16(fp)
  8013c0:	108039c3 	ldbu	r2,231(r2)
  8013c4:	10803fcc 	andi	r2,r2,255
  8013c8:	1080201c 	xori	r2,r2,128
  8013cc:	10bfe004 	addi	r2,r2,-128
  8013d0:	10000226 	beq	r2,zero,8013dc <logic+0xfdc>
  8013d4:	00800044 	movi	r2,1
  8013d8:	00000106 	br	8013e0 <logic+0xfe0>
  8013dc:	0005883a 	mov	r2,zero
  8013e0:	1007883a 	mov	r3,r2
  8013e4:	e0bffc17 	ldw	r2,-16(fp)
  8013e8:	10c01d85 	stb	r3,118(r2)
  if (d->_g7) {
  8013ec:	e0bffc17 	ldw	r2,-16(fp)
  8013f0:	10801d83 	ldbu	r2,118(r2)
  8013f4:	10803fcc 	andi	r2,r2,255
  8013f8:	1080201c 	xori	r2,r2,128
  8013fc:	10bfe004 	addi	r2,r2,-128
  801400:	10003426 	beq	r2,zero,8014d4 <logic+0x10d4>
    d->sleepT = (d->sleepT < (d->AVI_Constraint - d->_region0_AVI_timer_t)) ? d->sleepT : (d->AVI_Constraint - d->_region0_AVI_timer_t);
  801404:	e0bffc17 	ldw	r2,-16(fp)
  801408:	14001517 	ldw	r16,84(r2)
  80140c:	14401617 	ldw	r17,88(r2)
  801410:	e0bffc17 	ldw	r2,-16(fp)
  801414:	10800117 	ldw	r2,4(r2)
  801418:	1009883a 	mov	r4,r2
  80141c:	08064e40 	call	8064e4 <__floatsidf>
  801420:	1011883a 	mov	r8,r2
  801424:	1813883a 	mov	r9,r3
  801428:	e13ffc17 	ldw	r4,-16(fp)
  80142c:	20800717 	ldw	r2,28(r4)
  801430:	20c00817 	ldw	r3,32(r4)
  801434:	100d883a 	mov	r6,r2
  801438:	180f883a 	mov	r7,r3
  80143c:	4009883a 	mov	r4,r8
  801440:	480b883a 	mov	r5,r9
  801444:	0805be80 	call	805be8 <__subdf3>
  801448:	1009883a 	mov	r4,r2
  80144c:	180b883a 	mov	r5,r3
  801450:	2005883a 	mov	r2,r4
  801454:	2807883a 	mov	r3,r5
  801458:	100d883a 	mov	r6,r2
  80145c:	180f883a 	mov	r7,r3
  801460:	8009883a 	mov	r4,r16
  801464:	880b883a 	mov	r5,r17
  801468:	0805af40 	call	805af4 <__ledf2>
  80146c:	1000040e 	bge	r2,zero,801480 <logic+0x1080>
  801470:	e13ffc17 	ldw	r4,-16(fp)
  801474:	20801517 	ldw	r2,84(r4)
  801478:	20c01617 	ldw	r3,88(r4)
  80147c:	00001206 	br	8014c8 <logic+0x10c8>
  801480:	e0bffc17 	ldw	r2,-16(fp)
  801484:	10800117 	ldw	r2,4(r2)
  801488:	1009883a 	mov	r4,r2
  80148c:	08064e40 	call	8064e4 <__floatsidf>
  801490:	1011883a 	mov	r8,r2
  801494:	1813883a 	mov	r9,r3
  801498:	e13ffc17 	ldw	r4,-16(fp)
  80149c:	20800717 	ldw	r2,28(r4)
  8014a0:	20c00817 	ldw	r3,32(r4)
  8014a4:	100d883a 	mov	r6,r2
  8014a8:	180f883a 	mov	r7,r3
  8014ac:	4009883a 	mov	r4,r8
  8014b0:	480b883a 	mov	r5,r9
  8014b4:	0805be80 	call	805be8 <__subdf3>
  8014b8:	1009883a 	mov	r4,r2
  8014bc:	180b883a 	mov	r5,r3
  8014c0:	2005883a 	mov	r2,r4
  8014c4:	2807883a 	mov	r3,r5
  8014c8:	e13ffc17 	ldw	r4,-16(fp)
  8014cc:	20801515 	stw	r2,84(r4)
  8014d0:	20c01615 	stw	r3,88(r4)
  }
  d->_cg8 = d->_Pacemaker_local__Atrig || d->_Pacemaker_local__Atrig1;
  8014d4:	e0bffc17 	ldw	r2,-16(fp)
  8014d8:	10801a03 	ldbu	r2,104(r2)
  8014dc:	10803fcc 	andi	r2,r2,255
  8014e0:	1080201c 	xori	r2,r2,128
  8014e4:	10bfe004 	addi	r2,r2,-128
  8014e8:	1000061e 	bne	r2,zero,801504 <logic+0x1104>
  8014ec:	e0bffc17 	ldw	r2,-16(fp)
  8014f0:	10801a43 	ldbu	r2,105(r2)
  8014f4:	10803fcc 	andi	r2,r2,255
  8014f8:	1080201c 	xori	r2,r2,128
  8014fc:	10bfe004 	addi	r2,r2,-128
  801500:	10000226 	beq	r2,zero,80150c <logic+0x110c>
  801504:	00800044 	movi	r2,1
  801508:	00000106 	br	801510 <logic+0x1110>
  80150c:	0005883a 	mov	r2,zero
  801510:	1007883a 	mov	r3,r2
  801514:	e0bffc17 	ldw	r2,-16(fp)
  801518:	10c03a05 	stb	r3,232(r2)
  d->_g10 = d->_g7 && !d->_cg8;
  80151c:	e0bffc17 	ldw	r2,-16(fp)
  801520:	10801d83 	ldbu	r2,118(r2)
  801524:	10803fcc 	andi	r2,r2,255
  801528:	1080201c 	xori	r2,r2,128
  80152c:	10bfe004 	addi	r2,r2,-128
  801530:	10000826 	beq	r2,zero,801554 <logic+0x1154>
  801534:	e0bffc17 	ldw	r2,-16(fp)
  801538:	10803a03 	ldbu	r2,232(r2)
  80153c:	10803fcc 	andi	r2,r2,255
  801540:	1080201c 	xori	r2,r2,128
  801544:	10bfe004 	addi	r2,r2,-128
  801548:	1000021e 	bne	r2,zero,801554 <logic+0x1154>
  80154c:	00800044 	movi	r2,1
  801550:	00000106 	br	801558 <logic+0x1158>
  801554:	0005883a 	mov	r2,zero
  801558:	1007883a 	mov	r3,r2
  80155c:	e0bffc17 	ldw	r2,-16(fp)
  801560:	10c01e45 	stb	r3,121(r2)
  d->_g9_e1 = !(d->_g13 || d->_g10);
  801564:	e0bffc17 	ldw	r2,-16(fp)
  801568:	10801f03 	ldbu	r2,124(r2)
  80156c:	10803fcc 	andi	r2,r2,255
  801570:	1080201c 	xori	r2,r2,128
  801574:	10bfe004 	addi	r2,r2,-128
  801578:	1000081e 	bne	r2,zero,80159c <logic+0x119c>
  80157c:	e0bffc17 	ldw	r2,-16(fp)
  801580:	10801e43 	ldbu	r2,121(r2)
  801584:	10803fcc 	andi	r2,r2,255
  801588:	1080201c 	xori	r2,r2,128
  80158c:	10bfe004 	addi	r2,r2,-128
  801590:	1000021e 	bne	r2,zero,80159c <logic+0x119c>
  801594:	00800044 	movi	r2,1
  801598:	00000106 	br	8015a0 <logic+0x11a0>
  80159c:	0005883a 	mov	r2,zero
  8015a0:	1007883a 	mov	r3,r2
  8015a4:	e0bffc17 	ldw	r2,-16(fp)
  8015a8:	10c04705 	stb	r3,284(r2)
  d->_g12 = d->_g7 && d->_cg8 || d->_g14 && d->_cg12;
  8015ac:	e0bffc17 	ldw	r2,-16(fp)
  8015b0:	10801d83 	ldbu	r2,118(r2)
  8015b4:	10803fcc 	andi	r2,r2,255
  8015b8:	1080201c 	xori	r2,r2,128
  8015bc:	10bfe004 	addi	r2,r2,-128
  8015c0:	10000626 	beq	r2,zero,8015dc <logic+0x11dc>
  8015c4:	e0bffc17 	ldw	r2,-16(fp)
  8015c8:	10803a03 	ldbu	r2,232(r2)
  8015cc:	10803fcc 	andi	r2,r2,255
  8015d0:	1080201c 	xori	r2,r2,128
  8015d4:	10bfe004 	addi	r2,r2,-128
  8015d8:	10000c1e 	bne	r2,zero,80160c <logic+0x120c>
  8015dc:	e0bffc17 	ldw	r2,-16(fp)
  8015e0:	10801f43 	ldbu	r2,125(r2)
  8015e4:	10803fcc 	andi	r2,r2,255
  8015e8:	1080201c 	xori	r2,r2,128
  8015ec:	10bfe004 	addi	r2,r2,-128
  8015f0:	10000826 	beq	r2,zero,801614 <logic+0x1214>
  8015f4:	e0bffc17 	ldw	r2,-16(fp)
  8015f8:	10803a43 	ldbu	r2,233(r2)
  8015fc:	10803fcc 	andi	r2,r2,255
  801600:	1080201c 	xori	r2,r2,128
  801604:	10bfe004 	addi	r2,r2,-128
  801608:	10000226 	beq	r2,zero,801614 <logic+0x1214>
  80160c:	00800044 	movi	r2,1
  801610:	00000106 	br	801618 <logic+0x1218>
  801614:	0005883a 	mov	r2,zero
  801618:	1007883a 	mov	r3,r2
  80161c:	e0bffc17 	ldw	r2,-16(fp)
  801620:	10c01ec5 	stb	r3,123(r2)
  d->_g8 = d->_g5 || d->_g149 && !d->_cg20;
  801624:	e0bffc17 	ldw	r2,-16(fp)
  801628:	10801d43 	ldbu	r2,117(r2)
  80162c:	10803fcc 	andi	r2,r2,255
  801630:	1080201c 	xori	r2,r2,128
  801634:	10bfe004 	addi	r2,r2,-128
  801638:	10000c1e 	bne	r2,zero,80166c <logic+0x126c>
  80163c:	e0bffc17 	ldw	r2,-16(fp)
  801640:	108036c3 	ldbu	r2,219(r2)
  801644:	10803fcc 	andi	r2,r2,255
  801648:	1080201c 	xori	r2,r2,128
  80164c:	10bfe004 	addi	r2,r2,-128
  801650:	10000826 	beq	r2,zero,801674 <logic+0x1274>
  801654:	e0bffc17 	ldw	r2,-16(fp)
  801658:	10803a83 	ldbu	r2,234(r2)
  80165c:	10803fcc 	andi	r2,r2,255
  801660:	1080201c 	xori	r2,r2,128
  801664:	10bfe004 	addi	r2,r2,-128
  801668:	1000021e 	bne	r2,zero,801674 <logic+0x1274>
  80166c:	00800044 	movi	r2,1
  801670:	00000106 	br	801678 <logic+0x1278>
  801674:	0005883a 	mov	r2,zero
  801678:	1007883a 	mov	r3,r2
  80167c:	e0bffc17 	ldw	r2,-16(fp)
  801680:	10c01dc5 	stb	r3,119(r2)
  d->_g5 = !d->_g8;
  801684:	e0bffc17 	ldw	r2,-16(fp)
  801688:	10801dc3 	ldbu	r2,119(r2)
  80168c:	10803fcc 	andi	r2,r2,255
  801690:	1080201c 	xori	r2,r2,128
  801694:	10bfe004 	addi	r2,r2,-128
  801698:	1005003a 	cmpeq	r2,r2,zero
  80169c:	1007883a 	mov	r3,r2
  8016a0:	e0bffc17 	ldw	r2,-16(fp)
  8016a4:	10c01d45 	stb	r3,117(r2)
  d->_g20 = d->_g18 || d->_g140;
  8016a8:	e0bffc17 	ldw	r2,-16(fp)
  8016ac:	10801fc3 	ldbu	r2,127(r2)
  8016b0:	10803fcc 	andi	r2,r2,255
  8016b4:	1080201c 	xori	r2,r2,128
  8016b8:	10bfe004 	addi	r2,r2,-128
  8016bc:	1000061e 	bne	r2,zero,8016d8 <logic+0x12d8>
  8016c0:	e0bffc17 	ldw	r2,-16(fp)
  8016c4:	10803543 	ldbu	r2,213(r2)
  8016c8:	10803fcc 	andi	r2,r2,255
  8016cc:	1080201c 	xori	r2,r2,128
  8016d0:	10bfe004 	addi	r2,r2,-128
  8016d4:	10000226 	beq	r2,zero,8016e0 <logic+0x12e0>
  8016d8:	00800044 	movi	r2,1
  8016dc:	00000106 	br	8016e4 <logic+0x12e4>
  8016e0:	0005883a 	mov	r2,zero
  8016e4:	1007883a 	mov	r3,r2
  8016e8:	e0bffc17 	ldw	r2,-16(fp)
  8016ec:	10c02045 	stb	r3,129(r2)
  d->_g21 = (d->_g9_e1 || d->_g12) && (d->_g5 || d->_g20) && (d->_g12 || d->_g20);
  8016f0:	e0bffc17 	ldw	r2,-16(fp)
  8016f4:	10804703 	ldbu	r2,284(r2)
  8016f8:	10803fcc 	andi	r2,r2,255
  8016fc:	1080201c 	xori	r2,r2,128
  801700:	10bfe004 	addi	r2,r2,-128
  801704:	1000061e 	bne	r2,zero,801720 <logic+0x1320>
  801708:	e0bffc17 	ldw	r2,-16(fp)
  80170c:	10801ec3 	ldbu	r2,123(r2)
  801710:	10803fcc 	andi	r2,r2,255
  801714:	1080201c 	xori	r2,r2,128
  801718:	10bfe004 	addi	r2,r2,-128
  80171c:	10001a26 	beq	r2,zero,801788 <logic+0x1388>
  801720:	e0bffc17 	ldw	r2,-16(fp)
  801724:	10801d43 	ldbu	r2,117(r2)
  801728:	10803fcc 	andi	r2,r2,255
  80172c:	1080201c 	xori	r2,r2,128
  801730:	10bfe004 	addi	r2,r2,-128
  801734:	1000061e 	bne	r2,zero,801750 <logic+0x1350>
  801738:	e0bffc17 	ldw	r2,-16(fp)
  80173c:	10802043 	ldbu	r2,129(r2)
  801740:	10803fcc 	andi	r2,r2,255
  801744:	1080201c 	xori	r2,r2,128
  801748:	10bfe004 	addi	r2,r2,-128
  80174c:	10000e26 	beq	r2,zero,801788 <logic+0x1388>
  801750:	e0bffc17 	ldw	r2,-16(fp)
  801754:	10801ec3 	ldbu	r2,123(r2)
  801758:	10803fcc 	andi	r2,r2,255
  80175c:	1080201c 	xori	r2,r2,128
  801760:	10bfe004 	addi	r2,r2,-128
  801764:	1000061e 	bne	r2,zero,801780 <logic+0x1380>
  801768:	e0bffc17 	ldw	r2,-16(fp)
  80176c:	10802043 	ldbu	r2,129(r2)
  801770:	10803fcc 	andi	r2,r2,255
  801774:	1080201c 	xori	r2,r2,128
  801778:	10bfe004 	addi	r2,r2,-128
  80177c:	10000226 	beq	r2,zero,801788 <logic+0x1388>
  801780:	00800044 	movi	r2,1
  801784:	00000106 	br	80178c <logic+0x138c>
  801788:	0005883a 	mov	r2,zero
  80178c:	1007883a 	mov	r3,r2
  801790:	e0bffc17 	ldw	r2,-16(fp)
  801794:	10c02085 	stb	r3,130(r2)
  d->_cg22 = d->_Pacemaker_local__Atrig;
  801798:	e0bffc17 	ldw	r2,-16(fp)
  80179c:	10c01a03 	ldbu	r3,104(r2)
  8017a0:	e0bffc17 	ldw	r2,-16(fp)
  8017a4:	10c03945 	stb	r3,229(r2)
  d->_g18 = d->_g21 && !d->_cg22;
  8017a8:	e0bffc17 	ldw	r2,-16(fp)
  8017ac:	10802083 	ldbu	r2,130(r2)
  8017b0:	10803fcc 	andi	r2,r2,255
  8017b4:	1080201c 	xori	r2,r2,128
  8017b8:	10bfe004 	addi	r2,r2,-128
  8017bc:	10000826 	beq	r2,zero,8017e0 <logic+0x13e0>
  8017c0:	e0bffc17 	ldw	r2,-16(fp)
  8017c4:	10803943 	ldbu	r2,229(r2)
  8017c8:	10803fcc 	andi	r2,r2,255
  8017cc:	1080201c 	xori	r2,r2,128
  8017d0:	10bfe004 	addi	r2,r2,-128
  8017d4:	1000021e 	bne	r2,zero,8017e0 <logic+0x13e0>
  8017d8:	00800044 	movi	r2,1
  8017dc:	00000106 	br	8017e4 <logic+0x13e4>
  8017e0:	0005883a 	mov	r2,zero
  8017e4:	1007883a 	mov	r3,r2
  8017e8:	e0bffc17 	ldw	r2,-16(fp)
  8017ec:	10c01fc5 	stb	r3,127(r2)
  if (d->_g18) {
  8017f0:	e0bffc17 	ldw	r2,-16(fp)
  8017f4:	10801fc3 	ldbu	r2,127(r2)
  8017f8:	10803fcc 	andi	r2,r2,255
  8017fc:	1080201c 	xori	r2,r2,128
  801800:	10bfe004 	addi	r2,r2,-128
  801804:	10000626 	beq	r2,zero,801820 <logic+0x1420>
    d->VP |= 1;
  801808:	e0bffc17 	ldw	r2,-16(fp)
  80180c:	108017c3 	ldbu	r2,95(r2)
  801810:	10800054 	ori	r2,r2,1
  801814:	1007883a 	mov	r3,r2
  801818:	e0bffc17 	ldw	r2,-16(fp)
  80181c:	10c017c5 	stb	r3,95(r2)
  }
  d->_g9 = d->_GO || d->_g21 && d->_cg22 || d->_g18 || d->_g4 && !d->_cg4;
  801820:	e0bffc17 	ldw	r2,-16(fp)
  801824:	10803903 	ldbu	r2,228(r2)
  801828:	10803fcc 	andi	r2,r2,255
  80182c:	1080201c 	xori	r2,r2,128
  801830:	10bfe004 	addi	r2,r2,-128
  801834:	10001e1e 	bne	r2,zero,8018b0 <logic+0x14b0>
  801838:	e0bffc17 	ldw	r2,-16(fp)
  80183c:	10802083 	ldbu	r2,130(r2)
  801840:	10803fcc 	andi	r2,r2,255
  801844:	1080201c 	xori	r2,r2,128
  801848:	10bfe004 	addi	r2,r2,-128
  80184c:	10000626 	beq	r2,zero,801868 <logic+0x1468>
  801850:	e0bffc17 	ldw	r2,-16(fp)
  801854:	10803943 	ldbu	r2,229(r2)
  801858:	10803fcc 	andi	r2,r2,255
  80185c:	1080201c 	xori	r2,r2,128
  801860:	10bfe004 	addi	r2,r2,-128
  801864:	1000121e 	bne	r2,zero,8018b0 <logic+0x14b0>
  801868:	e0bffc17 	ldw	r2,-16(fp)
  80186c:	10801fc3 	ldbu	r2,127(r2)
  801870:	10803fcc 	andi	r2,r2,255
  801874:	1080201c 	xori	r2,r2,128
  801878:	10bfe004 	addi	r2,r2,-128
  80187c:	10000c1e 	bne	r2,zero,8018b0 <logic+0x14b0>
  801880:	e0bffc17 	ldw	r2,-16(fp)
  801884:	10801d03 	ldbu	r2,116(r2)
  801888:	10803fcc 	andi	r2,r2,255
  80188c:	1080201c 	xori	r2,r2,128
  801890:	10bfe004 	addi	r2,r2,-128
  801894:	10000826 	beq	r2,zero,8018b8 <logic+0x14b8>
  801898:	e0bffc17 	ldw	r2,-16(fp)
  80189c:	10803983 	ldbu	r2,230(r2)
  8018a0:	10803fcc 	andi	r2,r2,255
  8018a4:	1080201c 	xori	r2,r2,128
  8018a8:	10bfe004 	addi	r2,r2,-128
  8018ac:	1000021e 	bne	r2,zero,8018b8 <logic+0x14b8>
  8018b0:	00800044 	movi	r2,1
  8018b4:	00000106 	br	8018bc <logic+0x14bc>
  8018b8:	0005883a 	mov	r2,zero
  8018bc:	1007883a 	mov	r3,r2
  8018c0:	e0bffc17 	ldw	r2,-16(fp)
  8018c4:	10c01e05 	stb	r3,120(r2)
  d->_g9_e1 = d->_pg48;
  8018c8:	e0bffc17 	ldw	r2,-16(fp)
  8018cc:	10c04dc3 	ldbu	r3,311(r2)
  8018d0:	e0bffc17 	ldw	r2,-16(fp)
  8018d4:	10c04705 	stb	r3,284(r2)
  d->_g19 = d->_pg50;
  8018d8:	e0bffc17 	ldw	r2,-16(fp)
  8018dc:	10c04e03 	ldbu	r3,312(r2)
  8018e0:	e0bffc17 	ldw	r2,-16(fp)
  8018e4:	10c02005 	stb	r3,128(r2)
  d->_g19_e2 = !(d->_g9_e1 || d->_g19);
  8018e8:	e0bffc17 	ldw	r2,-16(fp)
  8018ec:	10804703 	ldbu	r2,284(r2)
  8018f0:	10803fcc 	andi	r2,r2,255
  8018f4:	1080201c 	xori	r2,r2,128
  8018f8:	10bfe004 	addi	r2,r2,-128
  8018fc:	1000081e 	bne	r2,zero,801920 <logic+0x1520>
  801900:	e0bffc17 	ldw	r2,-16(fp)
  801904:	10802003 	ldbu	r2,128(r2)
  801908:	10803fcc 	andi	r2,r2,255
  80190c:	1080201c 	xori	r2,r2,128
  801910:	10bfe004 	addi	r2,r2,-128
  801914:	1000021e 	bne	r2,zero,801920 <logic+0x1520>
  801918:	00800044 	movi	r2,1
  80191c:	00000106 	br	801924 <logic+0x1524>
  801920:	0005883a 	mov	r2,zero
  801924:	1007883a 	mov	r3,r2
  801928:	e0bffc17 	ldw	r2,-16(fp)
  80192c:	10c04745 	stb	r3,285(r2)
  d->_g22 = d->_pg49;
  801930:	e0bffc17 	ldw	r2,-16(fp)
  801934:	10c04e43 	ldbu	r3,313(r2)
  801938:	e0bffc17 	ldw	r2,-16(fp)
  80193c:	10c020c5 	stb	r3,131(r2)
  d->_g23 = d->_g22 && d->AS;
  801940:	e0bffc17 	ldw	r2,-16(fp)
  801944:	108020c3 	ldbu	r2,131(r2)
  801948:	10803fcc 	andi	r2,r2,255
  80194c:	1080201c 	xori	r2,r2,128
  801950:	10bfe004 	addi	r2,r2,-128
  801954:	10000826 	beq	r2,zero,801978 <logic+0x1578>
  801958:	e0bffc17 	ldw	r2,-16(fp)
  80195c:	10801703 	ldbu	r2,92(r2)
  801960:	10803fcc 	andi	r2,r2,255
  801964:	1080201c 	xori	r2,r2,128
  801968:	10bfe004 	addi	r2,r2,-128
  80196c:	10000226 	beq	r2,zero,801978 <logic+0x1578>
  801970:	00800044 	movi	r2,1
  801974:	00000106 	br	80197c <logic+0x157c>
  801978:	0005883a 	mov	r2,zero
  80197c:	1007883a 	mov	r3,r2
  801980:	e0bffc17 	ldw	r2,-16(fp)
  801984:	10c02105 	stb	r3,132(r2)
  if (d->_g23) {
  801988:	e0bffc17 	ldw	r2,-16(fp)
  80198c:	10802103 	ldbu	r2,132(r2)
  801990:	10803fcc 	andi	r2,r2,255
  801994:	1080201c 	xori	r2,r2,128
  801998:	10bfe004 	addi	r2,r2,-128
  80199c:	10000326 	beq	r2,zero,8019ac <logic+0x15ac>
    d->_Pacemaker_local__Atrig2 = 1;
  8019a0:	e0bffc17 	ldw	r2,-16(fp)
  8019a4:	00c00044 	movi	r3,1
  8019a8:	10c01a85 	stb	r3,106(r2)
  }
  d->_g4 = d->_pg135;
  8019ac:	e0bffc17 	ldw	r2,-16(fp)
  8019b0:	10c04e83 	ldbu	r3,314(r2)
  8019b4:	e0bffc17 	ldw	r2,-16(fp)
  8019b8:	10c01d05 	stb	r3,116(r2)
  if (d->_g4) {
  8019bc:	e0bffc17 	ldw	r2,-16(fp)
  8019c0:	10801d03 	ldbu	r2,116(r2)
  8019c4:	10803fcc 	andi	r2,r2,255
  8019c8:	1080201c 	xori	r2,r2,128
  8019cc:	10bfe004 	addi	r2,r2,-128
  8019d0:	10001226 	beq	r2,zero,801a1c <logic+0x161c>
    d->_region1_PVARP_timer_t += d->deltaT;
  8019d4:	e13ffc17 	ldw	r4,-16(fp)
  8019d8:	20800917 	ldw	r2,36(r4)
  8019dc:	20c00a17 	ldw	r3,40(r4)
  8019e0:	e1bffc17 	ldw	r6,-16(fp)
  8019e4:	31001317 	ldw	r4,76(r6)
  8019e8:	31401417 	ldw	r5,80(r6)
  8019ec:	200d883a 	mov	r6,r4
  8019f0:	280f883a 	mov	r7,r5
  8019f4:	1009883a 	mov	r4,r2
  8019f8:	180b883a 	mov	r5,r3
  8019fc:	080516c0 	call	80516c <__adddf3>
  801a00:	1009883a 	mov	r4,r2
  801a04:	180b883a 	mov	r5,r3
  801a08:	2005883a 	mov	r2,r4
  801a0c:	2807883a 	mov	r3,r5
  801a10:	e13ffc17 	ldw	r4,-16(fp)
  801a14:	20800915 	stw	r2,36(r4)
  801a18:	20c00a15 	stw	r3,40(r4)
  }
  d->_g46 = d->_g22 && !d->AS;
  801a1c:	e0bffc17 	ldw	r2,-16(fp)
  801a20:	108020c3 	ldbu	r2,131(r2)
  801a24:	10803fcc 	andi	r2,r2,255
  801a28:	1080201c 	xori	r2,r2,128
  801a2c:	10bfe004 	addi	r2,r2,-128
  801a30:	10000826 	beq	r2,zero,801a54 <logic+0x1654>
  801a34:	e0bffc17 	ldw	r2,-16(fp)
  801a38:	10801703 	ldbu	r2,92(r2)
  801a3c:	10803fcc 	andi	r2,r2,255
  801a40:	1080201c 	xori	r2,r2,128
  801a44:	10bfe004 	addi	r2,r2,-128
  801a48:	1000021e 	bne	r2,zero,801a54 <logic+0x1654>
  801a4c:	00800044 	movi	r2,1
  801a50:	00000106 	br	801a58 <logic+0x1658>
  801a54:	0005883a 	mov	r2,zero
  801a58:	1007883a 	mov	r3,r2
  801a5c:	e0bffc17 	ldw	r2,-16(fp)
  801a60:	10c024c5 	stb	r3,147(r2)
  d->_cg46 = d->_region1_PVARP_timer_t >= d->PVARP_Constraint;
  801a64:	e0bffc17 	ldw	r2,-16(fp)
  801a68:	14000917 	ldw	r16,36(r2)
  801a6c:	14400a17 	ldw	r17,40(r2)
  801a70:	e0bffc17 	ldw	r2,-16(fp)
  801a74:	10800217 	ldw	r2,8(r2)
  801a78:	1009883a 	mov	r4,r2
  801a7c:	08064e40 	call	8064e4 <__floatsidf>
  801a80:	1009883a 	mov	r4,r2
  801a84:	180b883a 	mov	r5,r3
  801a88:	04800044 	movi	r18,1
  801a8c:	200d883a 	mov	r6,r4
  801a90:	280f883a 	mov	r7,r5
  801a94:	8009883a 	mov	r4,r16
  801a98:	880b883a 	mov	r5,r17
  801a9c:	0805a180 	call	805a18 <__gedf2>
  801aa0:	1000010e 	bge	r2,zero,801aa8 <logic+0x16a8>
  801aa4:	0025883a 	mov	r18,zero
  801aa8:	9007883a 	mov	r3,r18
  801aac:	e0bffc17 	ldw	r2,-16(fp)
  801ab0:	10c03d45 	stb	r3,245(r2)
  d->_g47 = d->_g46 && d->_cg46;
  801ab4:	e0bffc17 	ldw	r2,-16(fp)
  801ab8:	108024c3 	ldbu	r2,147(r2)
  801abc:	10803fcc 	andi	r2,r2,255
  801ac0:	1080201c 	xori	r2,r2,128
  801ac4:	10bfe004 	addi	r2,r2,-128
  801ac8:	10000826 	beq	r2,zero,801aec <logic+0x16ec>
  801acc:	e0bffc17 	ldw	r2,-16(fp)
  801ad0:	10803d43 	ldbu	r2,245(r2)
  801ad4:	10803fcc 	andi	r2,r2,255
  801ad8:	1080201c 	xori	r2,r2,128
  801adc:	10bfe004 	addi	r2,r2,-128
  801ae0:	10000226 	beq	r2,zero,801aec <logic+0x16ec>
  801ae4:	00800044 	movi	r2,1
  801ae8:	00000106 	br	801af0 <logic+0x16f0>
  801aec:	0005883a 	mov	r2,zero
  801af0:	1007883a 	mov	r3,r2
  801af4:	e0bffc17 	ldw	r2,-16(fp)
  801af8:	10c02505 	stb	r3,148(r2)
  if (d->_g47) {
  801afc:	e0bffc17 	ldw	r2,-16(fp)
  801b00:	10802503 	ldbu	r2,148(r2)
  801b04:	10803fcc 	andi	r2,r2,255
  801b08:	1080201c 	xori	r2,r2,128
  801b0c:	10bfe004 	addi	r2,r2,-128
  801b10:	10000326 	beq	r2,zero,801b20 <logic+0x1720>
    d->_Pacemaker_local__Atrig3 = 1;
  801b14:	e0bffc17 	ldw	r2,-16(fp)
  801b18:	00c00044 	movi	r3,1
  801b1c:	10c01ac5 	stb	r3,107(r2)
  }
  d->_g33 = d->_g19 || d->_g9_e1;
  801b20:	e0bffc17 	ldw	r2,-16(fp)
  801b24:	10802003 	ldbu	r2,128(r2)
  801b28:	10803fcc 	andi	r2,r2,255
  801b2c:	1080201c 	xori	r2,r2,128
  801b30:	10bfe004 	addi	r2,r2,-128
  801b34:	1000061e 	bne	r2,zero,801b50 <logic+0x1750>
  801b38:	e0bffc17 	ldw	r2,-16(fp)
  801b3c:	10804703 	ldbu	r2,284(r2)
  801b40:	10803fcc 	andi	r2,r2,255
  801b44:	1080201c 	xori	r2,r2,128
  801b48:	10bfe004 	addi	r2,r2,-128
  801b4c:	10000226 	beq	r2,zero,801b58 <logic+0x1758>
  801b50:	00800044 	movi	r2,1
  801b54:	00000106 	br	801b5c <logic+0x175c>
  801b58:	0005883a 	mov	r2,zero
  801b5c:	1007883a 	mov	r3,r2
  801b60:	e0bffc17 	ldw	r2,-16(fp)
  801b64:	10c02245 	stb	r3,137(r2)
  d->_cg34 = d->_region1_PVARP_timer_t < d->PVARP_Constraint;
  801b68:	e0bffc17 	ldw	r2,-16(fp)
  801b6c:	14000917 	ldw	r16,36(r2)
  801b70:	14400a17 	ldw	r17,40(r2)
  801b74:	e0bffc17 	ldw	r2,-16(fp)
  801b78:	10800217 	ldw	r2,8(r2)
  801b7c:	1009883a 	mov	r4,r2
  801b80:	08064e40 	call	8064e4 <__floatsidf>
  801b84:	1009883a 	mov	r4,r2
  801b88:	180b883a 	mov	r5,r3
  801b8c:	04800044 	movi	r18,1
  801b90:	200d883a 	mov	r6,r4
  801b94:	280f883a 	mov	r7,r5
  801b98:	8009883a 	mov	r4,r16
  801b9c:	880b883a 	mov	r5,r17
  801ba0:	0805af40 	call	805af4 <__ledf2>
  801ba4:	10000116 	blt	r2,zero,801bac <logic+0x17ac>
  801ba8:	0025883a 	mov	r18,zero
  801bac:	9007883a 	mov	r3,r18
  801bb0:	e0bffc17 	ldw	r2,-16(fp)
  801bb4:	10c03c85 	stb	r3,242(r2)
  d->_g39 = d->_g33 && d->_cg34;
  801bb8:	e0bffc17 	ldw	r2,-16(fp)
  801bbc:	10802243 	ldbu	r2,137(r2)
  801bc0:	10803fcc 	andi	r2,r2,255
  801bc4:	1080201c 	xori	r2,r2,128
  801bc8:	10bfe004 	addi	r2,r2,-128
  801bcc:	10000826 	beq	r2,zero,801bf0 <logic+0x17f0>
  801bd0:	e0bffc17 	ldw	r2,-16(fp)
  801bd4:	10803c83 	ldbu	r2,242(r2)
  801bd8:	10803fcc 	andi	r2,r2,255
  801bdc:	1080201c 	xori	r2,r2,128
  801be0:	10bfe004 	addi	r2,r2,-128
  801be4:	10000226 	beq	r2,zero,801bf0 <logic+0x17f0>
  801be8:	00800044 	movi	r2,1
  801bec:	00000106 	br	801bf4 <logic+0x17f4>
  801bf0:	0005883a 	mov	r2,zero
  801bf4:	1007883a 	mov	r3,r2
  801bf8:	e0bffc17 	ldw	r2,-16(fp)
  801bfc:	10c02385 	stb	r3,142(r2)
  if (d->_g39) {
  801c00:	e0bffc17 	ldw	r2,-16(fp)
  801c04:	10802383 	ldbu	r2,142(r2)
  801c08:	10803fcc 	andi	r2,r2,255
  801c0c:	1080201c 	xori	r2,r2,128
  801c10:	10bfe004 	addi	r2,r2,-128
  801c14:	10003426 	beq	r2,zero,801ce8 <logic+0x18e8>
    d->sleepT = (d->sleepT < (d->PVARP_Constraint - d->_region1_PVARP_timer_t)) ? d->sleepT : (d->PVARP_Constraint - d->_region1_PVARP_timer_t);
  801c18:	e0bffc17 	ldw	r2,-16(fp)
  801c1c:	14001517 	ldw	r16,84(r2)
  801c20:	14401617 	ldw	r17,88(r2)
  801c24:	e0bffc17 	ldw	r2,-16(fp)
  801c28:	10800217 	ldw	r2,8(r2)
  801c2c:	1009883a 	mov	r4,r2
  801c30:	08064e40 	call	8064e4 <__floatsidf>
  801c34:	1011883a 	mov	r8,r2
  801c38:	1813883a 	mov	r9,r3
  801c3c:	e13ffc17 	ldw	r4,-16(fp)
  801c40:	20800917 	ldw	r2,36(r4)
  801c44:	20c00a17 	ldw	r3,40(r4)
  801c48:	100d883a 	mov	r6,r2
  801c4c:	180f883a 	mov	r7,r3
  801c50:	4009883a 	mov	r4,r8
  801c54:	480b883a 	mov	r5,r9
  801c58:	0805be80 	call	805be8 <__subdf3>
  801c5c:	1009883a 	mov	r4,r2
  801c60:	180b883a 	mov	r5,r3
  801c64:	2005883a 	mov	r2,r4
  801c68:	2807883a 	mov	r3,r5
  801c6c:	100d883a 	mov	r6,r2
  801c70:	180f883a 	mov	r7,r3
  801c74:	8009883a 	mov	r4,r16
  801c78:	880b883a 	mov	r5,r17
  801c7c:	0805af40 	call	805af4 <__ledf2>
  801c80:	1000040e 	bge	r2,zero,801c94 <logic+0x1894>
  801c84:	e13ffc17 	ldw	r4,-16(fp)
  801c88:	20801517 	ldw	r2,84(r4)
  801c8c:	20c01617 	ldw	r3,88(r4)
  801c90:	00001206 	br	801cdc <logic+0x18dc>
  801c94:	e0bffc17 	ldw	r2,-16(fp)
  801c98:	10800217 	ldw	r2,8(r2)
  801c9c:	1009883a 	mov	r4,r2
  801ca0:	08064e40 	call	8064e4 <__floatsidf>
  801ca4:	1011883a 	mov	r8,r2
  801ca8:	1813883a 	mov	r9,r3
  801cac:	e13ffc17 	ldw	r4,-16(fp)
  801cb0:	20800917 	ldw	r2,36(r4)
  801cb4:	20c00a17 	ldw	r3,40(r4)
  801cb8:	100d883a 	mov	r6,r2
  801cbc:	180f883a 	mov	r7,r3
  801cc0:	4009883a 	mov	r4,r8
  801cc4:	480b883a 	mov	r5,r9
  801cc8:	0805be80 	call	805be8 <__subdf3>
  801ccc:	1009883a 	mov	r4,r2
  801cd0:	180b883a 	mov	r5,r3
  801cd4:	2005883a 	mov	r2,r4
  801cd8:	2807883a 	mov	r3,r5
  801cdc:	e13ffc17 	ldw	r4,-16(fp)
  801ce0:	20801515 	stw	r2,84(r4)
  801ce4:	20c01615 	stw	r3,88(r4)
  }
  d->_cg35 = d->_Pacemaker_local__Atrig2 || d->_Pacemaker_local__Atrig3;
  801ce8:	e0bffc17 	ldw	r2,-16(fp)
  801cec:	10801a83 	ldbu	r2,106(r2)
  801cf0:	10803fcc 	andi	r2,r2,255
  801cf4:	1080201c 	xori	r2,r2,128
  801cf8:	10bfe004 	addi	r2,r2,-128
  801cfc:	1000061e 	bne	r2,zero,801d18 <logic+0x1918>
  801d00:	e0bffc17 	ldw	r2,-16(fp)
  801d04:	10801ac3 	ldbu	r2,107(r2)
  801d08:	10803fcc 	andi	r2,r2,255
  801d0c:	1080201c 	xori	r2,r2,128
  801d10:	10bfe004 	addi	r2,r2,-128
  801d14:	10000226 	beq	r2,zero,801d20 <logic+0x1920>
  801d18:	00800044 	movi	r2,1
  801d1c:	00000106 	br	801d24 <logic+0x1924>
  801d20:	0005883a 	mov	r2,zero
  801d24:	1007883a 	mov	r3,r2
  801d28:	e0bffc17 	ldw	r2,-16(fp)
  801d2c:	10c03c45 	stb	r3,241(r2)
  d->_g34 = d->_g33 && !d->_cg34;
  801d30:	e0bffc17 	ldw	r2,-16(fp)
  801d34:	10802243 	ldbu	r2,137(r2)
  801d38:	10803fcc 	andi	r2,r2,255
  801d3c:	1080201c 	xori	r2,r2,128
  801d40:	10bfe004 	addi	r2,r2,-128
  801d44:	10000826 	beq	r2,zero,801d68 <logic+0x1968>
  801d48:	e0bffc17 	ldw	r2,-16(fp)
  801d4c:	10803c83 	ldbu	r2,242(r2)
  801d50:	10803fcc 	andi	r2,r2,255
  801d54:	1080201c 	xori	r2,r2,128
  801d58:	10bfe004 	addi	r2,r2,-128
  801d5c:	1000021e 	bne	r2,zero,801d68 <logic+0x1968>
  801d60:	00800044 	movi	r2,1
  801d64:	00000106 	br	801d6c <logic+0x196c>
  801d68:	0005883a 	mov	r2,zero
  801d6c:	1007883a 	mov	r3,r2
  801d70:	e0bffc17 	ldw	r2,-16(fp)
  801d74:	10c02285 	stb	r3,138(r2)
  d->_cg37 = d->_Pacemaker_local__Atrig2 || d->_Pacemaker_local__Atrig3;
  801d78:	e0bffc17 	ldw	r2,-16(fp)
  801d7c:	10801a83 	ldbu	r2,106(r2)
  801d80:	10803fcc 	andi	r2,r2,255
  801d84:	1080201c 	xori	r2,r2,128
  801d88:	10bfe004 	addi	r2,r2,-128
  801d8c:	1000061e 	bne	r2,zero,801da8 <logic+0x19a8>
  801d90:	e0bffc17 	ldw	r2,-16(fp)
  801d94:	10801ac3 	ldbu	r2,107(r2)
  801d98:	10803fcc 	andi	r2,r2,255
  801d9c:	1080201c 	xori	r2,r2,128
  801da0:	10bfe004 	addi	r2,r2,-128
  801da4:	10000226 	beq	r2,zero,801db0 <logic+0x19b0>
  801da8:	00800044 	movi	r2,1
  801dac:	00000106 	br	801db4 <logic+0x19b4>
  801db0:	0005883a 	mov	r2,zero
  801db4:	1007883a 	mov	r3,r2
  801db8:	e0bffc17 	ldw	r2,-16(fp)
  801dbc:	10c03cc5 	stb	r3,243(r2)
  d->_g36 = d->_g39 && d->_cg35 || d->_g34 && d->_cg37;
  801dc0:	e0bffc17 	ldw	r2,-16(fp)
  801dc4:	10802383 	ldbu	r2,142(r2)
  801dc8:	10803fcc 	andi	r2,r2,255
  801dcc:	1080201c 	xori	r2,r2,128
  801dd0:	10bfe004 	addi	r2,r2,-128
  801dd4:	10000626 	beq	r2,zero,801df0 <logic+0x19f0>
  801dd8:	e0bffc17 	ldw	r2,-16(fp)
  801ddc:	10803c43 	ldbu	r2,241(r2)
  801de0:	10803fcc 	andi	r2,r2,255
  801de4:	1080201c 	xori	r2,r2,128
  801de8:	10bfe004 	addi	r2,r2,-128
  801dec:	10000c1e 	bne	r2,zero,801e20 <logic+0x1a20>
  801df0:	e0bffc17 	ldw	r2,-16(fp)
  801df4:	10802283 	ldbu	r2,138(r2)
  801df8:	10803fcc 	andi	r2,r2,255
  801dfc:	1080201c 	xori	r2,r2,128
  801e00:	10bfe004 	addi	r2,r2,-128
  801e04:	10000826 	beq	r2,zero,801e28 <logic+0x1a28>
  801e08:	e0bffc17 	ldw	r2,-16(fp)
  801e0c:	10803cc3 	ldbu	r2,243(r2)
  801e10:	10803fcc 	andi	r2,r2,255
  801e14:	1080201c 	xori	r2,r2,128
  801e18:	10bfe004 	addi	r2,r2,-128
  801e1c:	10000226 	beq	r2,zero,801e28 <logic+0x1a28>
  801e20:	00800044 	movi	r2,1
  801e24:	00000106 	br	801e2c <logic+0x1a2c>
  801e28:	0005883a 	mov	r2,zero
  801e2c:	1007883a 	mov	r3,r2
  801e30:	e0bffc17 	ldw	r2,-16(fp)
  801e34:	10c02305 	stb	r3,140(r2)
  d->_g43 = !d->_g22;
  801e38:	e0bffc17 	ldw	r2,-16(fp)
  801e3c:	108020c3 	ldbu	r2,131(r2)
  801e40:	10803fcc 	andi	r2,r2,255
  801e44:	1080201c 	xori	r2,r2,128
  801e48:	10bfe004 	addi	r2,r2,-128
  801e4c:	1005003a 	cmpeq	r2,r2,zero
  801e50:	1007883a 	mov	r3,r2
  801e54:	e0bffc17 	ldw	r2,-16(fp)
  801e58:	10c02405 	stb	r3,144(r2)
  d->_g44 = d->_g23 || d->_g47;
  801e5c:	e0bffc17 	ldw	r2,-16(fp)
  801e60:	10802103 	ldbu	r2,132(r2)
  801e64:	10803fcc 	andi	r2,r2,255
  801e68:	1080201c 	xori	r2,r2,128
  801e6c:	10bfe004 	addi	r2,r2,-128
  801e70:	1000061e 	bne	r2,zero,801e8c <logic+0x1a8c>
  801e74:	e0bffc17 	ldw	r2,-16(fp)
  801e78:	10802503 	ldbu	r2,148(r2)
  801e7c:	10803fcc 	andi	r2,r2,255
  801e80:	1080201c 	xori	r2,r2,128
  801e84:	10bfe004 	addi	r2,r2,-128
  801e88:	10000226 	beq	r2,zero,801e94 <logic+0x1a94>
  801e8c:	00800044 	movi	r2,1
  801e90:	00000106 	br	801e98 <logic+0x1a98>
  801e94:	0005883a 	mov	r2,zero
  801e98:	1007883a 	mov	r3,r2
  801e9c:	e0bffc17 	ldw	r2,-16(fp)
  801ea0:	10c02445 	stb	r3,145(r2)
  d->_g47 = (d->_g19_e2 || d->_g36) && (d->_g43 || d->_g44) && (d->_g36 || d->_g44);
  801ea4:	e0bffc17 	ldw	r2,-16(fp)
  801ea8:	10804743 	ldbu	r2,285(r2)
  801eac:	10803fcc 	andi	r2,r2,255
  801eb0:	1080201c 	xori	r2,r2,128
  801eb4:	10bfe004 	addi	r2,r2,-128
  801eb8:	1000061e 	bne	r2,zero,801ed4 <logic+0x1ad4>
  801ebc:	e0bffc17 	ldw	r2,-16(fp)
  801ec0:	10802303 	ldbu	r2,140(r2)
  801ec4:	10803fcc 	andi	r2,r2,255
  801ec8:	1080201c 	xori	r2,r2,128
  801ecc:	10bfe004 	addi	r2,r2,-128
  801ed0:	10001a26 	beq	r2,zero,801f3c <logic+0x1b3c>
  801ed4:	e0bffc17 	ldw	r2,-16(fp)
  801ed8:	10802403 	ldbu	r2,144(r2)
  801edc:	10803fcc 	andi	r2,r2,255
  801ee0:	1080201c 	xori	r2,r2,128
  801ee4:	10bfe004 	addi	r2,r2,-128
  801ee8:	1000061e 	bne	r2,zero,801f04 <logic+0x1b04>
  801eec:	e0bffc17 	ldw	r2,-16(fp)
  801ef0:	10802443 	ldbu	r2,145(r2)
  801ef4:	10803fcc 	andi	r2,r2,255
  801ef8:	1080201c 	xori	r2,r2,128
  801efc:	10bfe004 	addi	r2,r2,-128
  801f00:	10000e26 	beq	r2,zero,801f3c <logic+0x1b3c>
  801f04:	e0bffc17 	ldw	r2,-16(fp)
  801f08:	10802303 	ldbu	r2,140(r2)
  801f0c:	10803fcc 	andi	r2,r2,255
  801f10:	1080201c 	xori	r2,r2,128
  801f14:	10bfe004 	addi	r2,r2,-128
  801f18:	1000061e 	bne	r2,zero,801f34 <logic+0x1b34>
  801f1c:	e0bffc17 	ldw	r2,-16(fp)
  801f20:	10802443 	ldbu	r2,145(r2)
  801f24:	10803fcc 	andi	r2,r2,255
  801f28:	1080201c 	xori	r2,r2,128
  801f2c:	10bfe004 	addi	r2,r2,-128
  801f30:	10000226 	beq	r2,zero,801f3c <logic+0x1b3c>
  801f34:	00800044 	movi	r2,1
  801f38:	00000106 	br	801f40 <logic+0x1b40>
  801f3c:	0005883a 	mov	r2,zero
  801f40:	1007883a 	mov	r3,r2
  801f44:	e0bffc17 	ldw	r2,-16(fp)
  801f48:	10c02505 	stb	r3,148(r2)
  d->_cg48 = d->_Pacemaker_local__Atrig2;
  801f4c:	e0bffc17 	ldw	r2,-16(fp)
  801f50:	10c01a83 	ldbu	r3,106(r2)
  801f54:	e0bffc17 	ldw	r2,-16(fp)
  801f58:	10c03b05 	stb	r3,236(r2)
  d->_g45_e2 = d->_GO || d->_g47 && !d->_cg48 || d->_g51 || d->_g50 && !d->_cg50;
  801f5c:	e0bffc17 	ldw	r2,-16(fp)
  801f60:	10803903 	ldbu	r2,228(r2)
  801f64:	10803fcc 	andi	r2,r2,255
  801f68:	1080201c 	xori	r2,r2,128
  801f6c:	10bfe004 	addi	r2,r2,-128
  801f70:	10001e1e 	bne	r2,zero,801fec <logic+0x1bec>
  801f74:	e0bffc17 	ldw	r2,-16(fp)
  801f78:	10802503 	ldbu	r2,148(r2)
  801f7c:	10803fcc 	andi	r2,r2,255
  801f80:	1080201c 	xori	r2,r2,128
  801f84:	10bfe004 	addi	r2,r2,-128
  801f88:	10000626 	beq	r2,zero,801fa4 <logic+0x1ba4>
  801f8c:	e0bffc17 	ldw	r2,-16(fp)
  801f90:	10803b03 	ldbu	r2,236(r2)
  801f94:	10803fcc 	andi	r2,r2,255
  801f98:	1080201c 	xori	r2,r2,128
  801f9c:	10bfe004 	addi	r2,r2,-128
  801fa0:	10001226 	beq	r2,zero,801fec <logic+0x1bec>
  801fa4:	e0bffc17 	ldw	r2,-16(fp)
  801fa8:	10802603 	ldbu	r2,152(r2)
  801fac:	10803fcc 	andi	r2,r2,255
  801fb0:	1080201c 	xori	r2,r2,128
  801fb4:	10bfe004 	addi	r2,r2,-128
  801fb8:	10000c1e 	bne	r2,zero,801fec <logic+0x1bec>
  801fbc:	e0bffc17 	ldw	r2,-16(fp)
  801fc0:	108025c3 	ldbu	r2,151(r2)
  801fc4:	10803fcc 	andi	r2,r2,255
  801fc8:	1080201c 	xori	r2,r2,128
  801fcc:	10bfe004 	addi	r2,r2,-128
  801fd0:	10000826 	beq	r2,zero,801ff4 <logic+0x1bf4>
  801fd4:	e0bffc17 	ldw	r2,-16(fp)
  801fd8:	10803b43 	ldbu	r2,237(r2)
  801fdc:	10803fcc 	andi	r2,r2,255
  801fe0:	1080201c 	xori	r2,r2,128
  801fe4:	10bfe004 	addi	r2,r2,-128
  801fe8:	1000021e 	bne	r2,zero,801ff4 <logic+0x1bf4>
  801fec:	00800044 	movi	r2,1
  801ff0:	00000106 	br	801ff8 <logic+0x1bf8>
  801ff4:	0005883a 	mov	r2,zero
  801ff8:	1007883a 	mov	r3,r2
  801ffc:	e0bffc17 	ldw	r2,-16(fp)
  802000:	10c047c5 	stb	r3,287(r2)
  d->_g36_e1 = d->_g27 && d->_cg27;
  802004:	e0bffc17 	ldw	r2,-16(fp)
  802008:	10802143 	ldbu	r2,133(r2)
  80200c:	10803fcc 	andi	r2,r2,255
  802010:	1080201c 	xori	r2,r2,128
  802014:	10bfe004 	addi	r2,r2,-128
  802018:	10000826 	beq	r2,zero,80203c <logic+0x1c3c>
  80201c:	e0bffc17 	ldw	r2,-16(fp)
  802020:	10803b83 	ldbu	r2,238(r2)
  802024:	10803fcc 	andi	r2,r2,255
  802028:	1080201c 	xori	r2,r2,128
  80202c:	10bfe004 	addi	r2,r2,-128
  802030:	10000226 	beq	r2,zero,80203c <logic+0x1c3c>
  802034:	00800044 	movi	r2,1
  802038:	00000106 	br	802040 <logic+0x1c40>
  80203c:	0005883a 	mov	r2,zero
  802040:	1007883a 	mov	r3,r2
  802044:	e0bffc17 	ldw	r2,-16(fp)
  802048:	10c04785 	stb	r3,286(r2)
  if (d->_g36_e1) {
  80204c:	e0bffc17 	ldw	r2,-16(fp)
  802050:	10804783 	ldbu	r2,286(r2)
  802054:	10803fcc 	andi	r2,r2,255
  802058:	1080201c 	xori	r2,r2,128
  80205c:	10bfe004 	addi	r2,r2,-128
  802060:	10000326 	beq	r2,zero,802070 <logic+0x1c70>
    d->_region1_PVARP_timer_t = 0;
  802064:	e0bffc17 	ldw	r2,-16(fp)
  802068:	10000915 	stw	zero,36(r2)
  80206c:	10000a15 	stw	zero,40(r2)
  }
  d->_g45 = d->_g47 && d->_cg48;
  802070:	e0bffc17 	ldw	r2,-16(fp)
  802074:	10802503 	ldbu	r2,148(r2)
  802078:	10803fcc 	andi	r2,r2,255
  80207c:	1080201c 	xori	r2,r2,128
  802080:	10bfe004 	addi	r2,r2,-128
  802084:	10000826 	beq	r2,zero,8020a8 <logic+0x1ca8>
  802088:	e0bffc17 	ldw	r2,-16(fp)
  80208c:	10803b03 	ldbu	r2,236(r2)
  802090:	10803fcc 	andi	r2,r2,255
  802094:	1080201c 	xori	r2,r2,128
  802098:	10bfe004 	addi	r2,r2,-128
  80209c:	10000226 	beq	r2,zero,8020a8 <logic+0x1ca8>
  8020a0:	00800044 	movi	r2,1
  8020a4:	00000106 	br	8020ac <logic+0x1cac>
  8020a8:	0005883a 	mov	r2,zero
  8020ac:	1007883a 	mov	r3,r2
  8020b0:	e0bffc17 	ldw	r2,-16(fp)
  8020b4:	10c02485 	stb	r3,146(r2)
  if (d->_g45) {
  8020b8:	e0bffc17 	ldw	r2,-16(fp)
  8020bc:	10802483 	ldbu	r2,146(r2)
  8020c0:	10803fcc 	andi	r2,r2,255
  8020c4:	1080201c 	xori	r2,r2,128
  8020c8:	10bfe004 	addi	r2,r2,-128
  8020cc:	10000626 	beq	r2,zero,8020e8 <logic+0x1ce8>
    d->AR |= 1;
  8020d0:	e0bffc17 	ldw	r2,-16(fp)
  8020d4:	108018c3 	ldbu	r2,99(r2)
  8020d8:	10800054 	ori	r2,r2,1
  8020dc:	1007883a 	mov	r3,r2
  8020e0:	e0bffc17 	ldw	r2,-16(fp)
  8020e4:	10c018c5 	stb	r3,99(r2)
  }
  d->_g36 = d->_g36_e1 || d->_g45;
  8020e8:	e0bffc17 	ldw	r2,-16(fp)
  8020ec:	10804783 	ldbu	r2,286(r2)
  8020f0:	10803fcc 	andi	r2,r2,255
  8020f4:	1080201c 	xori	r2,r2,128
  8020f8:	10bfe004 	addi	r2,r2,-128
  8020fc:	1000061e 	bne	r2,zero,802118 <logic+0x1d18>
  802100:	e0bffc17 	ldw	r2,-16(fp)
  802104:	10802483 	ldbu	r2,146(r2)
  802108:	10803fcc 	andi	r2,r2,255
  80210c:	1080201c 	xori	r2,r2,128
  802110:	10bfe004 	addi	r2,r2,-128
  802114:	10000226 	beq	r2,zero,802120 <logic+0x1d20>
  802118:	00800044 	movi	r2,1
  80211c:	00000106 	br	802124 <logic+0x1d24>
  802120:	0005883a 	mov	r2,zero
  802124:	1007883a 	mov	r3,r2
  802128:	e0bffc17 	ldw	r2,-16(fp)
  80212c:	10c02305 	stb	r3,140(r2)
  if (d->_g36) {
  802130:	e0bffc17 	ldw	r2,-16(fp)
  802134:	10802303 	ldbu	r2,140(r2)
  802138:	10803fcc 	andi	r2,r2,255
  80213c:	1080201c 	xori	r2,r2,128
  802140:	10bfe004 	addi	r2,r2,-128
  802144:	10000426 	beq	r2,zero,802158 <logic+0x1d58>
    d->_Pacemaker_local__Atrig2 = 0;
  802148:	e0bffc17 	ldw	r2,-16(fp)
  80214c:	10001a85 	stb	zero,106(r2)
    d->_Pacemaker_local__Atrig3 = 0;
  802150:	e0bffc17 	ldw	r2,-16(fp)
  802154:	10001ac5 	stb	zero,107(r2)
  }
  d->_cg30 = d->_region1_PVARP_timer_t < d->PVARP_Constraint;
  802158:	e0bffc17 	ldw	r2,-16(fp)
  80215c:	14000917 	ldw	r16,36(r2)
  802160:	14400a17 	ldw	r17,40(r2)
  802164:	e0bffc17 	ldw	r2,-16(fp)
  802168:	10800217 	ldw	r2,8(r2)
  80216c:	1009883a 	mov	r4,r2
  802170:	08064e40 	call	8064e4 <__floatsidf>
  802174:	1009883a 	mov	r4,r2
  802178:	180b883a 	mov	r5,r3
  80217c:	04800044 	movi	r18,1
  802180:	200d883a 	mov	r6,r4
  802184:	280f883a 	mov	r7,r5
  802188:	8009883a 	mov	r4,r16
  80218c:	880b883a 	mov	r5,r17
  802190:	0805af40 	call	805af4 <__ledf2>
  802194:	10000116 	blt	r2,zero,80219c <logic+0x1d9c>
  802198:	0025883a 	mov	r18,zero
  80219c:	9007883a 	mov	r3,r18
  8021a0:	e0bffc17 	ldw	r2,-16(fp)
  8021a4:	10c03bc5 	stb	r3,239(r2)
  d->_g51 = d->_g36 && d->_cg30;
  8021a8:	e0bffc17 	ldw	r2,-16(fp)
  8021ac:	10802303 	ldbu	r2,140(r2)
  8021b0:	10803fcc 	andi	r2,r2,255
  8021b4:	1080201c 	xori	r2,r2,128
  8021b8:	10bfe004 	addi	r2,r2,-128
  8021bc:	10000826 	beq	r2,zero,8021e0 <logic+0x1de0>
  8021c0:	e0bffc17 	ldw	r2,-16(fp)
  8021c4:	10803bc3 	ldbu	r2,239(r2)
  8021c8:	10803fcc 	andi	r2,r2,255
  8021cc:	1080201c 	xori	r2,r2,128
  8021d0:	10bfe004 	addi	r2,r2,-128
  8021d4:	10000226 	beq	r2,zero,8021e0 <logic+0x1de0>
  8021d8:	00800044 	movi	r2,1
  8021dc:	00000106 	br	8021e4 <logic+0x1de4>
  8021e0:	0005883a 	mov	r2,zero
  8021e4:	1007883a 	mov	r3,r2
  8021e8:	e0bffc17 	ldw	r2,-16(fp)
  8021ec:	10c02605 	stb	r3,152(r2)
  if (d->_g51) {
  8021f0:	e0bffc17 	ldw	r2,-16(fp)
  8021f4:	10802603 	ldbu	r2,152(r2)
  8021f8:	10803fcc 	andi	r2,r2,255
  8021fc:	1080201c 	xori	r2,r2,128
  802200:	10bfe004 	addi	r2,r2,-128
  802204:	10003426 	beq	r2,zero,8022d8 <logic+0x1ed8>
    d->sleepT = (d->sleepT < (d->PVARP_Constraint - d->_region1_PVARP_timer_t)) ? d->sleepT : (d->PVARP_Constraint - d->_region1_PVARP_timer_t);
  802208:	e0bffc17 	ldw	r2,-16(fp)
  80220c:	14001517 	ldw	r16,84(r2)
  802210:	14401617 	ldw	r17,88(r2)
  802214:	e0bffc17 	ldw	r2,-16(fp)
  802218:	10800217 	ldw	r2,8(r2)
  80221c:	1009883a 	mov	r4,r2
  802220:	08064e40 	call	8064e4 <__floatsidf>
  802224:	1011883a 	mov	r8,r2
  802228:	1813883a 	mov	r9,r3
  80222c:	e13ffc17 	ldw	r4,-16(fp)
  802230:	20800917 	ldw	r2,36(r4)
  802234:	20c00a17 	ldw	r3,40(r4)
  802238:	100d883a 	mov	r6,r2
  80223c:	180f883a 	mov	r7,r3
  802240:	4009883a 	mov	r4,r8
  802244:	480b883a 	mov	r5,r9
  802248:	0805be80 	call	805be8 <__subdf3>
  80224c:	1009883a 	mov	r4,r2
  802250:	180b883a 	mov	r5,r3
  802254:	2005883a 	mov	r2,r4
  802258:	2807883a 	mov	r3,r5
  80225c:	100d883a 	mov	r6,r2
  802260:	180f883a 	mov	r7,r3
  802264:	8009883a 	mov	r4,r16
  802268:	880b883a 	mov	r5,r17
  80226c:	0805af40 	call	805af4 <__ledf2>
  802270:	1000040e 	bge	r2,zero,802284 <logic+0x1e84>
  802274:	e13ffc17 	ldw	r4,-16(fp)
  802278:	20801517 	ldw	r2,84(r4)
  80227c:	20c01617 	ldw	r3,88(r4)
  802280:	00001206 	br	8022cc <logic+0x1ecc>
  802284:	e0bffc17 	ldw	r2,-16(fp)
  802288:	10800217 	ldw	r2,8(r2)
  80228c:	1009883a 	mov	r4,r2
  802290:	08064e40 	call	8064e4 <__floatsidf>
  802294:	1011883a 	mov	r8,r2
  802298:	1813883a 	mov	r9,r3
  80229c:	e13ffc17 	ldw	r4,-16(fp)
  8022a0:	20800917 	ldw	r2,36(r4)
  8022a4:	20c00a17 	ldw	r3,40(r4)
  8022a8:	100d883a 	mov	r6,r2
  8022ac:	180f883a 	mov	r7,r3
  8022b0:	4009883a 	mov	r4,r8
  8022b4:	480b883a 	mov	r5,r9
  8022b8:	0805be80 	call	805be8 <__subdf3>
  8022bc:	1009883a 	mov	r4,r2
  8022c0:	180b883a 	mov	r5,r3
  8022c4:	2005883a 	mov	r2,r4
  8022c8:	2807883a 	mov	r3,r5
  8022cc:	e13ffc17 	ldw	r4,-16(fp)
  8022d0:	20801515 	stw	r2,84(r4)
  8022d4:	20c01615 	stw	r3,88(r4)
  }
  d->_cg31 = d->_Pacemaker_local__Atrig2 || d->_Pacemaker_local__Atrig3;
  8022d8:	e0bffc17 	ldw	r2,-16(fp)
  8022dc:	10801a83 	ldbu	r2,106(r2)
  8022e0:	10803fcc 	andi	r2,r2,255
  8022e4:	1080201c 	xori	r2,r2,128
  8022e8:	10bfe004 	addi	r2,r2,-128
  8022ec:	1000061e 	bne	r2,zero,802308 <logic+0x1f08>
  8022f0:	e0bffc17 	ldw	r2,-16(fp)
  8022f4:	10801ac3 	ldbu	r2,107(r2)
  8022f8:	10803fcc 	andi	r2,r2,255
  8022fc:	1080201c 	xori	r2,r2,128
  802300:	10bfe004 	addi	r2,r2,-128
  802304:	10000226 	beq	r2,zero,802310 <logic+0x1f10>
  802308:	00800044 	movi	r2,1
  80230c:	00000106 	br	802314 <logic+0x1f14>
  802310:	0005883a 	mov	r2,zero
  802314:	1007883a 	mov	r3,r2
  802318:	e0bffc17 	ldw	r2,-16(fp)
  80231c:	10c03c05 	stb	r3,240(r2)
  d->_g50 = d->_g51 && !d->_cg31 || d->_g39 && !d->_cg35;
  802320:	e0bffc17 	ldw	r2,-16(fp)
  802324:	10802603 	ldbu	r2,152(r2)
  802328:	10803fcc 	andi	r2,r2,255
  80232c:	1080201c 	xori	r2,r2,128
  802330:	10bfe004 	addi	r2,r2,-128
  802334:	10000626 	beq	r2,zero,802350 <logic+0x1f50>
  802338:	e0bffc17 	ldw	r2,-16(fp)
  80233c:	10803c03 	ldbu	r2,240(r2)
  802340:	10803fcc 	andi	r2,r2,255
  802344:	1080201c 	xori	r2,r2,128
  802348:	10bfe004 	addi	r2,r2,-128
  80234c:	10000c26 	beq	r2,zero,802380 <logic+0x1f80>
  802350:	e0bffc17 	ldw	r2,-16(fp)
  802354:	10802383 	ldbu	r2,142(r2)
  802358:	10803fcc 	andi	r2,r2,255
  80235c:	1080201c 	xori	r2,r2,128
  802360:	10bfe004 	addi	r2,r2,-128
  802364:	10000826 	beq	r2,zero,802388 <logic+0x1f88>
  802368:	e0bffc17 	ldw	r2,-16(fp)
  80236c:	10803c43 	ldbu	r2,241(r2)
  802370:	10803fcc 	andi	r2,r2,255
  802374:	1080201c 	xori	r2,r2,128
  802378:	10bfe004 	addi	r2,r2,-128
  80237c:	1000021e 	bne	r2,zero,802388 <logic+0x1f88>
  802380:	00800044 	movi	r2,1
  802384:	00000106 	br	80238c <logic+0x1f8c>
  802388:	0005883a 	mov	r2,zero
  80238c:	1007883a 	mov	r3,r2
  802390:	e0bffc17 	ldw	r2,-16(fp)
  802394:	10c025c5 	stb	r3,151(r2)
  d->_g27 = d->_g36 && !d->_cg30;
  802398:	e0bffc17 	ldw	r2,-16(fp)
  80239c:	10802303 	ldbu	r2,140(r2)
  8023a0:	10803fcc 	andi	r2,r2,255
  8023a4:	1080201c 	xori	r2,r2,128
  8023a8:	10bfe004 	addi	r2,r2,-128
  8023ac:	10000826 	beq	r2,zero,8023d0 <logic+0x1fd0>
  8023b0:	e0bffc17 	ldw	r2,-16(fp)
  8023b4:	10803bc3 	ldbu	r2,239(r2)
  8023b8:	10803fcc 	andi	r2,r2,255
  8023bc:	1080201c 	xori	r2,r2,128
  8023c0:	10bfe004 	addi	r2,r2,-128
  8023c4:	1000021e 	bne	r2,zero,8023d0 <logic+0x1fd0>
  8023c8:	00800044 	movi	r2,1
  8023cc:	00000106 	br	8023d4 <logic+0x1fd4>
  8023d0:	0005883a 	mov	r2,zero
  8023d4:	1007883a 	mov	r3,r2
  8023d8:	e0bffc17 	ldw	r2,-16(fp)
  8023dc:	10c02145 	stb	r3,133(r2)
  d->_cg40 = d->_Pacemaker_local__Atrig2 || d->_Pacemaker_local__Atrig3;
  8023e0:	e0bffc17 	ldw	r2,-16(fp)
  8023e4:	10801a83 	ldbu	r2,106(r2)
  8023e8:	10803fcc 	andi	r2,r2,255
  8023ec:	1080201c 	xori	r2,r2,128
  8023f0:	10bfe004 	addi	r2,r2,-128
  8023f4:	1000061e 	bne	r2,zero,802410 <logic+0x2010>
  8023f8:	e0bffc17 	ldw	r2,-16(fp)
  8023fc:	10801ac3 	ldbu	r2,107(r2)
  802400:	10803fcc 	andi	r2,r2,255
  802404:	1080201c 	xori	r2,r2,128
  802408:	10bfe004 	addi	r2,r2,-128
  80240c:	10000226 	beq	r2,zero,802418 <logic+0x2018>
  802410:	00800044 	movi	r2,1
  802414:	00000106 	br	80241c <logic+0x201c>
  802418:	0005883a 	mov	r2,zero
  80241c:	1007883a 	mov	r3,r2
  802420:	e0bffc17 	ldw	r2,-16(fp)
  802424:	10c03d05 	stb	r3,244(r2)
  d->_g48 = d->_g34 && !d->_cg37 || d->_g27 && !d->_cg40;
  802428:	e0bffc17 	ldw	r2,-16(fp)
  80242c:	10802283 	ldbu	r2,138(r2)
  802430:	10803fcc 	andi	r2,r2,255
  802434:	1080201c 	xori	r2,r2,128
  802438:	10bfe004 	addi	r2,r2,-128
  80243c:	10000626 	beq	r2,zero,802458 <logic+0x2058>
  802440:	e0bffc17 	ldw	r2,-16(fp)
  802444:	10803cc3 	ldbu	r2,243(r2)
  802448:	10803fcc 	andi	r2,r2,255
  80244c:	1080201c 	xori	r2,r2,128
  802450:	10bfe004 	addi	r2,r2,-128
  802454:	10000c26 	beq	r2,zero,802488 <logic+0x2088>
  802458:	e0bffc17 	ldw	r2,-16(fp)
  80245c:	10802143 	ldbu	r2,133(r2)
  802460:	10803fcc 	andi	r2,r2,255
  802464:	1080201c 	xori	r2,r2,128
  802468:	10bfe004 	addi	r2,r2,-128
  80246c:	10000826 	beq	r2,zero,802490 <logic+0x2090>
  802470:	e0bffc17 	ldw	r2,-16(fp)
  802474:	10803d03 	ldbu	r2,244(r2)
  802478:	10803fcc 	andi	r2,r2,255
  80247c:	1080201c 	xori	r2,r2,128
  802480:	10bfe004 	addi	r2,r2,-128
  802484:	1000021e 	bne	r2,zero,802490 <logic+0x2090>
  802488:	00800044 	movi	r2,1
  80248c:	00000106 	br	802494 <logic+0x2094>
  802490:	0005883a 	mov	r2,zero
  802494:	1007883a 	mov	r3,r2
  802498:	e0bffc17 	ldw	r2,-16(fp)
  80249c:	10c02545 	stb	r3,149(r2)
  d->_g49 = d->_g36 || d->_g46 && !d->_cg46;
  8024a0:	e0bffc17 	ldw	r2,-16(fp)
  8024a4:	10802303 	ldbu	r2,140(r2)
  8024a8:	10803fcc 	andi	r2,r2,255
  8024ac:	1080201c 	xori	r2,r2,128
  8024b0:	10bfe004 	addi	r2,r2,-128
  8024b4:	10000c1e 	bne	r2,zero,8024e8 <logic+0x20e8>
  8024b8:	e0bffc17 	ldw	r2,-16(fp)
  8024bc:	108024c3 	ldbu	r2,147(r2)
  8024c0:	10803fcc 	andi	r2,r2,255
  8024c4:	1080201c 	xori	r2,r2,128
  8024c8:	10bfe004 	addi	r2,r2,-128
  8024cc:	10000826 	beq	r2,zero,8024f0 <logic+0x20f0>
  8024d0:	e0bffc17 	ldw	r2,-16(fp)
  8024d4:	10803d43 	ldbu	r2,245(r2)
  8024d8:	10803fcc 	andi	r2,r2,255
  8024dc:	1080201c 	xori	r2,r2,128
  8024e0:	10bfe004 	addi	r2,r2,-128
  8024e4:	1000021e 	bne	r2,zero,8024f0 <logic+0x20f0>
  8024e8:	00800044 	movi	r2,1
  8024ec:	00000106 	br	8024f4 <logic+0x20f4>
  8024f0:	0005883a 	mov	r2,zero
  8024f4:	1007883a 	mov	r3,r2
  8024f8:	e0bffc17 	ldw	r2,-16(fp)
  8024fc:	10c02585 	stb	r3,150(r2)
  d->_g28 = d->_pg77;
  802500:	e0bffc17 	ldw	r2,-16(fp)
  802504:	10c04ec3 	ldbu	r3,315(r2)
  802508:	e0bffc17 	ldw	r2,-16(fp)
  80250c:	10c02185 	stb	r3,134(r2)
  d->_g35 = d->_pg55;
  802510:	e0bffc17 	ldw	r2,-16(fp)
  802514:	10c04f03 	ldbu	r3,316(r2)
  802518:	e0bffc17 	ldw	r2,-16(fp)
  80251c:	10c022c5 	stb	r3,139(r2)
  d->_g31 = !(d->_g28 || d->_g35);
  802520:	e0bffc17 	ldw	r2,-16(fp)
  802524:	10802183 	ldbu	r2,134(r2)
  802528:	10803fcc 	andi	r2,r2,255
  80252c:	1080201c 	xori	r2,r2,128
  802530:	10bfe004 	addi	r2,r2,-128
  802534:	1000081e 	bne	r2,zero,802558 <logic+0x2158>
  802538:	e0bffc17 	ldw	r2,-16(fp)
  80253c:	108022c3 	ldbu	r2,139(r2)
  802540:	10803fcc 	andi	r2,r2,255
  802544:	1080201c 	xori	r2,r2,128
  802548:	10bfe004 	addi	r2,r2,-128
  80254c:	1000021e 	bne	r2,zero,802558 <logic+0x2158>
  802550:	00800044 	movi	r2,1
  802554:	00000106 	br	80255c <logic+0x215c>
  802558:	0005883a 	mov	r2,zero
  80255c:	1007883a 	mov	r3,r2
  802560:	e0bffc17 	ldw	r2,-16(fp)
  802564:	10c02205 	stb	r3,136(r2)
  d->_g40 = d->_pg56;
  802568:	e0bffc17 	ldw	r2,-16(fp)
  80256c:	10c04f43 	ldbu	r3,317(r2)
  802570:	e0bffc17 	ldw	r2,-16(fp)
  802574:	10c023c5 	stb	r3,143(r2)
  d->_g37 = d->_g40 && d->VS;
  802578:	e0bffc17 	ldw	r2,-16(fp)
  80257c:	108023c3 	ldbu	r2,143(r2)
  802580:	10803fcc 	andi	r2,r2,255
  802584:	1080201c 	xori	r2,r2,128
  802588:	10bfe004 	addi	r2,r2,-128
  80258c:	10000826 	beq	r2,zero,8025b0 <logic+0x21b0>
  802590:	e0bffc17 	ldw	r2,-16(fp)
  802594:	10801743 	ldbu	r2,93(r2)
  802598:	10803fcc 	andi	r2,r2,255
  80259c:	1080201c 	xori	r2,r2,128
  8025a0:	10bfe004 	addi	r2,r2,-128
  8025a4:	10000226 	beq	r2,zero,8025b0 <logic+0x21b0>
  8025a8:	00800044 	movi	r2,1
  8025ac:	00000106 	br	8025b4 <logic+0x21b4>
  8025b0:	0005883a 	mov	r2,zero
  8025b4:	1007883a 	mov	r3,r2
  8025b8:	e0bffc17 	ldw	r2,-16(fp)
  8025bc:	10c02345 	stb	r3,141(r2)
  if (d->_g37) {
  8025c0:	e0bffc17 	ldw	r2,-16(fp)
  8025c4:	10802343 	ldbu	r2,141(r2)
  8025c8:	10803fcc 	andi	r2,r2,255
  8025cc:	1080201c 	xori	r2,r2,128
  8025d0:	10bfe004 	addi	r2,r2,-128
  8025d4:	10000326 	beq	r2,zero,8025e4 <logic+0x21e4>
    d->_Pacemaker_local__Atrig4 = 1;
  8025d8:	e0bffc17 	ldw	r2,-16(fp)
  8025dc:	00c00044 	movi	r3,1
  8025e0:	10c01b05 	stb	r3,108(r2)
  }
  d->_g46 = d->_g40 && !d->VS;
  8025e4:	e0bffc17 	ldw	r2,-16(fp)
  8025e8:	108023c3 	ldbu	r2,143(r2)
  8025ec:	10803fcc 	andi	r2,r2,255
  8025f0:	1080201c 	xori	r2,r2,128
  8025f4:	10bfe004 	addi	r2,r2,-128
  8025f8:	10000826 	beq	r2,zero,80261c <logic+0x221c>
  8025fc:	e0bffc17 	ldw	r2,-16(fp)
  802600:	10801743 	ldbu	r2,93(r2)
  802604:	10803fcc 	andi	r2,r2,255
  802608:	1080201c 	xori	r2,r2,128
  80260c:	10bfe004 	addi	r2,r2,-128
  802610:	1000021e 	bne	r2,zero,80261c <logic+0x221c>
  802614:	00800044 	movi	r2,1
  802618:	00000106 	br	802620 <logic+0x2220>
  80261c:	0005883a 	mov	r2,zero
  802620:	1007883a 	mov	r3,r2
  802624:	e0bffc17 	ldw	r2,-16(fp)
  802628:	10c024c5 	stb	r3,147(r2)
  d->_cg74 = d->_region2_VRP_timer_t >= d->VRP_Constraint;
  80262c:	e0bffc17 	ldw	r2,-16(fp)
  802630:	14000b17 	ldw	r16,44(r2)
  802634:	14400c17 	ldw	r17,48(r2)
  802638:	e0bffc17 	ldw	r2,-16(fp)
  80263c:	10800317 	ldw	r2,12(r2)
  802640:	1009883a 	mov	r4,r2
  802644:	08064e40 	call	8064e4 <__floatsidf>
  802648:	1009883a 	mov	r4,r2
  80264c:	180b883a 	mov	r5,r3
  802650:	04800044 	movi	r18,1
  802654:	200d883a 	mov	r6,r4
  802658:	280f883a 	mov	r7,r5
  80265c:	8009883a 	mov	r4,r16
  802660:	880b883a 	mov	r5,r17
  802664:	0805a180 	call	805a18 <__gedf2>
  802668:	1000010e 	bge	r2,zero,802670 <logic+0x2270>
  80266c:	0025883a 	mov	r18,zero
  802670:	9007883a 	mov	r3,r18
  802674:	e0bffc17 	ldw	r2,-16(fp)
  802678:	10c03fc5 	stb	r3,255(r2)
  d->_g29 = d->_g46 && d->_cg74;
  80267c:	e0bffc17 	ldw	r2,-16(fp)
  802680:	108024c3 	ldbu	r2,147(r2)
  802684:	10803fcc 	andi	r2,r2,255
  802688:	1080201c 	xori	r2,r2,128
  80268c:	10bfe004 	addi	r2,r2,-128
  802690:	10000826 	beq	r2,zero,8026b4 <logic+0x22b4>
  802694:	e0bffc17 	ldw	r2,-16(fp)
  802698:	10803fc3 	ldbu	r2,255(r2)
  80269c:	10803fcc 	andi	r2,r2,255
  8026a0:	1080201c 	xori	r2,r2,128
  8026a4:	10bfe004 	addi	r2,r2,-128
  8026a8:	10000226 	beq	r2,zero,8026b4 <logic+0x22b4>
  8026ac:	00800044 	movi	r2,1
  8026b0:	00000106 	br	8026b8 <logic+0x22b8>
  8026b4:	0005883a 	mov	r2,zero
  8026b8:	1007883a 	mov	r3,r2
  8026bc:	e0bffc17 	ldw	r2,-16(fp)
  8026c0:	10c021c5 	stb	r3,135(r2)
  if (d->_g29) {
  8026c4:	e0bffc17 	ldw	r2,-16(fp)
  8026c8:	108021c3 	ldbu	r2,135(r2)
  8026cc:	10803fcc 	andi	r2,r2,255
  8026d0:	1080201c 	xori	r2,r2,128
  8026d4:	10bfe004 	addi	r2,r2,-128
  8026d8:	10000326 	beq	r2,zero,8026e8 <logic+0x22e8>
    d->_Pacemaker_local__Atrig5 = 1;
  8026dc:	e0bffc17 	ldw	r2,-16(fp)
  8026e0:	00c00044 	movi	r3,1
  8026e4:	10c01b45 	stb	r3,109(r2)
  }
  d->_g67 = d->_g35 || d->_g28;
  8026e8:	e0bffc17 	ldw	r2,-16(fp)
  8026ec:	108022c3 	ldbu	r2,139(r2)
  8026f0:	10803fcc 	andi	r2,r2,255
  8026f4:	1080201c 	xori	r2,r2,128
  8026f8:	10bfe004 	addi	r2,r2,-128
  8026fc:	1000061e 	bne	r2,zero,802718 <logic+0x2318>
  802700:	e0bffc17 	ldw	r2,-16(fp)
  802704:	10802183 	ldbu	r2,134(r2)
  802708:	10803fcc 	andi	r2,r2,255
  80270c:	1080201c 	xori	r2,r2,128
  802710:	10bfe004 	addi	r2,r2,-128
  802714:	10000226 	beq	r2,zero,802720 <logic+0x2320>
  802718:	00800044 	movi	r2,1
  80271c:	00000106 	br	802724 <logic+0x2324>
  802720:	0005883a 	mov	r2,zero
  802724:	1007883a 	mov	r3,r2
  802728:	e0bffc17 	ldw	r2,-16(fp)
  80272c:	10c02885 	stb	r3,162(r2)
  d->_cg62 = d->_region2_VRP_timer_t < d->VRP_Constraint;
  802730:	e0bffc17 	ldw	r2,-16(fp)
  802734:	14000b17 	ldw	r16,44(r2)
  802738:	14400c17 	ldw	r17,48(r2)
  80273c:	e0bffc17 	ldw	r2,-16(fp)
  802740:	10800317 	ldw	r2,12(r2)
  802744:	1009883a 	mov	r4,r2
  802748:	08064e40 	call	8064e4 <__floatsidf>
  80274c:	1009883a 	mov	r4,r2
  802750:	180b883a 	mov	r5,r3
  802754:	04800044 	movi	r18,1
  802758:	200d883a 	mov	r6,r4
  80275c:	280f883a 	mov	r7,r5
  802760:	8009883a 	mov	r4,r16
  802764:	880b883a 	mov	r5,r17
  802768:	0805af40 	call	805af4 <__ledf2>
  80276c:	10000116 	blt	r2,zero,802774 <logic+0x2374>
  802770:	0025883a 	mov	r18,zero
  802774:	9007883a 	mov	r3,r18
  802778:	e0bffc17 	ldw	r2,-16(fp)
  80277c:	10c03f05 	stb	r3,252(r2)
  d->_g61 = d->_g67 && d->_cg62;
  802780:	e0bffc17 	ldw	r2,-16(fp)
  802784:	10802883 	ldbu	r2,162(r2)
  802788:	10803fcc 	andi	r2,r2,255
  80278c:	1080201c 	xori	r2,r2,128
  802790:	10bfe004 	addi	r2,r2,-128
  802794:	10000826 	beq	r2,zero,8027b8 <logic+0x23b8>
  802798:	e0bffc17 	ldw	r2,-16(fp)
  80279c:	10803f03 	ldbu	r2,252(r2)
  8027a0:	10803fcc 	andi	r2,r2,255
  8027a4:	1080201c 	xori	r2,r2,128
  8027a8:	10bfe004 	addi	r2,r2,-128
  8027ac:	10000226 	beq	r2,zero,8027b8 <logic+0x23b8>
  8027b0:	00800044 	movi	r2,1
  8027b4:	00000106 	br	8027bc <logic+0x23bc>
  8027b8:	0005883a 	mov	r2,zero
  8027bc:	1007883a 	mov	r3,r2
  8027c0:	e0bffc17 	ldw	r2,-16(fp)
  8027c4:	10c02745 	stb	r3,157(r2)
  if (d->_g61) {
  8027c8:	e0bffc17 	ldw	r2,-16(fp)
  8027cc:	10802743 	ldbu	r2,157(r2)
  8027d0:	10803fcc 	andi	r2,r2,255
  8027d4:	1080201c 	xori	r2,r2,128
  8027d8:	10bfe004 	addi	r2,r2,-128
  8027dc:	10003426 	beq	r2,zero,8028b0 <logic+0x24b0>
    d->sleepT = (d->sleepT < (d->VRP_Constraint - d->_region2_VRP_timer_t)) ? d->sleepT : (d->VRP_Constraint - d->_region2_VRP_timer_t);
  8027e0:	e0bffc17 	ldw	r2,-16(fp)
  8027e4:	14001517 	ldw	r16,84(r2)
  8027e8:	14401617 	ldw	r17,88(r2)
  8027ec:	e0bffc17 	ldw	r2,-16(fp)
  8027f0:	10800317 	ldw	r2,12(r2)
  8027f4:	1009883a 	mov	r4,r2
  8027f8:	08064e40 	call	8064e4 <__floatsidf>
  8027fc:	1011883a 	mov	r8,r2
  802800:	1813883a 	mov	r9,r3
  802804:	e13ffc17 	ldw	r4,-16(fp)
  802808:	20800b17 	ldw	r2,44(r4)
  80280c:	20c00c17 	ldw	r3,48(r4)
  802810:	100d883a 	mov	r6,r2
  802814:	180f883a 	mov	r7,r3
  802818:	4009883a 	mov	r4,r8
  80281c:	480b883a 	mov	r5,r9
  802820:	0805be80 	call	805be8 <__subdf3>
  802824:	1009883a 	mov	r4,r2
  802828:	180b883a 	mov	r5,r3
  80282c:	2005883a 	mov	r2,r4
  802830:	2807883a 	mov	r3,r5
  802834:	100d883a 	mov	r6,r2
  802838:	180f883a 	mov	r7,r3
  80283c:	8009883a 	mov	r4,r16
  802840:	880b883a 	mov	r5,r17
  802844:	0805af40 	call	805af4 <__ledf2>
  802848:	1000040e 	bge	r2,zero,80285c <logic+0x245c>
  80284c:	e13ffc17 	ldw	r4,-16(fp)
  802850:	20801517 	ldw	r2,84(r4)
  802854:	20c01617 	ldw	r3,88(r4)
  802858:	00001206 	br	8028a4 <logic+0x24a4>
  80285c:	e0bffc17 	ldw	r2,-16(fp)
  802860:	10800317 	ldw	r2,12(r2)
  802864:	1009883a 	mov	r4,r2
  802868:	08064e40 	call	8064e4 <__floatsidf>
  80286c:	1011883a 	mov	r8,r2
  802870:	1813883a 	mov	r9,r3
  802874:	e13ffc17 	ldw	r4,-16(fp)
  802878:	20800b17 	ldw	r2,44(r4)
  80287c:	20c00c17 	ldw	r3,48(r4)
  802880:	100d883a 	mov	r6,r2
  802884:	180f883a 	mov	r7,r3
  802888:	4009883a 	mov	r4,r8
  80288c:	480b883a 	mov	r5,r9
  802890:	0805be80 	call	805be8 <__subdf3>
  802894:	1009883a 	mov	r4,r2
  802898:	180b883a 	mov	r5,r3
  80289c:	2005883a 	mov	r2,r4
  8028a0:	2807883a 	mov	r3,r5
  8028a4:	e13ffc17 	ldw	r4,-16(fp)
  8028a8:	20801515 	stw	r2,84(r4)
  8028ac:	20c01615 	stw	r3,88(r4)
  }
  d->_cg63 = d->_Pacemaker_local__Atrig4 || d->_Pacemaker_local__Atrig5;
  8028b0:	e0bffc17 	ldw	r2,-16(fp)
  8028b4:	10801b03 	ldbu	r2,108(r2)
  8028b8:	10803fcc 	andi	r2,r2,255
  8028bc:	1080201c 	xori	r2,r2,128
  8028c0:	10bfe004 	addi	r2,r2,-128
  8028c4:	1000061e 	bne	r2,zero,8028e0 <logic+0x24e0>
  8028c8:	e0bffc17 	ldw	r2,-16(fp)
  8028cc:	10801b43 	ldbu	r2,109(r2)
  8028d0:	10803fcc 	andi	r2,r2,255
  8028d4:	1080201c 	xori	r2,r2,128
  8028d8:	10bfe004 	addi	r2,r2,-128
  8028dc:	10000226 	beq	r2,zero,8028e8 <logic+0x24e8>
  8028e0:	00800044 	movi	r2,1
  8028e4:	00000106 	br	8028ec <logic+0x24ec>
  8028e8:	0005883a 	mov	r2,zero
  8028ec:	1007883a 	mov	r3,r2
  8028f0:	e0bffc17 	ldw	r2,-16(fp)
  8028f4:	10c03ec5 	stb	r3,251(r2)
  d->_g62 = d->_g67 && !d->_cg62;
  8028f8:	e0bffc17 	ldw	r2,-16(fp)
  8028fc:	10802883 	ldbu	r2,162(r2)
  802900:	10803fcc 	andi	r2,r2,255
  802904:	1080201c 	xori	r2,r2,128
  802908:	10bfe004 	addi	r2,r2,-128
  80290c:	10000826 	beq	r2,zero,802930 <logic+0x2530>
  802910:	e0bffc17 	ldw	r2,-16(fp)
  802914:	10803f03 	ldbu	r2,252(r2)
  802918:	10803fcc 	andi	r2,r2,255
  80291c:	1080201c 	xori	r2,r2,128
  802920:	10bfe004 	addi	r2,r2,-128
  802924:	1000021e 	bne	r2,zero,802930 <logic+0x2530>
  802928:	00800044 	movi	r2,1
  80292c:	00000106 	br	802934 <logic+0x2534>
  802930:	0005883a 	mov	r2,zero
  802934:	1007883a 	mov	r3,r2
  802938:	e0bffc17 	ldw	r2,-16(fp)
  80293c:	10c02785 	stb	r3,158(r2)
  d->_cg65 = d->_Pacemaker_local__Atrig4 || d->_Pacemaker_local__Atrig5;
  802940:	e0bffc17 	ldw	r2,-16(fp)
  802944:	10801b03 	ldbu	r2,108(r2)
  802948:	10803fcc 	andi	r2,r2,255
  80294c:	1080201c 	xori	r2,r2,128
  802950:	10bfe004 	addi	r2,r2,-128
  802954:	1000061e 	bne	r2,zero,802970 <logic+0x2570>
  802958:	e0bffc17 	ldw	r2,-16(fp)
  80295c:	10801b43 	ldbu	r2,109(r2)
  802960:	10803fcc 	andi	r2,r2,255
  802964:	1080201c 	xori	r2,r2,128
  802968:	10bfe004 	addi	r2,r2,-128
  80296c:	10000226 	beq	r2,zero,802978 <logic+0x2578>
  802970:	00800044 	movi	r2,1
  802974:	00000106 	br	80297c <logic+0x257c>
  802978:	0005883a 	mov	r2,zero
  80297c:	1007883a 	mov	r3,r2
  802980:	e0bffc17 	ldw	r2,-16(fp)
  802984:	10c03f45 	stb	r3,253(r2)
  d->_g64 = d->_g61 && d->_cg63 || d->_g62 && d->_cg65;
  802988:	e0bffc17 	ldw	r2,-16(fp)
  80298c:	10802743 	ldbu	r2,157(r2)
  802990:	10803fcc 	andi	r2,r2,255
  802994:	1080201c 	xori	r2,r2,128
  802998:	10bfe004 	addi	r2,r2,-128
  80299c:	10000626 	beq	r2,zero,8029b8 <logic+0x25b8>
  8029a0:	e0bffc17 	ldw	r2,-16(fp)
  8029a4:	10803ec3 	ldbu	r2,251(r2)
  8029a8:	10803fcc 	andi	r2,r2,255
  8029ac:	1080201c 	xori	r2,r2,128
  8029b0:	10bfe004 	addi	r2,r2,-128
  8029b4:	10000c1e 	bne	r2,zero,8029e8 <logic+0x25e8>
  8029b8:	e0bffc17 	ldw	r2,-16(fp)
  8029bc:	10802783 	ldbu	r2,158(r2)
  8029c0:	10803fcc 	andi	r2,r2,255
  8029c4:	1080201c 	xori	r2,r2,128
  8029c8:	10bfe004 	addi	r2,r2,-128
  8029cc:	10000826 	beq	r2,zero,8029f0 <logic+0x25f0>
  8029d0:	e0bffc17 	ldw	r2,-16(fp)
  8029d4:	10803f43 	ldbu	r2,253(r2)
  8029d8:	10803fcc 	andi	r2,r2,255
  8029dc:	1080201c 	xori	r2,r2,128
  8029e0:	10bfe004 	addi	r2,r2,-128
  8029e4:	10000226 	beq	r2,zero,8029f0 <logic+0x25f0>
  8029e8:	00800044 	movi	r2,1
  8029ec:	00000106 	br	8029f4 <logic+0x25f4>
  8029f0:	0005883a 	mov	r2,zero
  8029f4:	1007883a 	mov	r3,r2
  8029f8:	e0bffc17 	ldw	r2,-16(fp)
  8029fc:	10c02805 	stb	r3,160(r2)
  d->_g71 = !d->_g40;
  802a00:	e0bffc17 	ldw	r2,-16(fp)
  802a04:	108023c3 	ldbu	r2,143(r2)
  802a08:	10803fcc 	andi	r2,r2,255
  802a0c:	1080201c 	xori	r2,r2,128
  802a10:	10bfe004 	addi	r2,r2,-128
  802a14:	1005003a 	cmpeq	r2,r2,zero
  802a18:	1007883a 	mov	r3,r2
  802a1c:	e0bffc17 	ldw	r2,-16(fp)
  802a20:	10c02905 	stb	r3,164(r2)
  d->_g75 = d->_g37 || d->_g29;
  802a24:	e0bffc17 	ldw	r2,-16(fp)
  802a28:	10802343 	ldbu	r2,141(r2)
  802a2c:	10803fcc 	andi	r2,r2,255
  802a30:	1080201c 	xori	r2,r2,128
  802a34:	10bfe004 	addi	r2,r2,-128
  802a38:	1000061e 	bne	r2,zero,802a54 <logic+0x2654>
  802a3c:	e0bffc17 	ldw	r2,-16(fp)
  802a40:	108021c3 	ldbu	r2,135(r2)
  802a44:	10803fcc 	andi	r2,r2,255
  802a48:	1080201c 	xori	r2,r2,128
  802a4c:	10bfe004 	addi	r2,r2,-128
  802a50:	10000226 	beq	r2,zero,802a5c <logic+0x265c>
  802a54:	00800044 	movi	r2,1
  802a58:	00000106 	br	802a60 <logic+0x2660>
  802a5c:	0005883a 	mov	r2,zero
  802a60:	1007883a 	mov	r3,r2
  802a64:	e0bffc17 	ldw	r2,-16(fp)
  802a68:	10c02a05 	stb	r3,168(r2)
  d->_g72 = (d->_g31 || d->_g64) && (d->_g71 || d->_g75) && (d->_g64 || d->_g75);
  802a6c:	e0bffc17 	ldw	r2,-16(fp)
  802a70:	10802203 	ldbu	r2,136(r2)
  802a74:	10803fcc 	andi	r2,r2,255
  802a78:	1080201c 	xori	r2,r2,128
  802a7c:	10bfe004 	addi	r2,r2,-128
  802a80:	1000061e 	bne	r2,zero,802a9c <logic+0x269c>
  802a84:	e0bffc17 	ldw	r2,-16(fp)
  802a88:	10802803 	ldbu	r2,160(r2)
  802a8c:	10803fcc 	andi	r2,r2,255
  802a90:	1080201c 	xori	r2,r2,128
  802a94:	10bfe004 	addi	r2,r2,-128
  802a98:	10001a26 	beq	r2,zero,802b04 <logic+0x2704>
  802a9c:	e0bffc17 	ldw	r2,-16(fp)
  802aa0:	10802903 	ldbu	r2,164(r2)
  802aa4:	10803fcc 	andi	r2,r2,255
  802aa8:	1080201c 	xori	r2,r2,128
  802aac:	10bfe004 	addi	r2,r2,-128
  802ab0:	1000061e 	bne	r2,zero,802acc <logic+0x26cc>
  802ab4:	e0bffc17 	ldw	r2,-16(fp)
  802ab8:	10802a03 	ldbu	r2,168(r2)
  802abc:	10803fcc 	andi	r2,r2,255
  802ac0:	1080201c 	xori	r2,r2,128
  802ac4:	10bfe004 	addi	r2,r2,-128
  802ac8:	10000e26 	beq	r2,zero,802b04 <logic+0x2704>
  802acc:	e0bffc17 	ldw	r2,-16(fp)
  802ad0:	10802803 	ldbu	r2,160(r2)
  802ad4:	10803fcc 	andi	r2,r2,255
  802ad8:	1080201c 	xori	r2,r2,128
  802adc:	10bfe004 	addi	r2,r2,-128
  802ae0:	1000061e 	bne	r2,zero,802afc <logic+0x26fc>
  802ae4:	e0bffc17 	ldw	r2,-16(fp)
  802ae8:	10802a03 	ldbu	r2,168(r2)
  802aec:	10803fcc 	andi	r2,r2,255
  802af0:	1080201c 	xori	r2,r2,128
  802af4:	10bfe004 	addi	r2,r2,-128
  802af8:	10000226 	beq	r2,zero,802b04 <logic+0x2704>
  802afc:	00800044 	movi	r2,1
  802b00:	00000106 	br	802b08 <logic+0x2708>
  802b04:	0005883a 	mov	r2,zero
  802b08:	1007883a 	mov	r3,r2
  802b0c:	e0bffc17 	ldw	r2,-16(fp)
  802b10:	10c02945 	stb	r3,165(r2)
  d->_cg76 = d->_Pacemaker_local__Atrig4;
  802b14:	e0bffc17 	ldw	r2,-16(fp)
  802b18:	10c01b03 	ldbu	r3,108(r2)
  802b1c:	e0bffc17 	ldw	r2,-16(fp)
  802b20:	10c03dc5 	stb	r3,247(r2)
  d->_g64_e1 = d->_GO || d->_g72 && !d->_cg76 || d->_g55 && !d->_cg55;
  802b24:	e0bffc17 	ldw	r2,-16(fp)
  802b28:	10803903 	ldbu	r2,228(r2)
  802b2c:	10803fcc 	andi	r2,r2,255
  802b30:	1080201c 	xori	r2,r2,128
  802b34:	10bfe004 	addi	r2,r2,-128
  802b38:	1000181e 	bne	r2,zero,802b9c <logic+0x279c>
  802b3c:	e0bffc17 	ldw	r2,-16(fp)
  802b40:	10802943 	ldbu	r2,165(r2)
  802b44:	10803fcc 	andi	r2,r2,255
  802b48:	1080201c 	xori	r2,r2,128
  802b4c:	10bfe004 	addi	r2,r2,-128
  802b50:	10000626 	beq	r2,zero,802b6c <logic+0x276c>
  802b54:	e0bffc17 	ldw	r2,-16(fp)
  802b58:	10803dc3 	ldbu	r2,247(r2)
  802b5c:	10803fcc 	andi	r2,r2,255
  802b60:	1080201c 	xori	r2,r2,128
  802b64:	10bfe004 	addi	r2,r2,-128
  802b68:	10000c26 	beq	r2,zero,802b9c <logic+0x279c>
  802b6c:	e0bffc17 	ldw	r2,-16(fp)
  802b70:	10802643 	ldbu	r2,153(r2)
  802b74:	10803fcc 	andi	r2,r2,255
  802b78:	1080201c 	xori	r2,r2,128
  802b7c:	10bfe004 	addi	r2,r2,-128
  802b80:	10000826 	beq	r2,zero,802ba4 <logic+0x27a4>
  802b84:	e0bffc17 	ldw	r2,-16(fp)
  802b88:	10803e03 	ldbu	r2,248(r2)
  802b8c:	10803fcc 	andi	r2,r2,255
  802b90:	1080201c 	xori	r2,r2,128
  802b94:	10bfe004 	addi	r2,r2,-128
  802b98:	1000021e 	bne	r2,zero,802ba4 <logic+0x27a4>
  802b9c:	00800044 	movi	r2,1
  802ba0:	00000106 	br	802ba8 <logic+0x27a8>
  802ba4:	0005883a 	mov	r2,zero
  802ba8:	1007883a 	mov	r3,r2
  802bac:	e0bffc17 	ldw	r2,-16(fp)
  802bb0:	10c04805 	stb	r3,288(r2)
  d->_g73 = d->_g72 && d->_cg76;
  802bb4:	e0bffc17 	ldw	r2,-16(fp)
  802bb8:	10802943 	ldbu	r2,165(r2)
  802bbc:	10803fcc 	andi	r2,r2,255
  802bc0:	1080201c 	xori	r2,r2,128
  802bc4:	10bfe004 	addi	r2,r2,-128
  802bc8:	10000826 	beq	r2,zero,802bec <logic+0x27ec>
  802bcc:	e0bffc17 	ldw	r2,-16(fp)
  802bd0:	10803dc3 	ldbu	r2,247(r2)
  802bd4:	10803fcc 	andi	r2,r2,255
  802bd8:	1080201c 	xori	r2,r2,128
  802bdc:	10bfe004 	addi	r2,r2,-128
  802be0:	10000226 	beq	r2,zero,802bec <logic+0x27ec>
  802be4:	00800044 	movi	r2,1
  802be8:	00000106 	br	802bf0 <logic+0x27f0>
  802bec:	0005883a 	mov	r2,zero
  802bf0:	1007883a 	mov	r3,r2
  802bf4:	e0bffc17 	ldw	r2,-16(fp)
  802bf8:	10c02985 	stb	r3,166(r2)
  if (d->_g73) {
  802bfc:	e0bffc17 	ldw	r2,-16(fp)
  802c00:	10802983 	ldbu	r2,166(r2)
  802c04:	10803fcc 	andi	r2,r2,255
  802c08:	1080201c 	xori	r2,r2,128
  802c0c:	10bfe004 	addi	r2,r2,-128
  802c10:	10000626 	beq	r2,zero,802c2c <logic+0x282c>
    d->VR |= 1;
  802c14:	e0bffc17 	ldw	r2,-16(fp)
  802c18:	10801843 	ldbu	r2,97(r2)
  802c1c:	10800054 	ori	r2,r2,1
  802c20:	1007883a 	mov	r3,r2
  802c24:	e0bffc17 	ldw	r2,-16(fp)
  802c28:	10c01845 	stb	r3,97(r2)
  }
  d->_g64 = d->_g56 || d->_g73;
  802c2c:	e0bffc17 	ldw	r2,-16(fp)
  802c30:	10802683 	ldbu	r2,154(r2)
  802c34:	10803fcc 	andi	r2,r2,255
  802c38:	1080201c 	xori	r2,r2,128
  802c3c:	10bfe004 	addi	r2,r2,-128
  802c40:	1000061e 	bne	r2,zero,802c5c <logic+0x285c>
  802c44:	e0bffc17 	ldw	r2,-16(fp)
  802c48:	10802983 	ldbu	r2,166(r2)
  802c4c:	10803fcc 	andi	r2,r2,255
  802c50:	1080201c 	xori	r2,r2,128
  802c54:	10bfe004 	addi	r2,r2,-128
  802c58:	10000226 	beq	r2,zero,802c64 <logic+0x2864>
  802c5c:	00800044 	movi	r2,1
  802c60:	00000106 	br	802c68 <logic+0x2868>
  802c64:	0005883a 	mov	r2,zero
  802c68:	1007883a 	mov	r3,r2
  802c6c:	e0bffc17 	ldw	r2,-16(fp)
  802c70:	10c02805 	stb	r3,160(r2)
  if (d->_g64) {
  802c74:	e0bffc17 	ldw	r2,-16(fp)
  802c78:	10802803 	ldbu	r2,160(r2)
  802c7c:	10803fcc 	andi	r2,r2,255
  802c80:	1080201c 	xori	r2,r2,128
  802c84:	10bfe004 	addi	r2,r2,-128
  802c88:	10000426 	beq	r2,zero,802c9c <logic+0x289c>
    d->_Pacemaker_local__Atrig4 = 0;
  802c8c:	e0bffc17 	ldw	r2,-16(fp)
  802c90:	10001b05 	stb	zero,108(r2)
    d->_Pacemaker_local__Atrig5 = 0;
  802c94:	e0bffc17 	ldw	r2,-16(fp)
  802c98:	10001b45 	stb	zero,109(r2)
  }
  d->_cg58 = d->_region2_VRP_timer_t < d->VRP_Constraint;
  802c9c:	e0bffc17 	ldw	r2,-16(fp)
  802ca0:	14000b17 	ldw	r16,44(r2)
  802ca4:	14400c17 	ldw	r17,48(r2)
  802ca8:	e0bffc17 	ldw	r2,-16(fp)
  802cac:	10800317 	ldw	r2,12(r2)
  802cb0:	1009883a 	mov	r4,r2
  802cb4:	08064e40 	call	8064e4 <__floatsidf>
  802cb8:	1009883a 	mov	r4,r2
  802cbc:	180b883a 	mov	r5,r3
  802cc0:	04800044 	movi	r18,1
  802cc4:	200d883a 	mov	r6,r4
  802cc8:	280f883a 	mov	r7,r5
  802ccc:	8009883a 	mov	r4,r16
  802cd0:	880b883a 	mov	r5,r17
  802cd4:	0805af40 	call	805af4 <__ledf2>
  802cd8:	10000116 	blt	r2,zero,802ce0 <logic+0x28e0>
  802cdc:	0025883a 	mov	r18,zero
  802ce0:	9007883a 	mov	r3,r18
  802ce4:	e0bffc17 	ldw	r2,-16(fp)
  802ce8:	10c03e45 	stb	r3,249(r2)
  d->_g73_e2 = d->_g64 && d->_cg58;
  802cec:	e0bffc17 	ldw	r2,-16(fp)
  802cf0:	10802803 	ldbu	r2,160(r2)
  802cf4:	10803fcc 	andi	r2,r2,255
  802cf8:	1080201c 	xori	r2,r2,128
  802cfc:	10bfe004 	addi	r2,r2,-128
  802d00:	10000826 	beq	r2,zero,802d24 <logic+0x2924>
  802d04:	e0bffc17 	ldw	r2,-16(fp)
  802d08:	10803e43 	ldbu	r2,249(r2)
  802d0c:	10803fcc 	andi	r2,r2,255
  802d10:	1080201c 	xori	r2,r2,128
  802d14:	10bfe004 	addi	r2,r2,-128
  802d18:	10000226 	beq	r2,zero,802d24 <logic+0x2924>
  802d1c:	00800044 	movi	r2,1
  802d20:	00000106 	br	802d28 <logic+0x2928>
  802d24:	0005883a 	mov	r2,zero
  802d28:	1007883a 	mov	r3,r2
  802d2c:	e0bffc17 	ldw	r2,-16(fp)
  802d30:	10c04845 	stb	r3,289(r2)
  if (d->_g73_e2) {
  802d34:	e0bffc17 	ldw	r2,-16(fp)
  802d38:	10804843 	ldbu	r2,289(r2)
  802d3c:	10803fcc 	andi	r2,r2,255
  802d40:	1080201c 	xori	r2,r2,128
  802d44:	10bfe004 	addi	r2,r2,-128
  802d48:	10003426 	beq	r2,zero,802e1c <logic+0x2a1c>
    d->sleepT = (d->sleepT < (d->VRP_Constraint - d->_region2_VRP_timer_t)) ? d->sleepT : (d->VRP_Constraint - d->_region2_VRP_timer_t);
  802d4c:	e0bffc17 	ldw	r2,-16(fp)
  802d50:	14001517 	ldw	r16,84(r2)
  802d54:	14401617 	ldw	r17,88(r2)
  802d58:	e0bffc17 	ldw	r2,-16(fp)
  802d5c:	10800317 	ldw	r2,12(r2)
  802d60:	1009883a 	mov	r4,r2
  802d64:	08064e40 	call	8064e4 <__floatsidf>
  802d68:	1011883a 	mov	r8,r2
  802d6c:	1813883a 	mov	r9,r3
  802d70:	e13ffc17 	ldw	r4,-16(fp)
  802d74:	20800b17 	ldw	r2,44(r4)
  802d78:	20c00c17 	ldw	r3,48(r4)
  802d7c:	100d883a 	mov	r6,r2
  802d80:	180f883a 	mov	r7,r3
  802d84:	4009883a 	mov	r4,r8
  802d88:	480b883a 	mov	r5,r9
  802d8c:	0805be80 	call	805be8 <__subdf3>
  802d90:	1009883a 	mov	r4,r2
  802d94:	180b883a 	mov	r5,r3
  802d98:	2005883a 	mov	r2,r4
  802d9c:	2807883a 	mov	r3,r5
  802da0:	100d883a 	mov	r6,r2
  802da4:	180f883a 	mov	r7,r3
  802da8:	8009883a 	mov	r4,r16
  802dac:	880b883a 	mov	r5,r17
  802db0:	0805af40 	call	805af4 <__ledf2>
  802db4:	1000040e 	bge	r2,zero,802dc8 <logic+0x29c8>
  802db8:	e13ffc17 	ldw	r4,-16(fp)
  802dbc:	20801517 	ldw	r2,84(r4)
  802dc0:	20c01617 	ldw	r3,88(r4)
  802dc4:	00001206 	br	802e10 <logic+0x2a10>
  802dc8:	e0bffc17 	ldw	r2,-16(fp)
  802dcc:	10800317 	ldw	r2,12(r2)
  802dd0:	1009883a 	mov	r4,r2
  802dd4:	08064e40 	call	8064e4 <__floatsidf>
  802dd8:	1011883a 	mov	r8,r2
  802ddc:	1813883a 	mov	r9,r3
  802de0:	e13ffc17 	ldw	r4,-16(fp)
  802de4:	20800b17 	ldw	r2,44(r4)
  802de8:	20c00c17 	ldw	r3,48(r4)
  802dec:	100d883a 	mov	r6,r2
  802df0:	180f883a 	mov	r7,r3
  802df4:	4009883a 	mov	r4,r8
  802df8:	480b883a 	mov	r5,r9
  802dfc:	0805be80 	call	805be8 <__subdf3>
  802e00:	1009883a 	mov	r4,r2
  802e04:	180b883a 	mov	r5,r3
  802e08:	2005883a 	mov	r2,r4
  802e0c:	2807883a 	mov	r3,r5
  802e10:	e13ffc17 	ldw	r4,-16(fp)
  802e14:	20801515 	stw	r2,84(r4)
  802e18:	20c01615 	stw	r3,88(r4)
  }
  d->_cg59 = d->_Pacemaker_local__Atrig4 || d->_Pacemaker_local__Atrig5;
  802e1c:	e0bffc17 	ldw	r2,-16(fp)
  802e20:	10801b03 	ldbu	r2,108(r2)
  802e24:	10803fcc 	andi	r2,r2,255
  802e28:	1080201c 	xori	r2,r2,128
  802e2c:	10bfe004 	addi	r2,r2,-128
  802e30:	1000061e 	bne	r2,zero,802e4c <logic+0x2a4c>
  802e34:	e0bffc17 	ldw	r2,-16(fp)
  802e38:	10801b43 	ldbu	r2,109(r2)
  802e3c:	10803fcc 	andi	r2,r2,255
  802e40:	1080201c 	xori	r2,r2,128
  802e44:	10bfe004 	addi	r2,r2,-128
  802e48:	10000226 	beq	r2,zero,802e54 <logic+0x2a54>
  802e4c:	00800044 	movi	r2,1
  802e50:	00000106 	br	802e58 <logic+0x2a58>
  802e54:	0005883a 	mov	r2,zero
  802e58:	1007883a 	mov	r3,r2
  802e5c:	e0bffc17 	ldw	r2,-16(fp)
  802e60:	10c03e85 	stb	r3,250(r2)
  d->_g55 = d->_g73_e2 && !d->_cg59 || d->_g61 && !d->_cg63;
  802e64:	e0bffc17 	ldw	r2,-16(fp)
  802e68:	10804843 	ldbu	r2,289(r2)
  802e6c:	10803fcc 	andi	r2,r2,255
  802e70:	1080201c 	xori	r2,r2,128
  802e74:	10bfe004 	addi	r2,r2,-128
  802e78:	10000626 	beq	r2,zero,802e94 <logic+0x2a94>
  802e7c:	e0bffc17 	ldw	r2,-16(fp)
  802e80:	10803e83 	ldbu	r2,250(r2)
  802e84:	10803fcc 	andi	r2,r2,255
  802e88:	1080201c 	xori	r2,r2,128
  802e8c:	10bfe004 	addi	r2,r2,-128
  802e90:	10000c26 	beq	r2,zero,802ec4 <logic+0x2ac4>
  802e94:	e0bffc17 	ldw	r2,-16(fp)
  802e98:	10802743 	ldbu	r2,157(r2)
  802e9c:	10803fcc 	andi	r2,r2,255
  802ea0:	1080201c 	xori	r2,r2,128
  802ea4:	10bfe004 	addi	r2,r2,-128
  802ea8:	10000826 	beq	r2,zero,802ecc <logic+0x2acc>
  802eac:	e0bffc17 	ldw	r2,-16(fp)
  802eb0:	10803ec3 	ldbu	r2,251(r2)
  802eb4:	10803fcc 	andi	r2,r2,255
  802eb8:	1080201c 	xori	r2,r2,128
  802ebc:	10bfe004 	addi	r2,r2,-128
  802ec0:	1000021e 	bne	r2,zero,802ecc <logic+0x2acc>
  802ec4:	00800044 	movi	r2,1
  802ec8:	00000106 	br	802ed0 <logic+0x2ad0>
  802ecc:	0005883a 	mov	r2,zero
  802ed0:	1007883a 	mov	r3,r2
  802ed4:	e0bffc17 	ldw	r2,-16(fp)
  802ed8:	10c02645 	stb	r3,153(r2)
  d->_g76 = d->_g64 && !d->_cg58;
  802edc:	e0bffc17 	ldw	r2,-16(fp)
  802ee0:	10802803 	ldbu	r2,160(r2)
  802ee4:	10803fcc 	andi	r2,r2,255
  802ee8:	1080201c 	xori	r2,r2,128
  802eec:	10bfe004 	addi	r2,r2,-128
  802ef0:	10000826 	beq	r2,zero,802f14 <logic+0x2b14>
  802ef4:	e0bffc17 	ldw	r2,-16(fp)
  802ef8:	10803e43 	ldbu	r2,249(r2)
  802efc:	10803fcc 	andi	r2,r2,255
  802f00:	1080201c 	xori	r2,r2,128
  802f04:	10bfe004 	addi	r2,r2,-128
  802f08:	1000021e 	bne	r2,zero,802f14 <logic+0x2b14>
  802f0c:	00800044 	movi	r2,1
  802f10:	00000106 	br	802f18 <logic+0x2b18>
  802f14:	0005883a 	mov	r2,zero
  802f18:	1007883a 	mov	r3,r2
  802f1c:	e0bffc17 	ldw	r2,-16(fp)
  802f20:	10c02a45 	stb	r3,169(r2)
  d->_cg68 = d->_Pacemaker_local__Atrig4 || d->_Pacemaker_local__Atrig5;
  802f24:	e0bffc17 	ldw	r2,-16(fp)
  802f28:	10801b03 	ldbu	r2,108(r2)
  802f2c:	10803fcc 	andi	r2,r2,255
  802f30:	1080201c 	xori	r2,r2,128
  802f34:	10bfe004 	addi	r2,r2,-128
  802f38:	1000061e 	bne	r2,zero,802f54 <logic+0x2b54>
  802f3c:	e0bffc17 	ldw	r2,-16(fp)
  802f40:	10801b43 	ldbu	r2,109(r2)
  802f44:	10803fcc 	andi	r2,r2,255
  802f48:	1080201c 	xori	r2,r2,128
  802f4c:	10bfe004 	addi	r2,r2,-128
  802f50:	10000226 	beq	r2,zero,802f5c <logic+0x2b5c>
  802f54:	00800044 	movi	r2,1
  802f58:	00000106 	br	802f60 <logic+0x2b60>
  802f5c:	0005883a 	mov	r2,zero
  802f60:	1007883a 	mov	r3,r2
  802f64:	e0bffc17 	ldw	r2,-16(fp)
  802f68:	10c03f85 	stb	r3,254(r2)
  d->_g77 = d->_g62 && !d->_cg65 || d->_g76 && !d->_cg68;
  802f6c:	e0bffc17 	ldw	r2,-16(fp)
  802f70:	10802783 	ldbu	r2,158(r2)
  802f74:	10803fcc 	andi	r2,r2,255
  802f78:	1080201c 	xori	r2,r2,128
  802f7c:	10bfe004 	addi	r2,r2,-128
  802f80:	10000626 	beq	r2,zero,802f9c <logic+0x2b9c>
  802f84:	e0bffc17 	ldw	r2,-16(fp)
  802f88:	10803f43 	ldbu	r2,253(r2)
  802f8c:	10803fcc 	andi	r2,r2,255
  802f90:	1080201c 	xori	r2,r2,128
  802f94:	10bfe004 	addi	r2,r2,-128
  802f98:	10000c26 	beq	r2,zero,802fcc <logic+0x2bcc>
  802f9c:	e0bffc17 	ldw	r2,-16(fp)
  802fa0:	10802a43 	ldbu	r2,169(r2)
  802fa4:	10803fcc 	andi	r2,r2,255
  802fa8:	1080201c 	xori	r2,r2,128
  802fac:	10bfe004 	addi	r2,r2,-128
  802fb0:	10000826 	beq	r2,zero,802fd4 <logic+0x2bd4>
  802fb4:	e0bffc17 	ldw	r2,-16(fp)
  802fb8:	10803f83 	ldbu	r2,254(r2)
  802fbc:	10803fcc 	andi	r2,r2,255
  802fc0:	1080201c 	xori	r2,r2,128
  802fc4:	10bfe004 	addi	r2,r2,-128
  802fc8:	1000021e 	bne	r2,zero,802fd4 <logic+0x2bd4>
  802fcc:	00800044 	movi	r2,1
  802fd0:	00000106 	br	802fd8 <logic+0x2bd8>
  802fd4:	0005883a 	mov	r2,zero
  802fd8:	1007883a 	mov	r3,r2
  802fdc:	e0bffc17 	ldw	r2,-16(fp)
  802fe0:	10c02a85 	stb	r3,170(r2)
  d->_g56 = d->_g64 || d->_g46 && !d->_cg74;
  802fe4:	e0bffc17 	ldw	r2,-16(fp)
  802fe8:	10802803 	ldbu	r2,160(r2)
  802fec:	10803fcc 	andi	r2,r2,255
  802ff0:	1080201c 	xori	r2,r2,128
  802ff4:	10bfe004 	addi	r2,r2,-128
  802ff8:	10000c1e 	bne	r2,zero,80302c <logic+0x2c2c>
  802ffc:	e0bffc17 	ldw	r2,-16(fp)
  803000:	108024c3 	ldbu	r2,147(r2)
  803004:	10803fcc 	andi	r2,r2,255
  803008:	1080201c 	xori	r2,r2,128
  80300c:	10bfe004 	addi	r2,r2,-128
  803010:	10000826 	beq	r2,zero,803034 <logic+0x2c34>
  803014:	e0bffc17 	ldw	r2,-16(fp)
  803018:	10803fc3 	ldbu	r2,255(r2)
  80301c:	10803fcc 	andi	r2,r2,255
  803020:	1080201c 	xori	r2,r2,128
  803024:	10bfe004 	addi	r2,r2,-128
  803028:	1000021e 	bne	r2,zero,803034 <logic+0x2c34>
  80302c:	00800044 	movi	r2,1
  803030:	00000106 	br	803038 <logic+0x2c38>
  803034:	0005883a 	mov	r2,zero
  803038:	1007883a 	mov	r3,r2
  80303c:	e0bffc17 	ldw	r2,-16(fp)
  803040:	10c02685 	stb	r3,154(r2)
  d->_g59 = d->_pg85;
  803044:	e0bffc17 	ldw	r2,-16(fp)
  803048:	10c04f83 	ldbu	r3,318(r2)
  80304c:	e0bffc17 	ldw	r2,-16(fp)
  803050:	10c02705 	stb	r3,156(r2)
  d->_cg94 = d->A_event;
  803054:	e0bffc17 	ldw	r2,-16(fp)
  803058:	10c01883 	ldbu	r3,98(r2)
  80305c:	e0bffc17 	ldw	r2,-16(fp)
  803060:	10c041c5 	stb	r3,263(r2)
  d->_g63 = d->_g59 && d->_cg94;
  803064:	e0bffc17 	ldw	r2,-16(fp)
  803068:	10802703 	ldbu	r2,156(r2)
  80306c:	10803fcc 	andi	r2,r2,255
  803070:	1080201c 	xori	r2,r2,128
  803074:	10bfe004 	addi	r2,r2,-128
  803078:	10000826 	beq	r2,zero,80309c <logic+0x2c9c>
  80307c:	e0bffc17 	ldw	r2,-16(fp)
  803080:	108041c3 	ldbu	r2,263(r2)
  803084:	10803fcc 	andi	r2,r2,255
  803088:	1080201c 	xori	r2,r2,128
  80308c:	10bfe004 	addi	r2,r2,-128
  803090:	10000226 	beq	r2,zero,80309c <logic+0x2c9c>
  803094:	00800044 	movi	r2,1
  803098:	00000106 	br	8030a0 <logic+0x2ca0>
  80309c:	0005883a 	mov	r2,zero
  8030a0:	1007883a 	mov	r3,r2
  8030a4:	e0bffc17 	ldw	r2,-16(fp)
  8030a8:	10c027c5 	stb	r3,159(r2)
  if (d->_g63) {
  8030ac:	e0bffc17 	ldw	r2,-16(fp)
  8030b0:	108027c3 	ldbu	r2,159(r2)
  8030b4:	10803fcc 	andi	r2,r2,255
  8030b8:	1080201c 	xori	r2,r2,128
  8030bc:	10bfe004 	addi	r2,r2,-128
  8030c0:	10000326 	beq	r2,zero,8030d0 <logic+0x2cd0>
    d->_Pacemaker_local__Atrig6 = 1;
  8030c4:	e0bffc17 	ldw	r2,-16(fp)
  8030c8:	00c00044 	movi	r3,1
  8030cc:	10c01b85 	stb	r3,110(r2)
  }
  d->_g68 = d->_pg141;
  8030d0:	e0bffc17 	ldw	r2,-16(fp)
  8030d4:	10c04fc3 	ldbu	r3,319(r2)
  8030d8:	e0bffc17 	ldw	r2,-16(fp)
  8030dc:	10c028c5 	stb	r3,163(r2)
  if (d->_g68) {
  8030e0:	e0bffc17 	ldw	r2,-16(fp)
  8030e4:	108028c3 	ldbu	r2,163(r2)
  8030e8:	10803fcc 	andi	r2,r2,255
  8030ec:	1080201c 	xori	r2,r2,128
  8030f0:	10bfe004 	addi	r2,r2,-128
  8030f4:	10001226 	beq	r2,zero,803140 <logic+0x2d40>
    d->_region3_AEI_timer_t += d->deltaT;
  8030f8:	e13ffc17 	ldw	r4,-16(fp)
  8030fc:	20800d17 	ldw	r2,52(r4)
  803100:	20c00e17 	ldw	r3,56(r4)
  803104:	e1bffc17 	ldw	r6,-16(fp)
  803108:	31001317 	ldw	r4,76(r6)
  80310c:	31401417 	ldw	r5,80(r6)
  803110:	200d883a 	mov	r6,r4
  803114:	280f883a 	mov	r7,r5
  803118:	1009883a 	mov	r4,r2
  80311c:	180b883a 	mov	r5,r3
  803120:	080516c0 	call	80516c <__adddf3>
  803124:	1009883a 	mov	r4,r2
  803128:	180b883a 	mov	r5,r3
  80312c:	2005883a 	mov	r2,r4
  803130:	2807883a 	mov	r3,r5
  803134:	e13ffc17 	ldw	r4,-16(fp)
  803138:	20800d15 	stw	r2,52(r4)
  80313c:	20c00e15 	stw	r3,56(r4)
  }
  d->_g65 = d->_g59 && !d->_cg94;
  803140:	e0bffc17 	ldw	r2,-16(fp)
  803144:	10802703 	ldbu	r2,156(r2)
  803148:	10803fcc 	andi	r2,r2,255
  80314c:	1080201c 	xori	r2,r2,128
  803150:	10bfe004 	addi	r2,r2,-128
  803154:	10000826 	beq	r2,zero,803178 <logic+0x2d78>
  803158:	e0bffc17 	ldw	r2,-16(fp)
  80315c:	108041c3 	ldbu	r2,263(r2)
  803160:	10803fcc 	andi	r2,r2,255
  803164:	1080201c 	xori	r2,r2,128
  803168:	10bfe004 	addi	r2,r2,-128
  80316c:	1000021e 	bne	r2,zero,803178 <logic+0x2d78>
  803170:	00800044 	movi	r2,1
  803174:	00000106 	br	80317c <logic+0x2d7c>
  803178:	0005883a 	mov	r2,zero
  80317c:	1007883a 	mov	r3,r2
  803180:	e0bffc17 	ldw	r2,-16(fp)
  803184:	10c02845 	stb	r3,161(r2)
  d->_cg97 = d->_region3_AEI_timer_t >= d->AEI_Constraint;
  803188:	e0bffc17 	ldw	r2,-16(fp)
  80318c:	14000d17 	ldw	r16,52(r2)
  803190:	14400e17 	ldw	r17,56(r2)
  803194:	e0bffc17 	ldw	r2,-16(fp)
  803198:	10800417 	ldw	r2,16(r2)
  80319c:	1009883a 	mov	r4,r2
  8031a0:	08064e40 	call	8064e4 <__floatsidf>
  8031a4:	1009883a 	mov	r4,r2
  8031a8:	180b883a 	mov	r5,r3
  8031ac:	04800044 	movi	r18,1
  8031b0:	200d883a 	mov	r6,r4
  8031b4:	280f883a 	mov	r7,r5
  8031b8:	8009883a 	mov	r4,r16
  8031bc:	880b883a 	mov	r5,r17
  8031c0:	0805a180 	call	805a18 <__gedf2>
  8031c4:	1000010e 	bge	r2,zero,8031cc <logic+0x2dcc>
  8031c8:	0025883a 	mov	r18,zero
  8031cc:	9007883a 	mov	r3,r18
  8031d0:	e0bffc17 	ldw	r2,-16(fp)
  8031d4:	10c04185 	stb	r3,262(r2)
  d->_g74 = d->_g65 && d->_cg97;
  8031d8:	e0bffc17 	ldw	r2,-16(fp)
  8031dc:	10802843 	ldbu	r2,161(r2)
  8031e0:	10803fcc 	andi	r2,r2,255
  8031e4:	1080201c 	xori	r2,r2,128
  8031e8:	10bfe004 	addi	r2,r2,-128
  8031ec:	10000826 	beq	r2,zero,803210 <logic+0x2e10>
  8031f0:	e0bffc17 	ldw	r2,-16(fp)
  8031f4:	10804183 	ldbu	r2,262(r2)
  8031f8:	10803fcc 	andi	r2,r2,255
  8031fc:	1080201c 	xori	r2,r2,128
  803200:	10bfe004 	addi	r2,r2,-128
  803204:	10000226 	beq	r2,zero,803210 <logic+0x2e10>
  803208:	00800044 	movi	r2,1
  80320c:	00000106 	br	803214 <logic+0x2e14>
  803210:	0005883a 	mov	r2,zero
  803214:	1007883a 	mov	r3,r2
  803218:	e0bffc17 	ldw	r2,-16(fp)
  80321c:	10c029c5 	stb	r3,167(r2)
  if (d->_g74) {
  803220:	e0bffc17 	ldw	r2,-16(fp)
  803224:	108029c3 	ldbu	r2,167(r2)
  803228:	10803fcc 	andi	r2,r2,255
  80322c:	1080201c 	xori	r2,r2,128
  803230:	10bfe004 	addi	r2,r2,-128
  803234:	10000326 	beq	r2,zero,803244 <logic+0x2e44>
    d->_Pacemaker_local__Atrig7 = 1;
  803238:	e0bffc17 	ldw	r2,-16(fp)
  80323c:	00c00044 	movi	r3,1
  803240:	10c01bc5 	stb	r3,111(r2)
  }
  d->_g57 = d->_pg96;
  803244:	e0bffc17 	ldw	r2,-16(fp)
  803248:	10c05003 	ldbu	r3,320(r2)
  80324c:	e0bffc17 	ldw	r2,-16(fp)
  803250:	10c026c5 	stb	r3,155(r2)
  d->_cg81 = d->V_event;
  803254:	e0bffc17 	ldw	r2,-16(fp)
  803258:	10c01803 	ldbu	r3,96(r2)
  80325c:	e0bffc17 	ldw	r2,-16(fp)
  803260:	10c04085 	stb	r3,258(r2)
  d->_g94 = d->_g57 && d->_cg81;
  803264:	e0bffc17 	ldw	r2,-16(fp)
  803268:	108026c3 	ldbu	r2,155(r2)
  80326c:	10803fcc 	andi	r2,r2,255
  803270:	1080201c 	xori	r2,r2,128
  803274:	10bfe004 	addi	r2,r2,-128
  803278:	10000826 	beq	r2,zero,80329c <logic+0x2e9c>
  80327c:	e0bffc17 	ldw	r2,-16(fp)
  803280:	10804083 	ldbu	r2,258(r2)
  803284:	10803fcc 	andi	r2,r2,255
  803288:	1080201c 	xori	r2,r2,128
  80328c:	10bfe004 	addi	r2,r2,-128
  803290:	10000226 	beq	r2,zero,80329c <logic+0x2e9c>
  803294:	00800044 	movi	r2,1
  803298:	00000106 	br	8032a0 <logic+0x2ea0>
  80329c:	0005883a 	mov	r2,zero
  8032a0:	1007883a 	mov	r3,r2
  8032a4:	e0bffc17 	ldw	r2,-16(fp)
  8032a8:	10c02d45 	stb	r3,181(r2)
  if (d->_g94) {
  8032ac:	e0bffc17 	ldw	r2,-16(fp)
  8032b0:	10802d43 	ldbu	r2,181(r2)
  8032b4:	10803fcc 	andi	r2,r2,255
  8032b8:	1080201c 	xori	r2,r2,128
  8032bc:	10bfe004 	addi	r2,r2,-128
  8032c0:	10000726 	beq	r2,zero,8032e0 <logic+0x2ee0>
    d->_region3_AEI_timer_t = 0;
  8032c4:	e0bffc17 	ldw	r2,-16(fp)
  8032c8:	10000d15 	stw	zero,52(r2)
  8032cc:	10000e15 	stw	zero,56(r2)
    d->_Pacemaker_local__Atrig6 = 0;
  8032d0:	e0bffc17 	ldw	r2,-16(fp)
  8032d4:	10001b85 	stb	zero,110(r2)
    d->_Pacemaker_local__Atrig7 = 0;
  8032d8:	e0bffc17 	ldw	r2,-16(fp)
  8032dc:	10001bc5 	stb	zero,111(r2)
  }
  d->_g88 = d->_pg87;
  8032e0:	e0bffc17 	ldw	r2,-16(fp)
  8032e4:	10c05043 	ldbu	r3,321(r2)
  8032e8:	e0bffc17 	ldw	r2,-16(fp)
  8032ec:	10c02c45 	stb	r3,177(r2)
  d->_g91 = d->_pg90;
  8032f0:	e0bffc17 	ldw	r2,-16(fp)
  8032f4:	10c05083 	ldbu	r3,322(r2)
  8032f8:	e0bffc17 	ldw	r2,-16(fp)
  8032fc:	10c02d05 	stb	r3,180(r2)
  d->_g91 = d->_g94 || d->_g88 || d->_g91;
  803300:	e0bffc17 	ldw	r2,-16(fp)
  803304:	10802d43 	ldbu	r2,181(r2)
  803308:	10803fcc 	andi	r2,r2,255
  80330c:	1080201c 	xori	r2,r2,128
  803310:	10bfe004 	addi	r2,r2,-128
  803314:	10000c1e 	bne	r2,zero,803348 <logic+0x2f48>
  803318:	e0bffc17 	ldw	r2,-16(fp)
  80331c:	10802c43 	ldbu	r2,177(r2)
  803320:	10803fcc 	andi	r2,r2,255
  803324:	1080201c 	xori	r2,r2,128
  803328:	10bfe004 	addi	r2,r2,-128
  80332c:	1000061e 	bne	r2,zero,803348 <logic+0x2f48>
  803330:	e0bffc17 	ldw	r2,-16(fp)
  803334:	10802d03 	ldbu	r2,180(r2)
  803338:	10803fcc 	andi	r2,r2,255
  80333c:	1080201c 	xori	r2,r2,128
  803340:	10bfe004 	addi	r2,r2,-128
  803344:	10000226 	beq	r2,zero,803350 <logic+0x2f50>
  803348:	00800044 	movi	r2,1
  80334c:	00000106 	br	803354 <logic+0x2f54>
  803350:	0005883a 	mov	r2,zero
  803354:	1007883a 	mov	r3,r2
  803358:	e0bffc17 	ldw	r2,-16(fp)
  80335c:	10c02d05 	stb	r3,180(r2)
  d->_cg84 = d->_region3_AEI_timer_t < d->AEI_Constraint;
  803360:	e0bffc17 	ldw	r2,-16(fp)
  803364:	14000d17 	ldw	r16,52(r2)
  803368:	14400e17 	ldw	r17,56(r2)
  80336c:	e0bffc17 	ldw	r2,-16(fp)
  803370:	10800417 	ldw	r2,16(r2)
  803374:	1009883a 	mov	r4,r2
  803378:	08064e40 	call	8064e4 <__floatsidf>
  80337c:	1009883a 	mov	r4,r2
  803380:	180b883a 	mov	r5,r3
  803384:	04800044 	movi	r18,1
  803388:	200d883a 	mov	r6,r4
  80338c:	280f883a 	mov	r7,r5
  803390:	8009883a 	mov	r4,r16
  803394:	880b883a 	mov	r5,r17
  803398:	0805af40 	call	805af4 <__ledf2>
  80339c:	10000116 	blt	r2,zero,8033a4 <logic+0x2fa4>
  8033a0:	0025883a 	mov	r18,zero
  8033a4:	9007883a 	mov	r3,r18
  8033a8:	e0bffc17 	ldw	r2,-16(fp)
  8033ac:	10c040c5 	stb	r3,259(r2)
  d->_g88 = d->_g91 && !d->_cg84;
  8033b0:	e0bffc17 	ldw	r2,-16(fp)
  8033b4:	10802d03 	ldbu	r2,180(r2)
  8033b8:	10803fcc 	andi	r2,r2,255
  8033bc:	1080201c 	xori	r2,r2,128
  8033c0:	10bfe004 	addi	r2,r2,-128
  8033c4:	10000826 	beq	r2,zero,8033e8 <logic+0x2fe8>
  8033c8:	e0bffc17 	ldw	r2,-16(fp)
  8033cc:	108040c3 	ldbu	r2,259(r2)
  8033d0:	10803fcc 	andi	r2,r2,255
  8033d4:	1080201c 	xori	r2,r2,128
  8033d8:	10bfe004 	addi	r2,r2,-128
  8033dc:	1000021e 	bne	r2,zero,8033e8 <logic+0x2fe8>
  8033e0:	00800044 	movi	r2,1
  8033e4:	00000106 	br	8033ec <logic+0x2fec>
  8033e8:	0005883a 	mov	r2,zero
  8033ec:	1007883a 	mov	r3,r2
  8033f0:	e0bffc17 	ldw	r2,-16(fp)
  8033f4:	10c02c45 	stb	r3,177(r2)
  d->_cg89 = d->_Pacemaker_local__Atrig6 || d->_Pacemaker_local__Atrig7;
  8033f8:	e0bffc17 	ldw	r2,-16(fp)
  8033fc:	10801b83 	ldbu	r2,110(r2)
  803400:	10803fcc 	andi	r2,r2,255
  803404:	1080201c 	xori	r2,r2,128
  803408:	10bfe004 	addi	r2,r2,-128
  80340c:	1000061e 	bne	r2,zero,803428 <logic+0x3028>
  803410:	e0bffc17 	ldw	r2,-16(fp)
  803414:	10801bc3 	ldbu	r2,111(r2)
  803418:	10803fcc 	andi	r2,r2,255
  80341c:	1080201c 	xori	r2,r2,128
  803420:	10bfe004 	addi	r2,r2,-128
  803424:	10000226 	beq	r2,zero,803430 <logic+0x3030>
  803428:	00800044 	movi	r2,1
  80342c:	00000106 	br	803434 <logic+0x3034>
  803430:	0005883a 	mov	r2,zero
  803434:	1007883a 	mov	r3,r2
  803438:	e0bffc17 	ldw	r2,-16(fp)
  80343c:	10c04145 	stb	r3,261(r2)
  d->_g90 = d->_g88 && !d->_cg89;
  803440:	e0bffc17 	ldw	r2,-16(fp)
  803444:	10802c43 	ldbu	r2,177(r2)
  803448:	10803fcc 	andi	r2,r2,255
  80344c:	1080201c 	xori	r2,r2,128
  803450:	10bfe004 	addi	r2,r2,-128
  803454:	10000826 	beq	r2,zero,803478 <logic+0x3078>
  803458:	e0bffc17 	ldw	r2,-16(fp)
  80345c:	10804143 	ldbu	r2,261(r2)
  803460:	10803fcc 	andi	r2,r2,255
  803464:	1080201c 	xori	r2,r2,128
  803468:	10bfe004 	addi	r2,r2,-128
  80346c:	1000021e 	bne	r2,zero,803478 <logic+0x3078>
  803470:	00800044 	movi	r2,1
  803474:	00000106 	br	80347c <logic+0x307c>
  803478:	0005883a 	mov	r2,zero
  80347c:	1007883a 	mov	r3,r2
  803480:	e0bffc17 	ldw	r2,-16(fp)
  803484:	10c02cc5 	stb	r3,179(r2)
  d->_g84 = d->_g91 && d->_cg84;
  803488:	e0bffc17 	ldw	r2,-16(fp)
  80348c:	10802d03 	ldbu	r2,180(r2)
  803490:	10803fcc 	andi	r2,r2,255
  803494:	1080201c 	xori	r2,r2,128
  803498:	10bfe004 	addi	r2,r2,-128
  80349c:	10000826 	beq	r2,zero,8034c0 <logic+0x30c0>
  8034a0:	e0bffc17 	ldw	r2,-16(fp)
  8034a4:	108040c3 	ldbu	r2,259(r2)
  8034a8:	10803fcc 	andi	r2,r2,255
  8034ac:	1080201c 	xori	r2,r2,128
  8034b0:	10bfe004 	addi	r2,r2,-128
  8034b4:	10000226 	beq	r2,zero,8034c0 <logic+0x30c0>
  8034b8:	00800044 	movi	r2,1
  8034bc:	00000106 	br	8034c4 <logic+0x30c4>
  8034c0:	0005883a 	mov	r2,zero
  8034c4:	1007883a 	mov	r3,r2
  8034c8:	e0bffc17 	ldw	r2,-16(fp)
  8034cc:	10c02b45 	stb	r3,173(r2)
  if (d->_g84) {
  8034d0:	e0bffc17 	ldw	r2,-16(fp)
  8034d4:	10802b43 	ldbu	r2,173(r2)
  8034d8:	10803fcc 	andi	r2,r2,255
  8034dc:	1080201c 	xori	r2,r2,128
  8034e0:	10bfe004 	addi	r2,r2,-128
  8034e4:	10003426 	beq	r2,zero,8035b8 <logic+0x31b8>
    d->sleepT = (d->sleepT < (d->AEI_Constraint - d->_region3_AEI_timer_t)) ? d->sleepT : (d->AEI_Constraint - d->_region3_AEI_timer_t);
  8034e8:	e0bffc17 	ldw	r2,-16(fp)
  8034ec:	14001517 	ldw	r16,84(r2)
  8034f0:	14401617 	ldw	r17,88(r2)
  8034f4:	e0bffc17 	ldw	r2,-16(fp)
  8034f8:	10800417 	ldw	r2,16(r2)
  8034fc:	1009883a 	mov	r4,r2
  803500:	08064e40 	call	8064e4 <__floatsidf>
  803504:	1011883a 	mov	r8,r2
  803508:	1813883a 	mov	r9,r3
  80350c:	e13ffc17 	ldw	r4,-16(fp)
  803510:	20800d17 	ldw	r2,52(r4)
  803514:	20c00e17 	ldw	r3,56(r4)
  803518:	100d883a 	mov	r6,r2
  80351c:	180f883a 	mov	r7,r3
  803520:	4009883a 	mov	r4,r8
  803524:	480b883a 	mov	r5,r9
  803528:	0805be80 	call	805be8 <__subdf3>
  80352c:	1009883a 	mov	r4,r2
  803530:	180b883a 	mov	r5,r3
  803534:	2005883a 	mov	r2,r4
  803538:	2807883a 	mov	r3,r5
  80353c:	100d883a 	mov	r6,r2
  803540:	180f883a 	mov	r7,r3
  803544:	8009883a 	mov	r4,r16
  803548:	880b883a 	mov	r5,r17
  80354c:	0805af40 	call	805af4 <__ledf2>
  803550:	1000040e 	bge	r2,zero,803564 <logic+0x3164>
  803554:	e13ffc17 	ldw	r4,-16(fp)
  803558:	20801517 	ldw	r2,84(r4)
  80355c:	20c01617 	ldw	r3,88(r4)
  803560:	00001206 	br	8035ac <logic+0x31ac>
  803564:	e0bffc17 	ldw	r2,-16(fp)
  803568:	10800417 	ldw	r2,16(r2)
  80356c:	1009883a 	mov	r4,r2
  803570:	08064e40 	call	8064e4 <__floatsidf>
  803574:	1011883a 	mov	r8,r2
  803578:	1813883a 	mov	r9,r3
  80357c:	e13ffc17 	ldw	r4,-16(fp)
  803580:	20800d17 	ldw	r2,52(r4)
  803584:	20c00e17 	ldw	r3,56(r4)
  803588:	100d883a 	mov	r6,r2
  80358c:	180f883a 	mov	r7,r3
  803590:	4009883a 	mov	r4,r8
  803594:	480b883a 	mov	r5,r9
  803598:	0805be80 	call	805be8 <__subdf3>
  80359c:	1009883a 	mov	r4,r2
  8035a0:	180b883a 	mov	r5,r3
  8035a4:	2005883a 	mov	r2,r4
  8035a8:	2807883a 	mov	r3,r5
  8035ac:	e13ffc17 	ldw	r4,-16(fp)
  8035b0:	20801515 	stw	r2,84(r4)
  8035b4:	20c01615 	stw	r3,88(r4)
  }
  d->_cg85 = d->_Pacemaker_local__Atrig6 || d->_Pacemaker_local__Atrig7;
  8035b8:	e0bffc17 	ldw	r2,-16(fp)
  8035bc:	10801b83 	ldbu	r2,110(r2)
  8035c0:	10803fcc 	andi	r2,r2,255
  8035c4:	1080201c 	xori	r2,r2,128
  8035c8:	10bfe004 	addi	r2,r2,-128
  8035cc:	1000061e 	bne	r2,zero,8035e8 <logic+0x31e8>
  8035d0:	e0bffc17 	ldw	r2,-16(fp)
  8035d4:	10801bc3 	ldbu	r2,111(r2)
  8035d8:	10803fcc 	andi	r2,r2,255
  8035dc:	1080201c 	xori	r2,r2,128
  8035e0:	10bfe004 	addi	r2,r2,-128
  8035e4:	10000226 	beq	r2,zero,8035f0 <logic+0x31f0>
  8035e8:	00800044 	movi	r2,1
  8035ec:	00000106 	br	8035f4 <logic+0x31f4>
  8035f0:	0005883a 	mov	r2,zero
  8035f4:	1007883a 	mov	r3,r2
  8035f8:	e0bffc17 	ldw	r2,-16(fp)
  8035fc:	10c04105 	stb	r3,260(r2)
  d->_g87 = d->_g84 && !d->_cg85;
  803600:	e0bffc17 	ldw	r2,-16(fp)
  803604:	10802b43 	ldbu	r2,173(r2)
  803608:	10803fcc 	andi	r2,r2,255
  80360c:	1080201c 	xori	r2,r2,128
  803610:	10bfe004 	addi	r2,r2,-128
  803614:	10000826 	beq	r2,zero,803638 <logic+0x3238>
  803618:	e0bffc17 	ldw	r2,-16(fp)
  80361c:	10804103 	ldbu	r2,260(r2)
  803620:	10803fcc 	andi	r2,r2,255
  803624:	1080201c 	xori	r2,r2,128
  803628:	10bfe004 	addi	r2,r2,-128
  80362c:	1000021e 	bne	r2,zero,803638 <logic+0x3238>
  803630:	00800044 	movi	r2,1
  803634:	00000106 	br	80363c <logic+0x323c>
  803638:	0005883a 	mov	r2,zero
  80363c:	1007883a 	mov	r3,r2
  803640:	e0bffc17 	ldw	r2,-16(fp)
  803644:	10c02c05 	stb	r3,176(r2)
  d->_g86_e1 = !(d->_g90 || d->_g87);
  803648:	e0bffc17 	ldw	r2,-16(fp)
  80364c:	10802cc3 	ldbu	r2,179(r2)
  803650:	10803fcc 	andi	r2,r2,255
  803654:	1080201c 	xori	r2,r2,128
  803658:	10bfe004 	addi	r2,r2,-128
  80365c:	1000081e 	bne	r2,zero,803680 <logic+0x3280>
  803660:	e0bffc17 	ldw	r2,-16(fp)
  803664:	10802c03 	ldbu	r2,176(r2)
  803668:	10803fcc 	andi	r2,r2,255
  80366c:	1080201c 	xori	r2,r2,128
  803670:	10bfe004 	addi	r2,r2,-128
  803674:	1000021e 	bne	r2,zero,803680 <logic+0x3280>
  803678:	00800044 	movi	r2,1
  80367c:	00000106 	br	803684 <logic+0x3284>
  803680:	0005883a 	mov	r2,zero
  803684:	1007883a 	mov	r3,r2
  803688:	e0bffc17 	ldw	r2,-16(fp)
  80368c:	10c04885 	stb	r3,290(r2)
  d->_g89 = d->_g84 && d->_cg85 || d->_g88 && d->_cg89;
  803690:	e0bffc17 	ldw	r2,-16(fp)
  803694:	10802b43 	ldbu	r2,173(r2)
  803698:	10803fcc 	andi	r2,r2,255
  80369c:	1080201c 	xori	r2,r2,128
  8036a0:	10bfe004 	addi	r2,r2,-128
  8036a4:	10000626 	beq	r2,zero,8036c0 <logic+0x32c0>
  8036a8:	e0bffc17 	ldw	r2,-16(fp)
  8036ac:	10804103 	ldbu	r2,260(r2)
  8036b0:	10803fcc 	andi	r2,r2,255
  8036b4:	1080201c 	xori	r2,r2,128
  8036b8:	10bfe004 	addi	r2,r2,-128
  8036bc:	10000c1e 	bne	r2,zero,8036f0 <logic+0x32f0>
  8036c0:	e0bffc17 	ldw	r2,-16(fp)
  8036c4:	10802c43 	ldbu	r2,177(r2)
  8036c8:	10803fcc 	andi	r2,r2,255
  8036cc:	1080201c 	xori	r2,r2,128
  8036d0:	10bfe004 	addi	r2,r2,-128
  8036d4:	10000826 	beq	r2,zero,8036f8 <logic+0x32f8>
  8036d8:	e0bffc17 	ldw	r2,-16(fp)
  8036dc:	10804143 	ldbu	r2,261(r2)
  8036e0:	10803fcc 	andi	r2,r2,255
  8036e4:	1080201c 	xori	r2,r2,128
  8036e8:	10bfe004 	addi	r2,r2,-128
  8036ec:	10000226 	beq	r2,zero,8036f8 <logic+0x32f8>
  8036f0:	00800044 	movi	r2,1
  8036f4:	00000106 	br	8036fc <logic+0x32fc>
  8036f8:	0005883a 	mov	r2,zero
  8036fc:	1007883a 	mov	r3,r2
  803700:	e0bffc17 	ldw	r2,-16(fp)
  803704:	10c02c85 	stb	r3,178(r2)
  d->_g85 = d->_g94 || d->_g65 && !d->_cg97;
  803708:	e0bffc17 	ldw	r2,-16(fp)
  80370c:	10802d43 	ldbu	r2,181(r2)
  803710:	10803fcc 	andi	r2,r2,255
  803714:	1080201c 	xori	r2,r2,128
  803718:	10bfe004 	addi	r2,r2,-128
  80371c:	10000c1e 	bne	r2,zero,803750 <logic+0x3350>
  803720:	e0bffc17 	ldw	r2,-16(fp)
  803724:	10802843 	ldbu	r2,161(r2)
  803728:	10803fcc 	andi	r2,r2,255
  80372c:	1080201c 	xori	r2,r2,128
  803730:	10bfe004 	addi	r2,r2,-128
  803734:	10000826 	beq	r2,zero,803758 <logic+0x3358>
  803738:	e0bffc17 	ldw	r2,-16(fp)
  80373c:	10804183 	ldbu	r2,262(r2)
  803740:	10803fcc 	andi	r2,r2,255
  803744:	1080201c 	xori	r2,r2,128
  803748:	10bfe004 	addi	r2,r2,-128
  80374c:	1000021e 	bne	r2,zero,803758 <logic+0x3358>
  803750:	00800044 	movi	r2,1
  803754:	00000106 	br	80375c <logic+0x335c>
  803758:	0005883a 	mov	r2,zero
  80375c:	1007883a 	mov	r3,r2
  803760:	e0bffc17 	ldw	r2,-16(fp)
  803764:	10c02b85 	stb	r3,174(r2)
  d->_g97 = !d->_g85;
  803768:	e0bffc17 	ldw	r2,-16(fp)
  80376c:	10802b83 	ldbu	r2,174(r2)
  803770:	10803fcc 	andi	r2,r2,255
  803774:	1080201c 	xori	r2,r2,128
  803778:	10bfe004 	addi	r2,r2,-128
  80377c:	1005003a 	cmpeq	r2,r2,zero
  803780:	1007883a 	mov	r3,r2
  803784:	e0bffc17 	ldw	r2,-16(fp)
  803788:	10c02e05 	stb	r3,184(r2)
  d->_g82 = d->_g63 || d->_g74;
  80378c:	e0bffc17 	ldw	r2,-16(fp)
  803790:	108027c3 	ldbu	r2,159(r2)
  803794:	10803fcc 	andi	r2,r2,255
  803798:	1080201c 	xori	r2,r2,128
  80379c:	10bfe004 	addi	r2,r2,-128
  8037a0:	1000061e 	bne	r2,zero,8037bc <logic+0x33bc>
  8037a4:	e0bffc17 	ldw	r2,-16(fp)
  8037a8:	108029c3 	ldbu	r2,167(r2)
  8037ac:	10803fcc 	andi	r2,r2,255
  8037b0:	1080201c 	xori	r2,r2,128
  8037b4:	10bfe004 	addi	r2,r2,-128
  8037b8:	10000226 	beq	r2,zero,8037c4 <logic+0x33c4>
  8037bc:	00800044 	movi	r2,1
  8037c0:	00000106 	br	8037c8 <logic+0x33c8>
  8037c4:	0005883a 	mov	r2,zero
  8037c8:	1007883a 	mov	r3,r2
  8037cc:	e0bffc17 	ldw	r2,-16(fp)
  8037d0:	10c02b05 	stb	r3,172(r2)
  d->_g95 = (d->_g86_e1 || d->_g89) && (d->_g97 || d->_g82) && (d->_g89 || d->_g82);
  8037d4:	e0bffc17 	ldw	r2,-16(fp)
  8037d8:	10804883 	ldbu	r2,290(r2)
  8037dc:	10803fcc 	andi	r2,r2,255
  8037e0:	1080201c 	xori	r2,r2,128
  8037e4:	10bfe004 	addi	r2,r2,-128
  8037e8:	1000061e 	bne	r2,zero,803804 <logic+0x3404>
  8037ec:	e0bffc17 	ldw	r2,-16(fp)
  8037f0:	10802c83 	ldbu	r2,178(r2)
  8037f4:	10803fcc 	andi	r2,r2,255
  8037f8:	1080201c 	xori	r2,r2,128
  8037fc:	10bfe004 	addi	r2,r2,-128
  803800:	10001a26 	beq	r2,zero,80386c <logic+0x346c>
  803804:	e0bffc17 	ldw	r2,-16(fp)
  803808:	10802e03 	ldbu	r2,184(r2)
  80380c:	10803fcc 	andi	r2,r2,255
  803810:	1080201c 	xori	r2,r2,128
  803814:	10bfe004 	addi	r2,r2,-128
  803818:	1000061e 	bne	r2,zero,803834 <logic+0x3434>
  80381c:	e0bffc17 	ldw	r2,-16(fp)
  803820:	10802b03 	ldbu	r2,172(r2)
  803824:	10803fcc 	andi	r2,r2,255
  803828:	1080201c 	xori	r2,r2,128
  80382c:	10bfe004 	addi	r2,r2,-128
  803830:	10000e26 	beq	r2,zero,80386c <logic+0x346c>
  803834:	e0bffc17 	ldw	r2,-16(fp)
  803838:	10802c83 	ldbu	r2,178(r2)
  80383c:	10803fcc 	andi	r2,r2,255
  803840:	1080201c 	xori	r2,r2,128
  803844:	10bfe004 	addi	r2,r2,-128
  803848:	1000061e 	bne	r2,zero,803864 <logic+0x3464>
  80384c:	e0bffc17 	ldw	r2,-16(fp)
  803850:	10802b03 	ldbu	r2,172(r2)
  803854:	10803fcc 	andi	r2,r2,255
  803858:	1080201c 	xori	r2,r2,128
  80385c:	10bfe004 	addi	r2,r2,-128
  803860:	10000226 	beq	r2,zero,80386c <logic+0x346c>
  803864:	00800044 	movi	r2,1
  803868:	00000106 	br	803870 <logic+0x3470>
  80386c:	0005883a 	mov	r2,zero
  803870:	1007883a 	mov	r3,r2
  803874:	e0bffc17 	ldw	r2,-16(fp)
  803878:	10c02d85 	stb	r3,182(r2)
  d->_cg99 = d->_Pacemaker_local__Atrig6;
  80387c:	e0bffc17 	ldw	r2,-16(fp)
  803880:	10c01b83 	ldbu	r3,110(r2)
  803884:	e0bffc17 	ldw	r2,-16(fp)
  803888:	10c04045 	stb	r3,257(r2)
  d->_g98 = d->_g95 && !d->_cg99;
  80388c:	e0bffc17 	ldw	r2,-16(fp)
  803890:	10802d83 	ldbu	r2,182(r2)
  803894:	10803fcc 	andi	r2,r2,255
  803898:	1080201c 	xori	r2,r2,128
  80389c:	10bfe004 	addi	r2,r2,-128
  8038a0:	10000826 	beq	r2,zero,8038c4 <logic+0x34c4>
  8038a4:	e0bffc17 	ldw	r2,-16(fp)
  8038a8:	10804043 	ldbu	r2,257(r2)
  8038ac:	10803fcc 	andi	r2,r2,255
  8038b0:	1080201c 	xori	r2,r2,128
  8038b4:	10bfe004 	addi	r2,r2,-128
  8038b8:	1000021e 	bne	r2,zero,8038c4 <logic+0x34c4>
  8038bc:	00800044 	movi	r2,1
  8038c0:	00000106 	br	8038c8 <logic+0x34c8>
  8038c4:	0005883a 	mov	r2,zero
  8038c8:	1007883a 	mov	r3,r2
  8038cc:	e0bffc17 	ldw	r2,-16(fp)
  8038d0:	10c02e45 	stb	r3,185(r2)
  if (d->_g98) {
  8038d4:	e0bffc17 	ldw	r2,-16(fp)
  8038d8:	10802e43 	ldbu	r2,185(r2)
  8038dc:	10803fcc 	andi	r2,r2,255
  8038e0:	1080201c 	xori	r2,r2,128
  8038e4:	10bfe004 	addi	r2,r2,-128
  8038e8:	10000626 	beq	r2,zero,803904 <logic+0x3504>
    d->AP |= 1;
  8038ec:	e0bffc17 	ldw	r2,-16(fp)
  8038f0:	10801783 	ldbu	r2,94(r2)
  8038f4:	10800054 	ori	r2,r2,1
  8038f8:	1007883a 	mov	r3,r2
  8038fc:	e0bffc17 	ldw	r2,-16(fp)
  803900:	10c01785 	stb	r3,94(r2)
  }
  d->_g96 = d->_GO || d->_g95 && d->_cg99 || d->_g98 || d->_g57 && !d->_cg81;
  803904:	e0bffc17 	ldw	r2,-16(fp)
  803908:	10803903 	ldbu	r2,228(r2)
  80390c:	10803fcc 	andi	r2,r2,255
  803910:	1080201c 	xori	r2,r2,128
  803914:	10bfe004 	addi	r2,r2,-128
  803918:	10001e1e 	bne	r2,zero,803994 <logic+0x3594>
  80391c:	e0bffc17 	ldw	r2,-16(fp)
  803920:	10802d83 	ldbu	r2,182(r2)
  803924:	10803fcc 	andi	r2,r2,255
  803928:	1080201c 	xori	r2,r2,128
  80392c:	10bfe004 	addi	r2,r2,-128
  803930:	10000626 	beq	r2,zero,80394c <logic+0x354c>
  803934:	e0bffc17 	ldw	r2,-16(fp)
  803938:	10804043 	ldbu	r2,257(r2)
  80393c:	10803fcc 	andi	r2,r2,255
  803940:	1080201c 	xori	r2,r2,128
  803944:	10bfe004 	addi	r2,r2,-128
  803948:	1000121e 	bne	r2,zero,803994 <logic+0x3594>
  80394c:	e0bffc17 	ldw	r2,-16(fp)
  803950:	10802e43 	ldbu	r2,185(r2)
  803954:	10803fcc 	andi	r2,r2,255
  803958:	1080201c 	xori	r2,r2,128
  80395c:	10bfe004 	addi	r2,r2,-128
  803960:	10000c1e 	bne	r2,zero,803994 <logic+0x3594>
  803964:	e0bffc17 	ldw	r2,-16(fp)
  803968:	108026c3 	ldbu	r2,155(r2)
  80396c:	10803fcc 	andi	r2,r2,255
  803970:	1080201c 	xori	r2,r2,128
  803974:	10bfe004 	addi	r2,r2,-128
  803978:	10000826 	beq	r2,zero,80399c <logic+0x359c>
  80397c:	e0bffc17 	ldw	r2,-16(fp)
  803980:	10804083 	ldbu	r2,258(r2)
  803984:	10803fcc 	andi	r2,r2,255
  803988:	1080201c 	xori	r2,r2,128
  80398c:	10bfe004 	addi	r2,r2,-128
  803990:	1000021e 	bne	r2,zero,80399c <logic+0x359c>
  803994:	00800044 	movi	r2,1
  803998:	00000106 	br	8039a0 <logic+0x35a0>
  80399c:	0005883a 	mov	r2,zero
  8039a0:	1007883a 	mov	r3,r2
  8039a4:	e0bffc17 	ldw	r2,-16(fp)
  8039a8:	10c02dc5 	stb	r3,183(r2)
  d->_g86 = d->_pg112;
  8039ac:	e0bffc17 	ldw	r2,-16(fp)
  8039b0:	10c050c3 	ldbu	r3,323(r2)
  8039b4:	e0bffc17 	ldw	r2,-16(fp)
  8039b8:	10c02bc5 	stb	r3,175(r2)
  d->_g86_e1 = d->_pg105;
  8039bc:	e0bffc17 	ldw	r2,-16(fp)
  8039c0:	10c05103 	ldbu	r3,324(r2)
  8039c4:	e0bffc17 	ldw	r2,-16(fp)
  8039c8:	10c04885 	stb	r3,290(r2)
  d->_g96_e2 = !(d->_g86 || d->_g86_e1);
  8039cc:	e0bffc17 	ldw	r2,-16(fp)
  8039d0:	10802bc3 	ldbu	r2,175(r2)
  8039d4:	10803fcc 	andi	r2,r2,255
  8039d8:	1080201c 	xori	r2,r2,128
  8039dc:	10bfe004 	addi	r2,r2,-128
  8039e0:	1000081e 	bne	r2,zero,803a04 <logic+0x3604>
  8039e4:	e0bffc17 	ldw	r2,-16(fp)
  8039e8:	10804883 	ldbu	r2,290(r2)
  8039ec:	10803fcc 	andi	r2,r2,255
  8039f0:	1080201c 	xori	r2,r2,128
  8039f4:	10bfe004 	addi	r2,r2,-128
  8039f8:	1000021e 	bne	r2,zero,803a04 <logic+0x3604>
  8039fc:	00800044 	movi	r2,1
  803a00:	00000106 	br	803a08 <logic+0x3608>
  803a04:	0005883a 	mov	r2,zero
  803a08:	1007883a 	mov	r3,r2
  803a0c:	e0bffc17 	ldw	r2,-16(fp)
  803a10:	10c048c5 	stb	r3,291(r2)
  d->_g99 = d->_pg108;
  803a14:	e0bffc17 	ldw	r2,-16(fp)
  803a18:	10c05143 	ldbu	r3,325(r2)
  803a1c:	e0bffc17 	ldw	r2,-16(fp)
  803a20:	10c02e85 	stb	r3,186(r2)
  d->_cg120 = d->V_event;
  803a24:	e0bffc17 	ldw	r2,-16(fp)
  803a28:	10c01803 	ldbu	r3,96(r2)
  803a2c:	e0bffc17 	ldw	r2,-16(fp)
  803a30:	10c04405 	stb	r3,272(r2)
  d->_g81 = d->_g99 && d->_cg120;
  803a34:	e0bffc17 	ldw	r2,-16(fp)
  803a38:	10802e83 	ldbu	r2,186(r2)
  803a3c:	10803fcc 	andi	r2,r2,255
  803a40:	1080201c 	xori	r2,r2,128
  803a44:	10bfe004 	addi	r2,r2,-128
  803a48:	10000826 	beq	r2,zero,803a6c <logic+0x366c>
  803a4c:	e0bffc17 	ldw	r2,-16(fp)
  803a50:	10804403 	ldbu	r2,272(r2)
  803a54:	10803fcc 	andi	r2,r2,255
  803a58:	1080201c 	xori	r2,r2,128
  803a5c:	10bfe004 	addi	r2,r2,-128
  803a60:	10000226 	beq	r2,zero,803a6c <logic+0x366c>
  803a64:	00800044 	movi	r2,1
  803a68:	00000106 	br	803a70 <logic+0x3670>
  803a6c:	0005883a 	mov	r2,zero
  803a70:	1007883a 	mov	r3,r2
  803a74:	e0bffc17 	ldw	r2,-16(fp)
  803a78:	10c02ac5 	stb	r3,171(r2)
  if (d->_g81) {
  803a7c:	e0bffc17 	ldw	r2,-16(fp)
  803a80:	10802ac3 	ldbu	r2,171(r2)
  803a84:	10803fcc 	andi	r2,r2,255
  803a88:	1080201c 	xori	r2,r2,128
  803a8c:	10bfe004 	addi	r2,r2,-128
  803a90:	10000326 	beq	r2,zero,803aa0 <logic+0x36a0>
    d->_Pacemaker_local__Atrig8 = 1;
  803a94:	e0bffc17 	ldw	r2,-16(fp)
  803a98:	00c00044 	movi	r3,1
  803a9c:	10c01c05 	stb	r3,112(r2)
  }
  d->_g100 = d->_pg144;
  803aa0:	e0bffc17 	ldw	r2,-16(fp)
  803aa4:	10c05183 	ldbu	r3,326(r2)
  803aa8:	e0bffc17 	ldw	r2,-16(fp)
  803aac:	10c02ec5 	stb	r3,187(r2)
  if (d->_g100) {
  803ab0:	e0bffc17 	ldw	r2,-16(fp)
  803ab4:	10802ec3 	ldbu	r2,187(r2)
  803ab8:	10803fcc 	andi	r2,r2,255
  803abc:	1080201c 	xori	r2,r2,128
  803ac0:	10bfe004 	addi	r2,r2,-128
  803ac4:	10001226 	beq	r2,zero,803b10 <logic+0x3710>
    d->_region4_LRI_timer_t += d->deltaT;
  803ac8:	e13ffc17 	ldw	r4,-16(fp)
  803acc:	20800f17 	ldw	r2,60(r4)
  803ad0:	20c01017 	ldw	r3,64(r4)
  803ad4:	e1bffc17 	ldw	r6,-16(fp)
  803ad8:	31001317 	ldw	r4,76(r6)
  803adc:	31401417 	ldw	r5,80(r6)
  803ae0:	200d883a 	mov	r6,r4
  803ae4:	280f883a 	mov	r7,r5
  803ae8:	1009883a 	mov	r4,r2
  803aec:	180b883a 	mov	r5,r3
  803af0:	080516c0 	call	80516c <__adddf3>
  803af4:	1009883a 	mov	r4,r2
  803af8:	180b883a 	mov	r5,r3
  803afc:	2005883a 	mov	r2,r4
  803b00:	2807883a 	mov	r3,r5
  803b04:	e13ffc17 	ldw	r4,-16(fp)
  803b08:	20800f15 	stw	r2,60(r4)
  803b0c:	20c01015 	stw	r3,64(r4)
  }
  d->_g123 = d->_g99 && !d->_cg120;
  803b10:	e0bffc17 	ldw	r2,-16(fp)
  803b14:	10802e83 	ldbu	r2,186(r2)
  803b18:	10803fcc 	andi	r2,r2,255
  803b1c:	1080201c 	xori	r2,r2,128
  803b20:	10bfe004 	addi	r2,r2,-128
  803b24:	10000826 	beq	r2,zero,803b48 <logic+0x3748>
  803b28:	e0bffc17 	ldw	r2,-16(fp)
  803b2c:	10804403 	ldbu	r2,272(r2)
  803b30:	10803fcc 	andi	r2,r2,255
  803b34:	1080201c 	xori	r2,r2,128
  803b38:	10bfe004 	addi	r2,r2,-128
  803b3c:	1000021e 	bne	r2,zero,803b48 <logic+0x3748>
  803b40:	00800044 	movi	r2,1
  803b44:	00000106 	br	803b4c <logic+0x374c>
  803b48:	0005883a 	mov	r2,zero
  803b4c:	1007883a 	mov	r3,r2
  803b50:	e0bffc17 	ldw	r2,-16(fp)
  803b54:	10c03285 	stb	r3,202(r2)
  d->_cg123 = d->_region4_LRI_timer_t >= d->LRI_Constraint;
  803b58:	e0bffc17 	ldw	r2,-16(fp)
  803b5c:	14000f17 	ldw	r16,60(r2)
  803b60:	14401017 	ldw	r17,64(r2)
  803b64:	e0bffc17 	ldw	r2,-16(fp)
  803b68:	10800517 	ldw	r2,20(r2)
  803b6c:	1009883a 	mov	r4,r2
  803b70:	08064e40 	call	8064e4 <__floatsidf>
  803b74:	1009883a 	mov	r4,r2
  803b78:	180b883a 	mov	r5,r3
  803b7c:	04800044 	movi	r18,1
  803b80:	200d883a 	mov	r6,r4
  803b84:	280f883a 	mov	r7,r5
  803b88:	8009883a 	mov	r4,r16
  803b8c:	880b883a 	mov	r5,r17
  803b90:	0805a180 	call	805a18 <__gedf2>
  803b94:	1000010e 	bge	r2,zero,803b9c <logic+0x379c>
  803b98:	0025883a 	mov	r18,zero
  803b9c:	9007883a 	mov	r3,r18
  803ba0:	e0bffc17 	ldw	r2,-16(fp)
  803ba4:	10c043c5 	stb	r3,271(r2)
  d->_g124 = d->_g123 && d->_cg123;
  803ba8:	e0bffc17 	ldw	r2,-16(fp)
  803bac:	10803283 	ldbu	r2,202(r2)
  803bb0:	10803fcc 	andi	r2,r2,255
  803bb4:	1080201c 	xori	r2,r2,128
  803bb8:	10bfe004 	addi	r2,r2,-128
  803bbc:	10000826 	beq	r2,zero,803be0 <logic+0x37e0>
  803bc0:	e0bffc17 	ldw	r2,-16(fp)
  803bc4:	108043c3 	ldbu	r2,271(r2)
  803bc8:	10803fcc 	andi	r2,r2,255
  803bcc:	1080201c 	xori	r2,r2,128
  803bd0:	10bfe004 	addi	r2,r2,-128
  803bd4:	10000226 	beq	r2,zero,803be0 <logic+0x37e0>
  803bd8:	00800044 	movi	r2,1
  803bdc:	00000106 	br	803be4 <logic+0x37e4>
  803be0:	0005883a 	mov	r2,zero
  803be4:	1007883a 	mov	r3,r2
  803be8:	e0bffc17 	ldw	r2,-16(fp)
  803bec:	10c032c5 	stb	r3,203(r2)
  if (d->_g124) {
  803bf0:	e0bffc17 	ldw	r2,-16(fp)
  803bf4:	108032c3 	ldbu	r2,203(r2)
  803bf8:	10803fcc 	andi	r2,r2,255
  803bfc:	1080201c 	xori	r2,r2,128
  803c00:	10bfe004 	addi	r2,r2,-128
  803c04:	10000326 	beq	r2,zero,803c14 <logic+0x3814>
    d->_Pacemaker_local__Atrig9 = 1;
  803c08:	e0bffc17 	ldw	r2,-16(fp)
  803c0c:	00c00044 	movi	r3,1
  803c10:	10c01c45 	stb	r3,113(r2)
  }
  d->_g116 = d->_g86_e1 || d->_g86;
  803c14:	e0bffc17 	ldw	r2,-16(fp)
  803c18:	10804883 	ldbu	r2,290(r2)
  803c1c:	10803fcc 	andi	r2,r2,255
  803c20:	1080201c 	xori	r2,r2,128
  803c24:	10bfe004 	addi	r2,r2,-128
  803c28:	1000061e 	bne	r2,zero,803c44 <logic+0x3844>
  803c2c:	e0bffc17 	ldw	r2,-16(fp)
  803c30:	10802bc3 	ldbu	r2,175(r2)
  803c34:	10803fcc 	andi	r2,r2,255
  803c38:	1080201c 	xori	r2,r2,128
  803c3c:	10bfe004 	addi	r2,r2,-128
  803c40:	10000226 	beq	r2,zero,803c4c <logic+0x384c>
  803c44:	00800044 	movi	r2,1
  803c48:	00000106 	br	803c50 <logic+0x3850>
  803c4c:	0005883a 	mov	r2,zero
  803c50:	1007883a 	mov	r3,r2
  803c54:	e0bffc17 	ldw	r2,-16(fp)
  803c58:	10c03145 	stb	r3,197(r2)
  d->_cg111 = d->_region4_LRI_timer_t < d->LRI_Constraint;
  803c5c:	e0bffc17 	ldw	r2,-16(fp)
  803c60:	14000f17 	ldw	r16,60(r2)
  803c64:	14401017 	ldw	r17,64(r2)
  803c68:	e0bffc17 	ldw	r2,-16(fp)
  803c6c:	10800517 	ldw	r2,20(r2)
  803c70:	1009883a 	mov	r4,r2
  803c74:	08064e40 	call	8064e4 <__floatsidf>
  803c78:	1009883a 	mov	r4,r2
  803c7c:	180b883a 	mov	r5,r3
  803c80:	04800044 	movi	r18,1
  803c84:	200d883a 	mov	r6,r4
  803c88:	280f883a 	mov	r7,r5
  803c8c:	8009883a 	mov	r4,r16
  803c90:	880b883a 	mov	r5,r17
  803c94:	0805af40 	call	805af4 <__ledf2>
  803c98:	10000116 	blt	r2,zero,803ca0 <logic+0x38a0>
  803c9c:	0025883a 	mov	r18,zero
  803ca0:	9007883a 	mov	r3,r18
  803ca4:	e0bffc17 	ldw	r2,-16(fp)
  803ca8:	10c04305 	stb	r3,268(r2)
  d->_g110 = d->_g116 && d->_cg111;
  803cac:	e0bffc17 	ldw	r2,-16(fp)
  803cb0:	10803143 	ldbu	r2,197(r2)
  803cb4:	10803fcc 	andi	r2,r2,255
  803cb8:	1080201c 	xori	r2,r2,128
  803cbc:	10bfe004 	addi	r2,r2,-128
  803cc0:	10000826 	beq	r2,zero,803ce4 <logic+0x38e4>
  803cc4:	e0bffc17 	ldw	r2,-16(fp)
  803cc8:	10804303 	ldbu	r2,268(r2)
  803ccc:	10803fcc 	andi	r2,r2,255
  803cd0:	1080201c 	xori	r2,r2,128
  803cd4:	10bfe004 	addi	r2,r2,-128
  803cd8:	10000226 	beq	r2,zero,803ce4 <logic+0x38e4>
  803cdc:	00800044 	movi	r2,1
  803ce0:	00000106 	br	803ce8 <logic+0x38e8>
  803ce4:	0005883a 	mov	r2,zero
  803ce8:	1007883a 	mov	r3,r2
  803cec:	e0bffc17 	ldw	r2,-16(fp)
  803cf0:	10c03005 	stb	r3,192(r2)
  if (d->_g110) {
  803cf4:	e0bffc17 	ldw	r2,-16(fp)
  803cf8:	10803003 	ldbu	r2,192(r2)
  803cfc:	10803fcc 	andi	r2,r2,255
  803d00:	1080201c 	xori	r2,r2,128
  803d04:	10bfe004 	addi	r2,r2,-128
  803d08:	10003426 	beq	r2,zero,803ddc <logic+0x39dc>
    d->sleepT = (d->sleepT < (d->LRI_Constraint - d->_region4_LRI_timer_t)) ? d->sleepT : (d->LRI_Constraint - d->_region4_LRI_timer_t);
  803d0c:	e0bffc17 	ldw	r2,-16(fp)
  803d10:	14001517 	ldw	r16,84(r2)
  803d14:	14401617 	ldw	r17,88(r2)
  803d18:	e0bffc17 	ldw	r2,-16(fp)
  803d1c:	10800517 	ldw	r2,20(r2)
  803d20:	1009883a 	mov	r4,r2
  803d24:	08064e40 	call	8064e4 <__floatsidf>
  803d28:	1011883a 	mov	r8,r2
  803d2c:	1813883a 	mov	r9,r3
  803d30:	e13ffc17 	ldw	r4,-16(fp)
  803d34:	20800f17 	ldw	r2,60(r4)
  803d38:	20c01017 	ldw	r3,64(r4)
  803d3c:	100d883a 	mov	r6,r2
  803d40:	180f883a 	mov	r7,r3
  803d44:	4009883a 	mov	r4,r8
  803d48:	480b883a 	mov	r5,r9
  803d4c:	0805be80 	call	805be8 <__subdf3>
  803d50:	1009883a 	mov	r4,r2
  803d54:	180b883a 	mov	r5,r3
  803d58:	2005883a 	mov	r2,r4
  803d5c:	2807883a 	mov	r3,r5
  803d60:	100d883a 	mov	r6,r2
  803d64:	180f883a 	mov	r7,r3
  803d68:	8009883a 	mov	r4,r16
  803d6c:	880b883a 	mov	r5,r17
  803d70:	0805af40 	call	805af4 <__ledf2>
  803d74:	1000040e 	bge	r2,zero,803d88 <logic+0x3988>
  803d78:	e13ffc17 	ldw	r4,-16(fp)
  803d7c:	20801517 	ldw	r2,84(r4)
  803d80:	20c01617 	ldw	r3,88(r4)
  803d84:	00001206 	br	803dd0 <logic+0x39d0>
  803d88:	e0bffc17 	ldw	r2,-16(fp)
  803d8c:	10800517 	ldw	r2,20(r2)
  803d90:	1009883a 	mov	r4,r2
  803d94:	08064e40 	call	8064e4 <__floatsidf>
  803d98:	1011883a 	mov	r8,r2
  803d9c:	1813883a 	mov	r9,r3
  803da0:	e13ffc17 	ldw	r4,-16(fp)
  803da4:	20800f17 	ldw	r2,60(r4)
  803da8:	20c01017 	ldw	r3,64(r4)
  803dac:	100d883a 	mov	r6,r2
  803db0:	180f883a 	mov	r7,r3
  803db4:	4009883a 	mov	r4,r8
  803db8:	480b883a 	mov	r5,r9
  803dbc:	0805be80 	call	805be8 <__subdf3>
  803dc0:	1009883a 	mov	r4,r2
  803dc4:	180b883a 	mov	r5,r3
  803dc8:	2005883a 	mov	r2,r4
  803dcc:	2807883a 	mov	r3,r5
  803dd0:	e13ffc17 	ldw	r4,-16(fp)
  803dd4:	20801515 	stw	r2,84(r4)
  803dd8:	20c01615 	stw	r3,88(r4)
  }
  d->_cg112 = d->_Pacemaker_local__Atrig8 || d->_Pacemaker_local__Atrig9;
  803ddc:	e0bffc17 	ldw	r2,-16(fp)
  803de0:	10801c03 	ldbu	r2,112(r2)
  803de4:	10803fcc 	andi	r2,r2,255
  803de8:	1080201c 	xori	r2,r2,128
  803dec:	10bfe004 	addi	r2,r2,-128
  803df0:	1000061e 	bne	r2,zero,803e0c <logic+0x3a0c>
  803df4:	e0bffc17 	ldw	r2,-16(fp)
  803df8:	10801c43 	ldbu	r2,113(r2)
  803dfc:	10803fcc 	andi	r2,r2,255
  803e00:	1080201c 	xori	r2,r2,128
  803e04:	10bfe004 	addi	r2,r2,-128
  803e08:	10000226 	beq	r2,zero,803e14 <logic+0x3a14>
  803e0c:	00800044 	movi	r2,1
  803e10:	00000106 	br	803e18 <logic+0x3a18>
  803e14:	0005883a 	mov	r2,zero
  803e18:	1007883a 	mov	r3,r2
  803e1c:	e0bffc17 	ldw	r2,-16(fp)
  803e20:	10c042c5 	stb	r3,267(r2)
  d->_g111 = d->_g116 && !d->_cg111;
  803e24:	e0bffc17 	ldw	r2,-16(fp)
  803e28:	10803143 	ldbu	r2,197(r2)
  803e2c:	10803fcc 	andi	r2,r2,255
  803e30:	1080201c 	xori	r2,r2,128
  803e34:	10bfe004 	addi	r2,r2,-128
  803e38:	10000826 	beq	r2,zero,803e5c <logic+0x3a5c>
  803e3c:	e0bffc17 	ldw	r2,-16(fp)
  803e40:	10804303 	ldbu	r2,268(r2)
  803e44:	10803fcc 	andi	r2,r2,255
  803e48:	1080201c 	xori	r2,r2,128
  803e4c:	10bfe004 	addi	r2,r2,-128
  803e50:	1000021e 	bne	r2,zero,803e5c <logic+0x3a5c>
  803e54:	00800044 	movi	r2,1
  803e58:	00000106 	br	803e60 <logic+0x3a60>
  803e5c:	0005883a 	mov	r2,zero
  803e60:	1007883a 	mov	r3,r2
  803e64:	e0bffc17 	ldw	r2,-16(fp)
  803e68:	10c03045 	stb	r3,193(r2)
  d->_cg114 = d->_Pacemaker_local__Atrig8 || d->_Pacemaker_local__Atrig9;
  803e6c:	e0bffc17 	ldw	r2,-16(fp)
  803e70:	10801c03 	ldbu	r2,112(r2)
  803e74:	10803fcc 	andi	r2,r2,255
  803e78:	1080201c 	xori	r2,r2,128
  803e7c:	10bfe004 	addi	r2,r2,-128
  803e80:	1000061e 	bne	r2,zero,803e9c <logic+0x3a9c>
  803e84:	e0bffc17 	ldw	r2,-16(fp)
  803e88:	10801c43 	ldbu	r2,113(r2)
  803e8c:	10803fcc 	andi	r2,r2,255
  803e90:	1080201c 	xori	r2,r2,128
  803e94:	10bfe004 	addi	r2,r2,-128
  803e98:	10000226 	beq	r2,zero,803ea4 <logic+0x3aa4>
  803e9c:	00800044 	movi	r2,1
  803ea0:	00000106 	br	803ea8 <logic+0x3aa8>
  803ea4:	0005883a 	mov	r2,zero
  803ea8:	1007883a 	mov	r3,r2
  803eac:	e0bffc17 	ldw	r2,-16(fp)
  803eb0:	10c04345 	stb	r3,269(r2)
  d->_g113 = d->_g110 && d->_cg112 || d->_g111 && d->_cg114;
  803eb4:	e0bffc17 	ldw	r2,-16(fp)
  803eb8:	10803003 	ldbu	r2,192(r2)
  803ebc:	10803fcc 	andi	r2,r2,255
  803ec0:	1080201c 	xori	r2,r2,128
  803ec4:	10bfe004 	addi	r2,r2,-128
  803ec8:	10000626 	beq	r2,zero,803ee4 <logic+0x3ae4>
  803ecc:	e0bffc17 	ldw	r2,-16(fp)
  803ed0:	108042c3 	ldbu	r2,267(r2)
  803ed4:	10803fcc 	andi	r2,r2,255
  803ed8:	1080201c 	xori	r2,r2,128
  803edc:	10bfe004 	addi	r2,r2,-128
  803ee0:	10000c1e 	bne	r2,zero,803f14 <logic+0x3b14>
  803ee4:	e0bffc17 	ldw	r2,-16(fp)
  803ee8:	10803043 	ldbu	r2,193(r2)
  803eec:	10803fcc 	andi	r2,r2,255
  803ef0:	1080201c 	xori	r2,r2,128
  803ef4:	10bfe004 	addi	r2,r2,-128
  803ef8:	10000826 	beq	r2,zero,803f1c <logic+0x3b1c>
  803efc:	e0bffc17 	ldw	r2,-16(fp)
  803f00:	10804343 	ldbu	r2,269(r2)
  803f04:	10803fcc 	andi	r2,r2,255
  803f08:	1080201c 	xori	r2,r2,128
  803f0c:	10bfe004 	addi	r2,r2,-128
  803f10:	10000226 	beq	r2,zero,803f1c <logic+0x3b1c>
  803f14:	00800044 	movi	r2,1
  803f18:	00000106 	br	803f20 <logic+0x3b20>
  803f1c:	0005883a 	mov	r2,zero
  803f20:	1007883a 	mov	r3,r2
  803f24:	e0bffc17 	ldw	r2,-16(fp)
  803f28:	10c030c5 	stb	r3,195(r2)
  d->_g120 = !d->_g99;
  803f2c:	e0bffc17 	ldw	r2,-16(fp)
  803f30:	10802e83 	ldbu	r2,186(r2)
  803f34:	10803fcc 	andi	r2,r2,255
  803f38:	1080201c 	xori	r2,r2,128
  803f3c:	10bfe004 	addi	r2,r2,-128
  803f40:	1005003a 	cmpeq	r2,r2,zero
  803f44:	1007883a 	mov	r3,r2
  803f48:	e0bffc17 	ldw	r2,-16(fp)
  803f4c:	10c031c5 	stb	r3,199(r2)
  d->_g124 = d->_g81 || d->_g124;
  803f50:	e0bffc17 	ldw	r2,-16(fp)
  803f54:	10802ac3 	ldbu	r2,171(r2)
  803f58:	10803fcc 	andi	r2,r2,255
  803f5c:	1080201c 	xori	r2,r2,128
  803f60:	10bfe004 	addi	r2,r2,-128
  803f64:	1000061e 	bne	r2,zero,803f80 <logic+0x3b80>
  803f68:	e0bffc17 	ldw	r2,-16(fp)
  803f6c:	108032c3 	ldbu	r2,203(r2)
  803f70:	10803fcc 	andi	r2,r2,255
  803f74:	1080201c 	xori	r2,r2,128
  803f78:	10bfe004 	addi	r2,r2,-128
  803f7c:	10000226 	beq	r2,zero,803f88 <logic+0x3b88>
  803f80:	00800044 	movi	r2,1
  803f84:	00000106 	br	803f8c <logic+0x3b8c>
  803f88:	0005883a 	mov	r2,zero
  803f8c:	1007883a 	mov	r3,r2
  803f90:	e0bffc17 	ldw	r2,-16(fp)
  803f94:	10c032c5 	stb	r3,203(r2)
  d->_g121 = (d->_g96_e2 || d->_g113) && (d->_g120 || d->_g124) && (d->_g113 || d->_g124);
  803f98:	e0bffc17 	ldw	r2,-16(fp)
  803f9c:	108048c3 	ldbu	r2,291(r2)
  803fa0:	10803fcc 	andi	r2,r2,255
  803fa4:	1080201c 	xori	r2,r2,128
  803fa8:	10bfe004 	addi	r2,r2,-128
  803fac:	1000061e 	bne	r2,zero,803fc8 <logic+0x3bc8>
  803fb0:	e0bffc17 	ldw	r2,-16(fp)
  803fb4:	108030c3 	ldbu	r2,195(r2)
  803fb8:	10803fcc 	andi	r2,r2,255
  803fbc:	1080201c 	xori	r2,r2,128
  803fc0:	10bfe004 	addi	r2,r2,-128
  803fc4:	10001a26 	beq	r2,zero,804030 <logic+0x3c30>
  803fc8:	e0bffc17 	ldw	r2,-16(fp)
  803fcc:	108031c3 	ldbu	r2,199(r2)
  803fd0:	10803fcc 	andi	r2,r2,255
  803fd4:	1080201c 	xori	r2,r2,128
  803fd8:	10bfe004 	addi	r2,r2,-128
  803fdc:	1000061e 	bne	r2,zero,803ff8 <logic+0x3bf8>
  803fe0:	e0bffc17 	ldw	r2,-16(fp)
  803fe4:	108032c3 	ldbu	r2,203(r2)
  803fe8:	10803fcc 	andi	r2,r2,255
  803fec:	1080201c 	xori	r2,r2,128
  803ff0:	10bfe004 	addi	r2,r2,-128
  803ff4:	10000e26 	beq	r2,zero,804030 <logic+0x3c30>
  803ff8:	e0bffc17 	ldw	r2,-16(fp)
  803ffc:	108030c3 	ldbu	r2,195(r2)
  804000:	10803fcc 	andi	r2,r2,255
  804004:	1080201c 	xori	r2,r2,128
  804008:	10bfe004 	addi	r2,r2,-128
  80400c:	1000061e 	bne	r2,zero,804028 <logic+0x3c28>
  804010:	e0bffc17 	ldw	r2,-16(fp)
  804014:	108032c3 	ldbu	r2,203(r2)
  804018:	10803fcc 	andi	r2,r2,255
  80401c:	1080201c 	xori	r2,r2,128
  804020:	10bfe004 	addi	r2,r2,-128
  804024:	10000226 	beq	r2,zero,804030 <logic+0x3c30>
  804028:	00800044 	movi	r2,1
  80402c:	00000106 	br	804034 <logic+0x3c34>
  804030:	0005883a 	mov	r2,zero
  804034:	1007883a 	mov	r3,r2
  804038:	e0bffc17 	ldw	r2,-16(fp)
  80403c:	10c03205 	stb	r3,200(r2)
  d->_cg125 = d->_Pacemaker_local__Atrig8;
  804040:	e0bffc17 	ldw	r2,-16(fp)
  804044:	10c01c03 	ldbu	r3,112(r2)
  804048:	e0bffc17 	ldw	r2,-16(fp)
  80404c:	10c04445 	stb	r3,273(r2)
  d->_g113 = d->_g121 && !d->_cg125;
  804050:	e0bffc17 	ldw	r2,-16(fp)
  804054:	10803203 	ldbu	r2,200(r2)
  804058:	10803fcc 	andi	r2,r2,255
  80405c:	1080201c 	xori	r2,r2,128
  804060:	10bfe004 	addi	r2,r2,-128
  804064:	10000826 	beq	r2,zero,804088 <logic+0x3c88>
  804068:	e0bffc17 	ldw	r2,-16(fp)
  80406c:	10804443 	ldbu	r2,273(r2)
  804070:	10803fcc 	andi	r2,r2,255
  804074:	1080201c 	xori	r2,r2,128
  804078:	10bfe004 	addi	r2,r2,-128
  80407c:	1000021e 	bne	r2,zero,804088 <logic+0x3c88>
  804080:	00800044 	movi	r2,1
  804084:	00000106 	br	80408c <logic+0x3c8c>
  804088:	0005883a 	mov	r2,zero
  80408c:	1007883a 	mov	r3,r2
  804090:	e0bffc17 	ldw	r2,-16(fp)
  804094:	10c030c5 	stb	r3,195(r2)
  if (d->_g113) {
  804098:	e0bffc17 	ldw	r2,-16(fp)
  80409c:	108030c3 	ldbu	r2,195(r2)
  8040a0:	10803fcc 	andi	r2,r2,255
  8040a4:	1080201c 	xori	r2,r2,128
  8040a8:	10bfe004 	addi	r2,r2,-128
  8040ac:	10000626 	beq	r2,zero,8040c8 <logic+0x3cc8>
    d->VP |= 1;
  8040b0:	e0bffc17 	ldw	r2,-16(fp)
  8040b4:	108017c3 	ldbu	r2,95(r2)
  8040b8:	10800054 	ori	r2,r2,1
  8040bc:	1007883a 	mov	r3,r2
  8040c0:	e0bffc17 	ldw	r2,-16(fp)
  8040c4:	10c017c5 	stb	r3,95(r2)
  }
  d->_g113_e1 = d->_pg122;
  8040c8:	e0bffc17 	ldw	r2,-16(fp)
  8040cc:	10c051c3 	ldbu	r3,327(r2)
  8040d0:	e0bffc17 	ldw	r2,-16(fp)
  8040d4:	10c04905 	stb	r3,292(r2)
  d->_cg104 = d->V_event;
  8040d8:	e0bffc17 	ldw	r2,-16(fp)
  8040dc:	10c01803 	ldbu	r3,96(r2)
  8040e0:	e0bffc17 	ldw	r2,-16(fp)
  8040e4:	10c04205 	stb	r3,264(r2)
  d->_g122 = d->_GO || d->_g113 || d->_g113_e1 && !d->_cg104;
  8040e8:	e0bffc17 	ldw	r2,-16(fp)
  8040ec:	10803903 	ldbu	r2,228(r2)
  8040f0:	10803fcc 	andi	r2,r2,255
  8040f4:	1080201c 	xori	r2,r2,128
  8040f8:	10bfe004 	addi	r2,r2,-128
  8040fc:	1000121e 	bne	r2,zero,804148 <logic+0x3d48>
  804100:	e0bffc17 	ldw	r2,-16(fp)
  804104:	108030c3 	ldbu	r2,195(r2)
  804108:	10803fcc 	andi	r2,r2,255
  80410c:	1080201c 	xori	r2,r2,128
  804110:	10bfe004 	addi	r2,r2,-128
  804114:	10000c1e 	bne	r2,zero,804148 <logic+0x3d48>
  804118:	e0bffc17 	ldw	r2,-16(fp)
  80411c:	10804903 	ldbu	r2,292(r2)
  804120:	10803fcc 	andi	r2,r2,255
  804124:	1080201c 	xori	r2,r2,128
  804128:	10bfe004 	addi	r2,r2,-128
  80412c:	10000826 	beq	r2,zero,804150 <logic+0x3d50>
  804130:	e0bffc17 	ldw	r2,-16(fp)
  804134:	10804203 	ldbu	r2,264(r2)
  804138:	10803fcc 	andi	r2,r2,255
  80413c:	1080201c 	xori	r2,r2,128
  804140:	10bfe004 	addi	r2,r2,-128
  804144:	1000021e 	bne	r2,zero,804150 <logic+0x3d50>
  804148:	00800044 	movi	r2,1
  80414c:	00000106 	br	804154 <logic+0x3d54>
  804150:	0005883a 	mov	r2,zero
  804154:	1007883a 	mov	r3,r2
  804158:	e0bffc17 	ldw	r2,-16(fp)
  80415c:	10c03245 	stb	r3,201(r2)
  d->_g122_e2 = d->_g113_e1 && d->_cg104;
  804160:	e0bffc17 	ldw	r2,-16(fp)
  804164:	10804903 	ldbu	r2,292(r2)
  804168:	10803fcc 	andi	r2,r2,255
  80416c:	1080201c 	xori	r2,r2,128
  804170:	10bfe004 	addi	r2,r2,-128
  804174:	10000826 	beq	r2,zero,804198 <logic+0x3d98>
  804178:	e0bffc17 	ldw	r2,-16(fp)
  80417c:	10804203 	ldbu	r2,264(r2)
  804180:	10803fcc 	andi	r2,r2,255
  804184:	1080201c 	xori	r2,r2,128
  804188:	10bfe004 	addi	r2,r2,-128
  80418c:	10000226 	beq	r2,zero,804198 <logic+0x3d98>
  804190:	00800044 	movi	r2,1
  804194:	00000106 	br	80419c <logic+0x3d9c>
  804198:	0005883a 	mov	r2,zero
  80419c:	1007883a 	mov	r3,r2
  8041a0:	e0bffc17 	ldw	r2,-16(fp)
  8041a4:	10c04945 	stb	r3,293(r2)
  if (d->_g122_e2) {
  8041a8:	e0bffc17 	ldw	r2,-16(fp)
  8041ac:	10804943 	ldbu	r2,293(r2)
  8041b0:	10803fcc 	andi	r2,r2,255
  8041b4:	1080201c 	xori	r2,r2,128
  8041b8:	10bfe004 	addi	r2,r2,-128
  8041bc:	10000326 	beq	r2,zero,8041cc <logic+0x3dcc>
    d->_region4_LRI_timer_t = 0;
  8041c0:	e0bffc17 	ldw	r2,-16(fp)
  8041c4:	10000f15 	stw	zero,60(r2)
  8041c8:	10001015 	stw	zero,64(r2)
  }
  d->_g127 = d->_g121 && d->_cg125;
  8041cc:	e0bffc17 	ldw	r2,-16(fp)
  8041d0:	10803203 	ldbu	r2,200(r2)
  8041d4:	10803fcc 	andi	r2,r2,255
  8041d8:	1080201c 	xori	r2,r2,128
  8041dc:	10bfe004 	addi	r2,r2,-128
  8041e0:	10000826 	beq	r2,zero,804204 <logic+0x3e04>
  8041e4:	e0bffc17 	ldw	r2,-16(fp)
  8041e8:	10804443 	ldbu	r2,273(r2)
  8041ec:	10803fcc 	andi	r2,r2,255
  8041f0:	1080201c 	xori	r2,r2,128
  8041f4:	10bfe004 	addi	r2,r2,-128
  8041f8:	10000226 	beq	r2,zero,804204 <logic+0x3e04>
  8041fc:	00800044 	movi	r2,1
  804200:	00000106 	br	804208 <logic+0x3e08>
  804204:	0005883a 	mov	r2,zero
  804208:	1007883a 	mov	r3,r2
  80420c:	e0bffc17 	ldw	r2,-16(fp)
  804210:	10c03385 	stb	r3,206(r2)
  if (d->_g127) {
  804214:	e0bffc17 	ldw	r2,-16(fp)
  804218:	10803383 	ldbu	r2,206(r2)
  80421c:	10803fcc 	andi	r2,r2,255
  804220:	1080201c 	xori	r2,r2,128
  804224:	10bfe004 	addi	r2,r2,-128
  804228:	10000326 	beq	r2,zero,804238 <logic+0x3e38>
    d->_region4_LRI_timer_t = 0;
  80422c:	e0bffc17 	ldw	r2,-16(fp)
  804230:	10000f15 	stw	zero,60(r2)
  804234:	10001015 	stw	zero,64(r2)
  }
  d->_g104 = d->_g122_e2 || d->_g127;
  804238:	e0bffc17 	ldw	r2,-16(fp)
  80423c:	10804943 	ldbu	r2,293(r2)
  804240:	10803fcc 	andi	r2,r2,255
  804244:	1080201c 	xori	r2,r2,128
  804248:	10bfe004 	addi	r2,r2,-128
  80424c:	1000061e 	bne	r2,zero,804268 <logic+0x3e68>
  804250:	e0bffc17 	ldw	r2,-16(fp)
  804254:	10803383 	ldbu	r2,206(r2)
  804258:	10803fcc 	andi	r2,r2,255
  80425c:	1080201c 	xori	r2,r2,128
  804260:	10bfe004 	addi	r2,r2,-128
  804264:	10000226 	beq	r2,zero,804270 <logic+0x3e70>
  804268:	00800044 	movi	r2,1
  80426c:	00000106 	br	804274 <logic+0x3e74>
  804270:	0005883a 	mov	r2,zero
  804274:	1007883a 	mov	r3,r2
  804278:	e0bffc17 	ldw	r2,-16(fp)
  80427c:	10c02f05 	stb	r3,188(r2)
  if (d->_g104) {
  804280:	e0bffc17 	ldw	r2,-16(fp)
  804284:	10802f03 	ldbu	r2,188(r2)
  804288:	10803fcc 	andi	r2,r2,255
  80428c:	1080201c 	xori	r2,r2,128
  804290:	10bfe004 	addi	r2,r2,-128
  804294:	10000426 	beq	r2,zero,8042a8 <logic+0x3ea8>
    d->_Pacemaker_local__Atrig8 = 0;
  804298:	e0bffc17 	ldw	r2,-16(fp)
  80429c:	10001c05 	stb	zero,112(r2)
    d->_Pacemaker_local__Atrig9 = 0;
  8042a0:	e0bffc17 	ldw	r2,-16(fp)
  8042a4:	10001c45 	stb	zero,113(r2)
  }
  d->_cg107 = d->_region4_LRI_timer_t < d->LRI_Constraint;
  8042a8:	e0bffc17 	ldw	r2,-16(fp)
  8042ac:	14000f17 	ldw	r16,60(r2)
  8042b0:	14401017 	ldw	r17,64(r2)
  8042b4:	e0bffc17 	ldw	r2,-16(fp)
  8042b8:	10800517 	ldw	r2,20(r2)
  8042bc:	1009883a 	mov	r4,r2
  8042c0:	08064e40 	call	8064e4 <__floatsidf>
  8042c4:	1009883a 	mov	r4,r2
  8042c8:	180b883a 	mov	r5,r3
  8042cc:	04800044 	movi	r18,1
  8042d0:	200d883a 	mov	r6,r4
  8042d4:	280f883a 	mov	r7,r5
  8042d8:	8009883a 	mov	r4,r16
  8042dc:	880b883a 	mov	r5,r17
  8042e0:	0805af40 	call	805af4 <__ledf2>
  8042e4:	10000116 	blt	r2,zero,8042ec <logic+0x3eec>
  8042e8:	0025883a 	mov	r18,zero
  8042ec:	9007883a 	mov	r3,r18
  8042f0:	e0bffc17 	ldw	r2,-16(fp)
  8042f4:	10c04245 	stb	r3,265(r2)
  d->_g125 = d->_g104 && d->_cg107;
  8042f8:	e0bffc17 	ldw	r2,-16(fp)
  8042fc:	10802f03 	ldbu	r2,188(r2)
  804300:	10803fcc 	andi	r2,r2,255
  804304:	1080201c 	xori	r2,r2,128
  804308:	10bfe004 	addi	r2,r2,-128
  80430c:	10000826 	beq	r2,zero,804330 <logic+0x3f30>
  804310:	e0bffc17 	ldw	r2,-16(fp)
  804314:	10804243 	ldbu	r2,265(r2)
  804318:	10803fcc 	andi	r2,r2,255
  80431c:	1080201c 	xori	r2,r2,128
  804320:	10bfe004 	addi	r2,r2,-128
  804324:	10000226 	beq	r2,zero,804330 <logic+0x3f30>
  804328:	00800044 	movi	r2,1
  80432c:	00000106 	br	804334 <logic+0x3f34>
  804330:	0005883a 	mov	r2,zero
  804334:	1007883a 	mov	r3,r2
  804338:	e0bffc17 	ldw	r2,-16(fp)
  80433c:	10c03305 	stb	r3,204(r2)
  if (d->_g125) {
  804340:	e0bffc17 	ldw	r2,-16(fp)
  804344:	10803303 	ldbu	r2,204(r2)
  804348:	10803fcc 	andi	r2,r2,255
  80434c:	1080201c 	xori	r2,r2,128
  804350:	10bfe004 	addi	r2,r2,-128
  804354:	10003426 	beq	r2,zero,804428 <logic+0x4028>
    d->sleepT = (d->sleepT < (d->LRI_Constraint - d->_region4_LRI_timer_t)) ? d->sleepT : (d->LRI_Constraint - d->_region4_LRI_timer_t);
  804358:	e0bffc17 	ldw	r2,-16(fp)
  80435c:	14001517 	ldw	r16,84(r2)
  804360:	14401617 	ldw	r17,88(r2)
  804364:	e0bffc17 	ldw	r2,-16(fp)
  804368:	10800517 	ldw	r2,20(r2)
  80436c:	1009883a 	mov	r4,r2
  804370:	08064e40 	call	8064e4 <__floatsidf>
  804374:	1011883a 	mov	r8,r2
  804378:	1813883a 	mov	r9,r3
  80437c:	e13ffc17 	ldw	r4,-16(fp)
  804380:	20800f17 	ldw	r2,60(r4)
  804384:	20c01017 	ldw	r3,64(r4)
  804388:	100d883a 	mov	r6,r2
  80438c:	180f883a 	mov	r7,r3
  804390:	4009883a 	mov	r4,r8
  804394:	480b883a 	mov	r5,r9
  804398:	0805be80 	call	805be8 <__subdf3>
  80439c:	1009883a 	mov	r4,r2
  8043a0:	180b883a 	mov	r5,r3
  8043a4:	2005883a 	mov	r2,r4
  8043a8:	2807883a 	mov	r3,r5
  8043ac:	100d883a 	mov	r6,r2
  8043b0:	180f883a 	mov	r7,r3
  8043b4:	8009883a 	mov	r4,r16
  8043b8:	880b883a 	mov	r5,r17
  8043bc:	0805af40 	call	805af4 <__ledf2>
  8043c0:	1000040e 	bge	r2,zero,8043d4 <logic+0x3fd4>
  8043c4:	e13ffc17 	ldw	r4,-16(fp)
  8043c8:	20801517 	ldw	r2,84(r4)
  8043cc:	20c01617 	ldw	r3,88(r4)
  8043d0:	00001206 	br	80441c <logic+0x401c>
  8043d4:	e0bffc17 	ldw	r2,-16(fp)
  8043d8:	10800517 	ldw	r2,20(r2)
  8043dc:	1009883a 	mov	r4,r2
  8043e0:	08064e40 	call	8064e4 <__floatsidf>
  8043e4:	1011883a 	mov	r8,r2
  8043e8:	1813883a 	mov	r9,r3
  8043ec:	e13ffc17 	ldw	r4,-16(fp)
  8043f0:	20800f17 	ldw	r2,60(r4)
  8043f4:	20c01017 	ldw	r3,64(r4)
  8043f8:	100d883a 	mov	r6,r2
  8043fc:	180f883a 	mov	r7,r3
  804400:	4009883a 	mov	r4,r8
  804404:	480b883a 	mov	r5,r9
  804408:	0805be80 	call	805be8 <__subdf3>
  80440c:	1009883a 	mov	r4,r2
  804410:	180b883a 	mov	r5,r3
  804414:	2005883a 	mov	r2,r4
  804418:	2807883a 	mov	r3,r5
  80441c:	e13ffc17 	ldw	r4,-16(fp)
  804420:	20801515 	stw	r2,84(r4)
  804424:	20c01615 	stw	r3,88(r4)
  }
  d->_cg108 = d->_Pacemaker_local__Atrig8 || d->_Pacemaker_local__Atrig9;
  804428:	e0bffc17 	ldw	r2,-16(fp)
  80442c:	10801c03 	ldbu	r2,112(r2)
  804430:	10803fcc 	andi	r2,r2,255
  804434:	1080201c 	xori	r2,r2,128
  804438:	10bfe004 	addi	r2,r2,-128
  80443c:	1000061e 	bne	r2,zero,804458 <logic+0x4058>
  804440:	e0bffc17 	ldw	r2,-16(fp)
  804444:	10801c43 	ldbu	r2,113(r2)
  804448:	10803fcc 	andi	r2,r2,255
  80444c:	1080201c 	xori	r2,r2,128
  804450:	10bfe004 	addi	r2,r2,-128
  804454:	10000226 	beq	r2,zero,804460 <logic+0x4060>
  804458:	00800044 	movi	r2,1
  80445c:	00000106 	br	804464 <logic+0x4064>
  804460:	0005883a 	mov	r2,zero
  804464:	1007883a 	mov	r3,r2
  804468:	e0bffc17 	ldw	r2,-16(fp)
  80446c:	10c04285 	stb	r3,266(r2)
  d->_g105 = d->_g125 && !d->_cg108 || d->_g110 && !d->_cg112;
  804470:	e0bffc17 	ldw	r2,-16(fp)
  804474:	10803303 	ldbu	r2,204(r2)
  804478:	10803fcc 	andi	r2,r2,255
  80447c:	1080201c 	xori	r2,r2,128
  804480:	10bfe004 	addi	r2,r2,-128
  804484:	10000626 	beq	r2,zero,8044a0 <logic+0x40a0>
  804488:	e0bffc17 	ldw	r2,-16(fp)
  80448c:	10804283 	ldbu	r2,266(r2)
  804490:	10803fcc 	andi	r2,r2,255
  804494:	1080201c 	xori	r2,r2,128
  804498:	10bfe004 	addi	r2,r2,-128
  80449c:	10000c26 	beq	r2,zero,8044d0 <logic+0x40d0>
  8044a0:	e0bffc17 	ldw	r2,-16(fp)
  8044a4:	10803003 	ldbu	r2,192(r2)
  8044a8:	10803fcc 	andi	r2,r2,255
  8044ac:	1080201c 	xori	r2,r2,128
  8044b0:	10bfe004 	addi	r2,r2,-128
  8044b4:	10000826 	beq	r2,zero,8044d8 <logic+0x40d8>
  8044b8:	e0bffc17 	ldw	r2,-16(fp)
  8044bc:	108042c3 	ldbu	r2,267(r2)
  8044c0:	10803fcc 	andi	r2,r2,255
  8044c4:	1080201c 	xori	r2,r2,128
  8044c8:	10bfe004 	addi	r2,r2,-128
  8044cc:	1000021e 	bne	r2,zero,8044d8 <logic+0x40d8>
  8044d0:	00800044 	movi	r2,1
  8044d4:	00000106 	br	8044dc <logic+0x40dc>
  8044d8:	0005883a 	mov	r2,zero
  8044dc:	1007883a 	mov	r3,r2
  8044e0:	e0bffc17 	ldw	r2,-16(fp)
  8044e4:	10c02f45 	stb	r3,189(r2)
  d->_g126 = d->_g104 && !d->_cg107;
  8044e8:	e0bffc17 	ldw	r2,-16(fp)
  8044ec:	10802f03 	ldbu	r2,188(r2)
  8044f0:	10803fcc 	andi	r2,r2,255
  8044f4:	1080201c 	xori	r2,r2,128
  8044f8:	10bfe004 	addi	r2,r2,-128
  8044fc:	10000826 	beq	r2,zero,804520 <logic+0x4120>
  804500:	e0bffc17 	ldw	r2,-16(fp)
  804504:	10804243 	ldbu	r2,265(r2)
  804508:	10803fcc 	andi	r2,r2,255
  80450c:	1080201c 	xori	r2,r2,128
  804510:	10bfe004 	addi	r2,r2,-128
  804514:	1000021e 	bne	r2,zero,804520 <logic+0x4120>
  804518:	00800044 	movi	r2,1
  80451c:	00000106 	br	804524 <logic+0x4124>
  804520:	0005883a 	mov	r2,zero
  804524:	1007883a 	mov	r3,r2
  804528:	e0bffc17 	ldw	r2,-16(fp)
  80452c:	10c03345 	stb	r3,205(r2)
  d->_cg117 = d->_Pacemaker_local__Atrig8 || d->_Pacemaker_local__Atrig9;
  804530:	e0bffc17 	ldw	r2,-16(fp)
  804534:	10801c03 	ldbu	r2,112(r2)
  804538:	10803fcc 	andi	r2,r2,255
  80453c:	1080201c 	xori	r2,r2,128
  804540:	10bfe004 	addi	r2,r2,-128
  804544:	1000061e 	bne	r2,zero,804560 <logic+0x4160>
  804548:	e0bffc17 	ldw	r2,-16(fp)
  80454c:	10801c43 	ldbu	r2,113(r2)
  804550:	10803fcc 	andi	r2,r2,255
  804554:	1080201c 	xori	r2,r2,128
  804558:	10bfe004 	addi	r2,r2,-128
  80455c:	10000226 	beq	r2,zero,804568 <logic+0x4168>
  804560:	00800044 	movi	r2,1
  804564:	00000106 	br	80456c <logic+0x416c>
  804568:	0005883a 	mov	r2,zero
  80456c:	1007883a 	mov	r3,r2
  804570:	e0bffc17 	ldw	r2,-16(fp)
  804574:	10c04385 	stb	r3,270(r2)
  d->_g112 = d->_g111 && !d->_cg114 || d->_g126 && !d->_cg117;
  804578:	e0bffc17 	ldw	r2,-16(fp)
  80457c:	10803043 	ldbu	r2,193(r2)
  804580:	10803fcc 	andi	r2,r2,255
  804584:	1080201c 	xori	r2,r2,128
  804588:	10bfe004 	addi	r2,r2,-128
  80458c:	10000626 	beq	r2,zero,8045a8 <logic+0x41a8>
  804590:	e0bffc17 	ldw	r2,-16(fp)
  804594:	10804343 	ldbu	r2,269(r2)
  804598:	10803fcc 	andi	r2,r2,255
  80459c:	1080201c 	xori	r2,r2,128
  8045a0:	10bfe004 	addi	r2,r2,-128
  8045a4:	10000c26 	beq	r2,zero,8045d8 <logic+0x41d8>
  8045a8:	e0bffc17 	ldw	r2,-16(fp)
  8045ac:	10803343 	ldbu	r2,205(r2)
  8045b0:	10803fcc 	andi	r2,r2,255
  8045b4:	1080201c 	xori	r2,r2,128
  8045b8:	10bfe004 	addi	r2,r2,-128
  8045bc:	10000826 	beq	r2,zero,8045e0 <logic+0x41e0>
  8045c0:	e0bffc17 	ldw	r2,-16(fp)
  8045c4:	10804383 	ldbu	r2,270(r2)
  8045c8:	10803fcc 	andi	r2,r2,255
  8045cc:	1080201c 	xori	r2,r2,128
  8045d0:	10bfe004 	addi	r2,r2,-128
  8045d4:	1000021e 	bne	r2,zero,8045e0 <logic+0x41e0>
  8045d8:	00800044 	movi	r2,1
  8045dc:	00000106 	br	8045e4 <logic+0x41e4>
  8045e0:	0005883a 	mov	r2,zero
  8045e4:	1007883a 	mov	r3,r2
  8045e8:	e0bffc17 	ldw	r2,-16(fp)
  8045ec:	10c03085 	stb	r3,194(r2)
  d->_g108 = d->_g104 || d->_g123 && !d->_cg123;
  8045f0:	e0bffc17 	ldw	r2,-16(fp)
  8045f4:	10802f03 	ldbu	r2,188(r2)
  8045f8:	10803fcc 	andi	r2,r2,255
  8045fc:	1080201c 	xori	r2,r2,128
  804600:	10bfe004 	addi	r2,r2,-128
  804604:	10000c1e 	bne	r2,zero,804638 <logic+0x4238>
  804608:	e0bffc17 	ldw	r2,-16(fp)
  80460c:	10803283 	ldbu	r2,202(r2)
  804610:	10803fcc 	andi	r2,r2,255
  804614:	1080201c 	xori	r2,r2,128
  804618:	10bfe004 	addi	r2,r2,-128
  80461c:	10000826 	beq	r2,zero,804640 <logic+0x4240>
  804620:	e0bffc17 	ldw	r2,-16(fp)
  804624:	108043c3 	ldbu	r2,271(r2)
  804628:	10803fcc 	andi	r2,r2,255
  80462c:	1080201c 	xori	r2,r2,128
  804630:	10bfe004 	addi	r2,r2,-128
  804634:	1000021e 	bne	r2,zero,804640 <logic+0x4240>
  804638:	00800044 	movi	r2,1
  80463c:	00000106 	br	804644 <logic+0x4244>
  804640:	0005883a 	mov	r2,zero
  804644:	1007883a 	mov	r3,r2
  804648:	e0bffc17 	ldw	r2,-16(fp)
  80464c:	10c02fc5 	stb	r3,191(r2)
  d->_g117 = d->_GO || d->_g149_e2 || d->_g131 && !d->_cg131;
  804650:	e0bffc17 	ldw	r2,-16(fp)
  804654:	10803903 	ldbu	r2,228(r2)
  804658:	10803fcc 	andi	r2,r2,255
  80465c:	1080201c 	xori	r2,r2,128
  804660:	10bfe004 	addi	r2,r2,-128
  804664:	1000121e 	bne	r2,zero,8046b0 <logic+0x42b0>
  804668:	e0bffc17 	ldw	r2,-16(fp)
  80466c:	108049c3 	ldbu	r2,295(r2)
  804670:	10803fcc 	andi	r2,r2,255
  804674:	1080201c 	xori	r2,r2,128
  804678:	10bfe004 	addi	r2,r2,-128
  80467c:	10000c1e 	bne	r2,zero,8046b0 <logic+0x42b0>
  804680:	e0bffc17 	ldw	r2,-16(fp)
  804684:	108033c3 	ldbu	r2,207(r2)
  804688:	10803fcc 	andi	r2,r2,255
  80468c:	1080201c 	xori	r2,r2,128
  804690:	10bfe004 	addi	r2,r2,-128
  804694:	10000826 	beq	r2,zero,8046b8 <logic+0x42b8>
  804698:	e0bffc17 	ldw	r2,-16(fp)
  80469c:	10804483 	ldbu	r2,274(r2)
  8046a0:	10803fcc 	andi	r2,r2,255
  8046a4:	1080201c 	xori	r2,r2,128
  8046a8:	10bfe004 	addi	r2,r2,-128
  8046ac:	1000021e 	bne	r2,zero,8046b8 <logic+0x42b8>
  8046b0:	00800044 	movi	r2,1
  8046b4:	00000106 	br	8046bc <logic+0x42bc>
  8046b8:	0005883a 	mov	r2,zero
  8046bc:	1007883a 	mov	r3,r2
  8046c0:	e0bffc17 	ldw	r2,-16(fp)
  8046c4:	10c03185 	stb	r3,198(r2)
  d->_g114 = d->_g148 && d->_cg152;
  8046c8:	e0bffc17 	ldw	r2,-16(fp)
  8046cc:	10803683 	ldbu	r2,218(r2)
  8046d0:	10803fcc 	andi	r2,r2,255
  8046d4:	1080201c 	xori	r2,r2,128
  8046d8:	10bfe004 	addi	r2,r2,-128
  8046dc:	10000826 	beq	r2,zero,804700 <logic+0x4300>
  8046e0:	e0bffc17 	ldw	r2,-16(fp)
  8046e4:	108046c3 	ldbu	r2,283(r2)
  8046e8:	10803fcc 	andi	r2,r2,255
  8046ec:	1080201c 	xori	r2,r2,128
  8046f0:	10bfe004 	addi	r2,r2,-128
  8046f4:	10000226 	beq	r2,zero,804700 <logic+0x4300>
  8046f8:	00800044 	movi	r2,1
  8046fc:	00000106 	br	804704 <logic+0x4304>
  804700:	0005883a 	mov	r2,zero
  804704:	1007883a 	mov	r3,r2
  804708:	e0bffc17 	ldw	r2,-16(fp)
  80470c:	10c03105 	stb	r3,196(r2)
  if (d->_g114) {
  804710:	e0bffc17 	ldw	r2,-16(fp)
  804714:	10803103 	ldbu	r2,196(r2)
  804718:	10803fcc 	andi	r2,r2,255
  80471c:	1080201c 	xori	r2,r2,128
  804720:	10bfe004 	addi	r2,r2,-128
  804724:	10000326 	beq	r2,zero,804734 <logic+0x4334>
    d->_region5_URI_timer_t = 0;
  804728:	e0bffc17 	ldw	r2,-16(fp)
  80472c:	10001115 	stw	zero,68(r2)
  804730:	10001215 	stw	zero,72(r2)
  }
  d->_g123 = d->_g132 || d->_g114;
  804734:	e0bffc17 	ldw	r2,-16(fp)
  804738:	10803403 	ldbu	r2,208(r2)
  80473c:	10803fcc 	andi	r2,r2,255
  804740:	1080201c 	xori	r2,r2,128
  804744:	10bfe004 	addi	r2,r2,-128
  804748:	1000061e 	bne	r2,zero,804764 <logic+0x4364>
  80474c:	e0bffc17 	ldw	r2,-16(fp)
  804750:	10803103 	ldbu	r2,196(r2)
  804754:	10803fcc 	andi	r2,r2,255
  804758:	1080201c 	xori	r2,r2,128
  80475c:	10bfe004 	addi	r2,r2,-128
  804760:	10000226 	beq	r2,zero,80476c <logic+0x436c>
  804764:	00800044 	movi	r2,1
  804768:	00000106 	br	804770 <logic+0x4370>
  80476c:	0005883a 	mov	r2,zero
  804770:	1007883a 	mov	r3,r2
  804774:	e0bffc17 	ldw	r2,-16(fp)
  804778:	10c03285 	stb	r3,202(r2)
  if (d->_g123) {
  80477c:	e0bffc17 	ldw	r2,-16(fp)
  804780:	10803283 	ldbu	r2,202(r2)
  804784:	10803fcc 	andi	r2,r2,255
  804788:	1080201c 	xori	r2,r2,128
  80478c:	10bfe004 	addi	r2,r2,-128
  804790:	10000426 	beq	r2,zero,8047a4 <logic+0x43a4>
    d->_Pacemaker_local__Atrig10 = 0;
  804794:	e0bffc17 	ldw	r2,-16(fp)
  804798:	10001c85 	stb	zero,114(r2)
    d->_Pacemaker_local__Atrig11 = 0;
  80479c:	e0bffc17 	ldw	r2,-16(fp)
  8047a0:	10001cc5 	stb	zero,115(r2)
  }
  d->_cg134 = d->_region5_URI_timer_t < d->URI_Constraint;
  8047a4:	e0bffc17 	ldw	r2,-16(fp)
  8047a8:	14001117 	ldw	r16,68(r2)
  8047ac:	14401217 	ldw	r17,72(r2)
  8047b0:	e0bffc17 	ldw	r2,-16(fp)
  8047b4:	10800617 	ldw	r2,24(r2)
  8047b8:	1009883a 	mov	r4,r2
  8047bc:	08064e40 	call	8064e4 <__floatsidf>
  8047c0:	1009883a 	mov	r4,r2
  8047c4:	180b883a 	mov	r5,r3
  8047c8:	04800044 	movi	r18,1
  8047cc:	200d883a 	mov	r6,r4
  8047d0:	280f883a 	mov	r7,r5
  8047d4:	8009883a 	mov	r4,r16
  8047d8:	880b883a 	mov	r5,r17
  8047dc:	0805af40 	call	805af4 <__ledf2>
  8047e0:	10000116 	blt	r2,zero,8047e8 <logic+0x43e8>
  8047e4:	0025883a 	mov	r18,zero
  8047e8:	9007883a 	mov	r3,r18
  8047ec:	e0bffc17 	ldw	r2,-16(fp)
  8047f0:	10c044c5 	stb	r3,275(r2)
  d->_g106 = d->_g123 && d->_cg134;
  8047f4:	e0bffc17 	ldw	r2,-16(fp)
  8047f8:	10803283 	ldbu	r2,202(r2)
  8047fc:	10803fcc 	andi	r2,r2,255
  804800:	1080201c 	xori	r2,r2,128
  804804:	10bfe004 	addi	r2,r2,-128
  804808:	10000826 	beq	r2,zero,80482c <logic+0x442c>
  80480c:	e0bffc17 	ldw	r2,-16(fp)
  804810:	108044c3 	ldbu	r2,275(r2)
  804814:	10803fcc 	andi	r2,r2,255
  804818:	1080201c 	xori	r2,r2,128
  80481c:	10bfe004 	addi	r2,r2,-128
  804820:	10000226 	beq	r2,zero,80482c <logic+0x442c>
  804824:	00800044 	movi	r2,1
  804828:	00000106 	br	804830 <logic+0x4430>
  80482c:	0005883a 	mov	r2,zero
  804830:	1007883a 	mov	r3,r2
  804834:	e0bffc17 	ldw	r2,-16(fp)
  804838:	10c02f85 	stb	r3,190(r2)
  if (d->_g106) {
  80483c:	e0bffc17 	ldw	r2,-16(fp)
  804840:	10802f83 	ldbu	r2,190(r2)
  804844:	10803fcc 	andi	r2,r2,255
  804848:	1080201c 	xori	r2,r2,128
  80484c:	10bfe004 	addi	r2,r2,-128
  804850:	10003426 	beq	r2,zero,804924 <logic+0x4524>
    d->sleepT = (d->sleepT < (d->URI_Constraint - d->_region5_URI_timer_t)) ? d->sleepT : (d->URI_Constraint - d->_region5_URI_timer_t);
  804854:	e0bffc17 	ldw	r2,-16(fp)
  804858:	14001517 	ldw	r16,84(r2)
  80485c:	14401617 	ldw	r17,88(r2)
  804860:	e0bffc17 	ldw	r2,-16(fp)
  804864:	10800617 	ldw	r2,24(r2)
  804868:	1009883a 	mov	r4,r2
  80486c:	08064e40 	call	8064e4 <__floatsidf>
  804870:	1011883a 	mov	r8,r2
  804874:	1813883a 	mov	r9,r3
  804878:	e13ffc17 	ldw	r4,-16(fp)
  80487c:	20801117 	ldw	r2,68(r4)
  804880:	20c01217 	ldw	r3,72(r4)
  804884:	100d883a 	mov	r6,r2
  804888:	180f883a 	mov	r7,r3
  80488c:	4009883a 	mov	r4,r8
  804890:	480b883a 	mov	r5,r9
  804894:	0805be80 	call	805be8 <__subdf3>
  804898:	1009883a 	mov	r4,r2
  80489c:	180b883a 	mov	r5,r3
  8048a0:	2005883a 	mov	r2,r4
  8048a4:	2807883a 	mov	r3,r5
  8048a8:	100d883a 	mov	r6,r2
  8048ac:	180f883a 	mov	r7,r3
  8048b0:	8009883a 	mov	r4,r16
  8048b4:	880b883a 	mov	r5,r17
  8048b8:	0805af40 	call	805af4 <__ledf2>
  8048bc:	1000040e 	bge	r2,zero,8048d0 <logic+0x44d0>
  8048c0:	e13ffc17 	ldw	r4,-16(fp)
  8048c4:	20801517 	ldw	r2,84(r4)
  8048c8:	20c01617 	ldw	r3,88(r4)
  8048cc:	00001206 	br	804918 <logic+0x4518>
  8048d0:	e0bffc17 	ldw	r2,-16(fp)
  8048d4:	10800617 	ldw	r2,24(r2)
  8048d8:	1009883a 	mov	r4,r2
  8048dc:	08064e40 	call	8064e4 <__floatsidf>
  8048e0:	1011883a 	mov	r8,r2
  8048e4:	1813883a 	mov	r9,r3
  8048e8:	e13ffc17 	ldw	r4,-16(fp)
  8048ec:	20801117 	ldw	r2,68(r4)
  8048f0:	20c01217 	ldw	r3,72(r4)
  8048f4:	100d883a 	mov	r6,r2
  8048f8:	180f883a 	mov	r7,r3
  8048fc:	4009883a 	mov	r4,r8
  804900:	480b883a 	mov	r5,r9
  804904:	0805be80 	call	805be8 <__subdf3>
  804908:	1009883a 	mov	r4,r2
  80490c:	180b883a 	mov	r5,r3
  804910:	2005883a 	mov	r2,r4
  804914:	2807883a 	mov	r3,r5
  804918:	e13ffc17 	ldw	r4,-16(fp)
  80491c:	20801515 	stw	r2,84(r4)
  804920:	20c01615 	stw	r3,88(r4)
  }
  d->_cg135 = d->_Pacemaker_local__Atrig10 || d->_Pacemaker_local__Atrig11;
  804924:	e0bffc17 	ldw	r2,-16(fp)
  804928:	10801c83 	ldbu	r2,114(r2)
  80492c:	10803fcc 	andi	r2,r2,255
  804930:	1080201c 	xori	r2,r2,128
  804934:	10bfe004 	addi	r2,r2,-128
  804938:	1000061e 	bne	r2,zero,804954 <logic+0x4554>
  80493c:	e0bffc17 	ldw	r2,-16(fp)
  804940:	10801cc3 	ldbu	r2,115(r2)
  804944:	10803fcc 	andi	r2,r2,255
  804948:	1080201c 	xori	r2,r2,128
  80494c:	10bfe004 	addi	r2,r2,-128
  804950:	10000226 	beq	r2,zero,80495c <logic+0x455c>
  804954:	00800044 	movi	r2,1
  804958:	00000106 	br	804960 <logic+0x4560>
  80495c:	0005883a 	mov	r2,zero
  804960:	1007883a 	mov	r3,r2
  804964:	e0bffc17 	ldw	r2,-16(fp)
  804968:	10c04505 	stb	r3,276(r2)
  d->_g131 = d->_g106 && !d->_cg135 || d->_g137 && !d->_cg139;
  80496c:	e0bffc17 	ldw	r2,-16(fp)
  804970:	10802f83 	ldbu	r2,190(r2)
  804974:	10803fcc 	andi	r2,r2,255
  804978:	1080201c 	xori	r2,r2,128
  80497c:	10bfe004 	addi	r2,r2,-128
  804980:	10000626 	beq	r2,zero,80499c <logic+0x459c>
  804984:	e0bffc17 	ldw	r2,-16(fp)
  804988:	10804503 	ldbu	r2,276(r2)
  80498c:	10803fcc 	andi	r2,r2,255
  804990:	1080201c 	xori	r2,r2,128
  804994:	10bfe004 	addi	r2,r2,-128
  804998:	10000c26 	beq	r2,zero,8049cc <logic+0x45cc>
  80499c:	e0bffc17 	ldw	r2,-16(fp)
  8049a0:	10803483 	ldbu	r2,210(r2)
  8049a4:	10803fcc 	andi	r2,r2,255
  8049a8:	1080201c 	xori	r2,r2,128
  8049ac:	10bfe004 	addi	r2,r2,-128
  8049b0:	10000826 	beq	r2,zero,8049d4 <logic+0x45d4>
  8049b4:	e0bffc17 	ldw	r2,-16(fp)
  8049b8:	10804543 	ldbu	r2,277(r2)
  8049bc:	10803fcc 	andi	r2,r2,255
  8049c0:	1080201c 	xori	r2,r2,128
  8049c4:	10bfe004 	addi	r2,r2,-128
  8049c8:	1000021e 	bne	r2,zero,8049d4 <logic+0x45d4>
  8049cc:	00800044 	movi	r2,1
  8049d0:	00000106 	br	8049d8 <logic+0x45d8>
  8049d4:	0005883a 	mov	r2,zero
  8049d8:	1007883a 	mov	r3,r2
  8049dc:	e0bffc17 	ldw	r2,-16(fp)
  8049e0:	10c033c5 	stb	r3,207(r2)
  d->_g154 = d->_g123 && !d->_cg134;
  8049e4:	e0bffc17 	ldw	r2,-16(fp)
  8049e8:	10803283 	ldbu	r2,202(r2)
  8049ec:	10803fcc 	andi	r2,r2,255
  8049f0:	1080201c 	xori	r2,r2,128
  8049f4:	10bfe004 	addi	r2,r2,-128
  8049f8:	10000826 	beq	r2,zero,804a1c <logic+0x461c>
  8049fc:	e0bffc17 	ldw	r2,-16(fp)
  804a00:	108044c3 	ldbu	r2,275(r2)
  804a04:	10803fcc 	andi	r2,r2,255
  804a08:	1080201c 	xori	r2,r2,128
  804a0c:	10bfe004 	addi	r2,r2,-128
  804a10:	1000021e 	bne	r2,zero,804a1c <logic+0x461c>
  804a14:	00800044 	movi	r2,1
  804a18:	00000106 	br	804a20 <logic+0x4620>
  804a1c:	0005883a 	mov	r2,zero
  804a20:	1007883a 	mov	r3,r2
  804a24:	e0bffc17 	ldw	r2,-16(fp)
  804a28:	10c03805 	stb	r3,224(r2)
  d->_cg144 = d->_Pacemaker_local__Atrig10 || d->_Pacemaker_local__Atrig11;
  804a2c:	e0bffc17 	ldw	r2,-16(fp)
  804a30:	10801c83 	ldbu	r2,114(r2)
  804a34:	10803fcc 	andi	r2,r2,255
  804a38:	1080201c 	xori	r2,r2,128
  804a3c:	10bfe004 	addi	r2,r2,-128
  804a40:	1000061e 	bne	r2,zero,804a5c <logic+0x465c>
  804a44:	e0bffc17 	ldw	r2,-16(fp)
  804a48:	10801cc3 	ldbu	r2,115(r2)
  804a4c:	10803fcc 	andi	r2,r2,255
  804a50:	1080201c 	xori	r2,r2,128
  804a54:	10bfe004 	addi	r2,r2,-128
  804a58:	10000226 	beq	r2,zero,804a64 <logic+0x4664>
  804a5c:	00800044 	movi	r2,1
  804a60:	00000106 	br	804a68 <logic+0x4668>
  804a64:	0005883a 	mov	r2,zero
  804a68:	1007883a 	mov	r3,r2
  804a6c:	e0bffc17 	ldw	r2,-16(fp)
  804a70:	10c04605 	stb	r3,280(r2)
  d->_g152 = d->_g138 && !d->_cg141 || d->_g154 && !d->_cg144;
  804a74:	e0bffc17 	ldw	r2,-16(fp)
  804a78:	108034c3 	ldbu	r2,211(r2)
  804a7c:	10803fcc 	andi	r2,r2,255
  804a80:	1080201c 	xori	r2,r2,128
  804a84:	10bfe004 	addi	r2,r2,-128
  804a88:	10000626 	beq	r2,zero,804aa4 <logic+0x46a4>
  804a8c:	e0bffc17 	ldw	r2,-16(fp)
  804a90:	108045c3 	ldbu	r2,279(r2)
  804a94:	10803fcc 	andi	r2,r2,255
  804a98:	1080201c 	xori	r2,r2,128
  804a9c:	10bfe004 	addi	r2,r2,-128
  804aa0:	10000c26 	beq	r2,zero,804ad4 <logic+0x46d4>
  804aa4:	e0bffc17 	ldw	r2,-16(fp)
  804aa8:	10803803 	ldbu	r2,224(r2)
  804aac:	10803fcc 	andi	r2,r2,255
  804ab0:	1080201c 	xori	r2,r2,128
  804ab4:	10bfe004 	addi	r2,r2,-128
  804ab8:	10000826 	beq	r2,zero,804adc <logic+0x46dc>
  804abc:	e0bffc17 	ldw	r2,-16(fp)
  804ac0:	10804603 	ldbu	r2,280(r2)
  804ac4:	10803fcc 	andi	r2,r2,255
  804ac8:	1080201c 	xori	r2,r2,128
  804acc:	10bfe004 	addi	r2,r2,-128
  804ad0:	1000021e 	bne	r2,zero,804adc <logic+0x46dc>
  804ad4:	00800044 	movi	r2,1
  804ad8:	00000106 	br	804ae0 <logic+0x46e0>
  804adc:	0005883a 	mov	r2,zero
  804ae0:	1007883a 	mov	r3,r2
  804ae4:	e0bffc17 	ldw	r2,-16(fp)
  804ae8:	10c03785 	stb	r3,222(r2)
  d->_g153 = d->_g123 || d->_g150 && !d->_cg150;
  804aec:	e0bffc17 	ldw	r2,-16(fp)
  804af0:	10803283 	ldbu	r2,202(r2)
  804af4:	10803fcc 	andi	r2,r2,255
  804af8:	1080201c 	xori	r2,r2,128
  804afc:	10bfe004 	addi	r2,r2,-128
  804b00:	10000c1e 	bne	r2,zero,804b34 <logic+0x4734>
  804b04:	e0bffc17 	ldw	r2,-16(fp)
  804b08:	10803703 	ldbu	r2,220(r2)
  804b0c:	10803fcc 	andi	r2,r2,255
  804b10:	1080201c 	xori	r2,r2,128
  804b14:	10bfe004 	addi	r2,r2,-128
  804b18:	10000826 	beq	r2,zero,804b3c <logic+0x473c>
  804b1c:	e0bffc17 	ldw	r2,-16(fp)
  804b20:	10804643 	ldbu	r2,281(r2)
  804b24:	10803fcc 	andi	r2,r2,255
  804b28:	1080201c 	xori	r2,r2,128
  804b2c:	10bfe004 	addi	r2,r2,-128
  804b30:	1000021e 	bne	r2,zero,804b3c <logic+0x473c>
  804b34:	00800044 	movi	r2,1
  804b38:	00000106 	br	804b40 <logic+0x4740>
  804b3c:	0005883a 	mov	r2,zero
  804b40:	1007883a 	mov	r3,r2
  804b44:	e0bffc17 	ldw	r2,-16(fp)
  804b48:	10c037c5 	stb	r3,223(r2)
  d->_g132 = d->_GO || d->_g140_e1;
  804b4c:	e0bffc17 	ldw	r2,-16(fp)
  804b50:	10803903 	ldbu	r2,228(r2)
  804b54:	10803fcc 	andi	r2,r2,255
  804b58:	1080201c 	xori	r2,r2,128
  804b5c:	10bfe004 	addi	r2,r2,-128
  804b60:	1000061e 	bne	r2,zero,804b7c <logic+0x477c>
  804b64:	e0bffc17 	ldw	r2,-16(fp)
  804b68:	10804983 	ldbu	r2,294(r2)
  804b6c:	10803fcc 	andi	r2,r2,255
  804b70:	1080201c 	xori	r2,r2,128
  804b74:	10bfe004 	addi	r2,r2,-128
  804b78:	10000226 	beq	r2,zero,804b84 <logic+0x4784>
  804b7c:	00800044 	movi	r2,1
  804b80:	00000106 	br	804b88 <logic+0x4788>
  804b84:	0005883a 	mov	r2,zero
  804b88:	1007883a 	mov	r3,r2
  804b8c:	e0bffc17 	ldw	r2,-16(fp)
  804b90:	10c03405 	stb	r3,208(r2)
  d->_g135 = d->_GO || d->_g4;
  804b94:	e0bffc17 	ldw	r2,-16(fp)
  804b98:	10803903 	ldbu	r2,228(r2)
  804b9c:	10803fcc 	andi	r2,r2,255
  804ba0:	1080201c 	xori	r2,r2,128
  804ba4:	10bfe004 	addi	r2,r2,-128
  804ba8:	1000061e 	bne	r2,zero,804bc4 <logic+0x47c4>
  804bac:	e0bffc17 	ldw	r2,-16(fp)
  804bb0:	10801d03 	ldbu	r2,116(r2)
  804bb4:	10803fcc 	andi	r2,r2,255
  804bb8:	1080201c 	xori	r2,r2,128
  804bbc:	10bfe004 	addi	r2,r2,-128
  804bc0:	10000226 	beq	r2,zero,804bcc <logic+0x47cc>
  804bc4:	00800044 	movi	r2,1
  804bc8:	00000106 	br	804bd0 <logic+0x47d0>
  804bcc:	0005883a 	mov	r2,zero
  804bd0:	1007883a 	mov	r3,r2
  804bd4:	e0bffc17 	ldw	r2,-16(fp)
  804bd8:	10c03445 	stb	r3,209(r2)
  d->_g139 = d->_GO || d->_g170;
  804bdc:	e0bffc17 	ldw	r2,-16(fp)
  804be0:	10803903 	ldbu	r2,228(r2)
  804be4:	10803fcc 	andi	r2,r2,255
  804be8:	1080201c 	xori	r2,r2,128
  804bec:	10bfe004 	addi	r2,r2,-128
  804bf0:	1000061e 	bne	r2,zero,804c0c <logic+0x480c>
  804bf4:	e0bffc17 	ldw	r2,-16(fp)
  804bf8:	10803843 	ldbu	r2,225(r2)
  804bfc:	10803fcc 	andi	r2,r2,255
  804c00:	1080201c 	xori	r2,r2,128
  804c04:	10bfe004 	addi	r2,r2,-128
  804c08:	10000226 	beq	r2,zero,804c14 <logic+0x4814>
  804c0c:	00800044 	movi	r2,1
  804c10:	00000106 	br	804c18 <logic+0x4818>
  804c14:	0005883a 	mov	r2,zero
  804c18:	1007883a 	mov	r3,r2
  804c1c:	e0bffc17 	ldw	r2,-16(fp)
  804c20:	10c03505 	stb	r3,212(r2)
  d->_g141 = d->_GO || d->_g68;
  804c24:	e0bffc17 	ldw	r2,-16(fp)
  804c28:	10803903 	ldbu	r2,228(r2)
  804c2c:	10803fcc 	andi	r2,r2,255
  804c30:	1080201c 	xori	r2,r2,128
  804c34:	10bfe004 	addi	r2,r2,-128
  804c38:	1000061e 	bne	r2,zero,804c54 <logic+0x4854>
  804c3c:	e0bffc17 	ldw	r2,-16(fp)
  804c40:	108028c3 	ldbu	r2,163(r2)
  804c44:	10803fcc 	andi	r2,r2,255
  804c48:	1080201c 	xori	r2,r2,128
  804c4c:	10bfe004 	addi	r2,r2,-128
  804c50:	10000226 	beq	r2,zero,804c5c <logic+0x485c>
  804c54:	00800044 	movi	r2,1
  804c58:	00000106 	br	804c60 <logic+0x4860>
  804c5c:	0005883a 	mov	r2,zero
  804c60:	1007883a 	mov	r3,r2
  804c64:	e0bffc17 	ldw	r2,-16(fp)
  804c68:	10c03585 	stb	r3,214(r2)
  d->_g144 = d->_GO || d->_g100;
  804c6c:	e0bffc17 	ldw	r2,-16(fp)
  804c70:	10803903 	ldbu	r2,228(r2)
  804c74:	10803fcc 	andi	r2,r2,255
  804c78:	1080201c 	xori	r2,r2,128
  804c7c:	10bfe004 	addi	r2,r2,-128
  804c80:	1000061e 	bne	r2,zero,804c9c <logic+0x489c>
  804c84:	e0bffc17 	ldw	r2,-16(fp)
  804c88:	10802ec3 	ldbu	r2,187(r2)
  804c8c:	10803fcc 	andi	r2,r2,255
  804c90:	1080201c 	xori	r2,r2,128
  804c94:	10bfe004 	addi	r2,r2,-128
  804c98:	10000226 	beq	r2,zero,804ca4 <logic+0x48a4>
  804c9c:	00800044 	movi	r2,1
  804ca0:	00000106 	br	804ca8 <logic+0x48a8>
  804ca4:	0005883a 	mov	r2,zero
  804ca8:	1007883a 	mov	r3,r2
  804cac:	e0bffc17 	ldw	r2,-16(fp)
  804cb0:	10c03605 	stb	r3,216(r2)
  d->_g150 = d->_GO || d->_g182;
  804cb4:	e0bffc17 	ldw	r2,-16(fp)
  804cb8:	10803903 	ldbu	r2,228(r2)
  804cbc:	10803fcc 	andi	r2,r2,255
  804cc0:	1080201c 	xori	r2,r2,128
  804cc4:	10bfe004 	addi	r2,r2,-128
  804cc8:	1000061e 	bne	r2,zero,804ce4 <logic+0x48e4>
  804ccc:	e0bffc17 	ldw	r2,-16(fp)
  804cd0:	10803883 	ldbu	r2,226(r2)
  804cd4:	10803fcc 	andi	r2,r2,255
  804cd8:	1080201c 	xori	r2,r2,128
  804cdc:	10bfe004 	addi	r2,r2,-128
  804ce0:	10000226 	beq	r2,zero,804cec <logic+0x48ec>
  804ce4:	00800044 	movi	r2,1
  804ce8:	00000106 	br	804cf0 <logic+0x48f0>
  804cec:	0005883a 	mov	r2,zero
  804cf0:	1007883a 	mov	r3,r2
  804cf4:	e0bffc17 	ldw	r2,-16(fp)
  804cf8:	10c03705 	stb	r3,220(r2)
  d->_reg_VP = d->VP;
  804cfc:	e0bffc17 	ldw	r2,-16(fp)
  804d00:	10c017c3 	ldbu	r3,95(r2)
  804d04:	e0bffc17 	ldw	r2,-16(fp)
  804d08:	10c01905 	stb	r3,100(r2)
  if (d->_g195) {
  804d0c:	e0bffc17 	ldw	r2,-16(fp)
  804d10:	108038c3 	ldbu	r2,227(r2)
  804d14:	10803fcc 	andi	r2,r2,255
  804d18:	1080201c 	xori	r2,r2,128
  804d1c:	10bfe004 	addi	r2,r2,-128
  804d20:	10000426 	beq	r2,zero,804d34 <logic+0x4934>
    d->_reg_AP = d->AP;
  804d24:	e0bffc17 	ldw	r2,-16(fp)
  804d28:	10c01783 	ldbu	r3,94(r2)
  804d2c:	e0bffc17 	ldw	r2,-16(fp)
  804d30:	10c01985 	stb	r3,102(r2)
  }
}
  804d34:	0001883a 	nop
  804d38:	e6fffd04 	addi	sp,fp,-12
  804d3c:	dfc00417 	ldw	ra,16(sp)
  804d40:	df000317 	ldw	fp,12(sp)
  804d44:	dc800217 	ldw	r18,8(sp)
  804d48:	dc400117 	ldw	r17,4(sp)
  804d4c:	dc000017 	ldw	r16,0(sp)
  804d50:	dec00504 	addi	sp,sp,20
  804d54:	f800283a 	ret

00804d58 <reset>:

void reset(TickData* d) {
  804d58:	defffe04 	addi	sp,sp,-8
  804d5c:	df000115 	stw	fp,4(sp)
  804d60:	df000104 	addi	fp,sp,4
  804d64:	e13fff15 	stw	r4,-4(fp)
  d->_GO = 1;
  804d68:	e0bfff17 	ldw	r2,-4(fp)
  804d6c:	00c00044 	movi	r3,1
  804d70:	10c03905 	stb	r3,228(r2)
  d->_TERM = 0;
  804d74:	e0bfff17 	ldw	r2,-4(fp)
  804d78:	10004a05 	stb	zero,296(r2)
  d->AVI_Constraint = AVI_VALUE;
  804d7c:	e0bfff17 	ldw	r2,-4(fp)
  804d80:	00c04b04 	movi	r3,300
  804d84:	10c00115 	stw	r3,4(r2)
  d->PVARP_Constraint = PVARP_VALUE;
  804d88:	e0bfff17 	ldw	r2,-4(fp)
  804d8c:	00c00c84 	movi	r3,50
  804d90:	10c00215 	stw	r3,8(r2)
  d->VRP_Constraint = VRP_VALUE;
  804d94:	e0bfff17 	ldw	r2,-4(fp)
  804d98:	00c02584 	movi	r3,150
  804d9c:	10c00315 	stw	r3,12(r2)
  d->AEI_Constraint = AEI_VALUE;
  804da0:	e0bfff17 	ldw	r2,-4(fp)
  804da4:	00c0c804 	movi	r3,800
  804da8:	10c00415 	stw	r3,16(r2)
  d->LRI_Constraint = LRI_VALUE;
  804dac:	e0bfff17 	ldw	r2,-4(fp)
  804db0:	00c0ed84 	movi	r3,950
  804db4:	10c00515 	stw	r3,20(r2)
  d->URI_Constraint = URI_VALUE;
  804db8:	e0bfff17 	ldw	r2,-4(fp)
  804dbc:	00c0e104 	movi	r3,900
  804dc0:	10c00615 	stw	r3,24(r2)
  d->_region0_AVI_timer_t = 0;
  804dc4:	e0bfff17 	ldw	r2,-4(fp)
  804dc8:	10000715 	stw	zero,28(r2)
  804dcc:	10000815 	stw	zero,32(r2)
  d->_region1_PVARP_timer_t = 0;
  804dd0:	e0bfff17 	ldw	r2,-4(fp)
  804dd4:	10000915 	stw	zero,36(r2)
  804dd8:	10000a15 	stw	zero,40(r2)
  d->_region2_VRP_timer_t = 0;
  804ddc:	e0bfff17 	ldw	r2,-4(fp)
  804de0:	10000b15 	stw	zero,44(r2)
  804de4:	10000c15 	stw	zero,48(r2)
  d->_region3_AEI_timer_t = 0;
  804de8:	e0bfff17 	ldw	r2,-4(fp)
  804dec:	10000d15 	stw	zero,52(r2)
  804df0:	10000e15 	stw	zero,56(r2)
  d->_region4_LRI_timer_t = 0;
  804df4:	e0bfff17 	ldw	r2,-4(fp)
  804df8:	10000f15 	stw	zero,60(r2)
  804dfc:	10001015 	stw	zero,64(r2)
  d->_region5_URI_timer_t = 0;
  804e00:	e0bfff17 	ldw	r2,-4(fp)
  804e04:	10001115 	stw	zero,68(r2)
  804e08:	10001215 	stw	zero,72(r2)
  d->deltaT = 0.0;
  804e0c:	e0bfff17 	ldw	r2,-4(fp)
  804e10:	10001315 	stw	zero,76(r2)
  804e14:	10001415 	stw	zero,80(r2)
  d->sleepT = 0.0;
  804e18:	e0bfff17 	ldw	r2,-4(fp)
  804e1c:	10001515 	stw	zero,84(r2)
  804e20:	10001615 	stw	zero,88(r2)
  d->_reg_VP = 0;
  804e24:	e0bfff17 	ldw	r2,-4(fp)
  804e28:	10001905 	stb	zero,100(r2)
  d->_reg_AP = 0;
  804e2c:	e0bfff17 	ldw	r2,-4(fp)
  804e30:	10001985 	stb	zero,102(r2)
  d->_pg139 = 0;
  804e34:	e0bfff17 	ldw	r2,-4(fp)
  804e38:	10004a45 	stb	zero,297(r2)
  d->_pg64_e1 = 0;
  804e3c:	e0bfff17 	ldw	r2,-4(fp)
  804e40:	10004a85 	stb	zero,298(r2)
  d->_pg8 = 0;
  804e44:	e0bfff17 	ldw	r2,-4(fp)
  804e48:	10004ac5 	stb	zero,299(r2)
  d->_pg150 = 0;
  804e4c:	e0bfff17 	ldw	r2,-4(fp)
  804e50:	10004b05 	stb	zero,300(r2)
  d->_pg117 = 0;
  804e54:	e0bfff17 	ldw	r2,-4(fp)
  804e58:	10004b45 	stb	zero,301(r2)
  d->_pg152 = 0;
  804e5c:	e0bfff17 	ldw	r2,-4(fp)
  804e60:	10004b85 	stb	zero,302(r2)
  d->_pg131 = 0;
  804e64:	e0bfff17 	ldw	r2,-4(fp)
  804e68:	10004bc5 	stb	zero,303(r2)
  d->_pg153 = 0;
  804e6c:	e0bfff17 	ldw	r2,-4(fp)
  804e70:	10004c05 	stb	zero,304(r2)
  d->_pg132 = 0;
  804e74:	e0bfff17 	ldw	r2,-4(fp)
  804e78:	10004c45 	stb	zero,305(r2)
  d->_pg195 = 0;
  804e7c:	e0bfff17 	ldw	r2,-4(fp)
  804e80:	10004c85 	stb	zero,306(r2)
  d->_pg45_e2 = 0;
  804e84:	e0bfff17 	ldw	r2,-4(fp)
  804e88:	10004cc5 	stb	zero,307(r2)
  d->_pg9 = 0;
  804e8c:	e0bfff17 	ldw	r2,-4(fp)
  804e90:	10004d05 	stb	zero,308(r2)
  d->_pg10 = 0;
  804e94:	e0bfff17 	ldw	r2,-4(fp)
  804e98:	10004d45 	stb	zero,309(r2)
  d->_pg13 = 0;
  804e9c:	e0bfff17 	ldw	r2,-4(fp)
  804ea0:	10004d85 	stb	zero,310(r2)
  d->_pg48 = 0;
  804ea4:	e0bfff17 	ldw	r2,-4(fp)
  804ea8:	10004dc5 	stb	zero,311(r2)
  d->_pg50 = 0;
  804eac:	e0bfff17 	ldw	r2,-4(fp)
  804eb0:	10004e05 	stb	zero,312(r2)
  d->_pg49 = 0;
  804eb4:	e0bfff17 	ldw	r2,-4(fp)
  804eb8:	10004e45 	stb	zero,313(r2)
  d->_pg135 = 0;
  804ebc:	e0bfff17 	ldw	r2,-4(fp)
  804ec0:	10004e85 	stb	zero,314(r2)
  d->_pg77 = 0;
  804ec4:	e0bfff17 	ldw	r2,-4(fp)
  804ec8:	10004ec5 	stb	zero,315(r2)
  d->_pg55 = 0;
  804ecc:	e0bfff17 	ldw	r2,-4(fp)
  804ed0:	10004f05 	stb	zero,316(r2)
  d->_pg56 = 0;
  804ed4:	e0bfff17 	ldw	r2,-4(fp)
  804ed8:	10004f45 	stb	zero,317(r2)
  d->_pg85 = 0;
  804edc:	e0bfff17 	ldw	r2,-4(fp)
  804ee0:	10004f85 	stb	zero,318(r2)
  d->_pg141 = 0;
  804ee4:	e0bfff17 	ldw	r2,-4(fp)
  804ee8:	10004fc5 	stb	zero,319(r2)
  d->_pg96 = 0;
  804eec:	e0bfff17 	ldw	r2,-4(fp)
  804ef0:	10005005 	stb	zero,320(r2)
  d->_pg87 = 0;
  804ef4:	e0bfff17 	ldw	r2,-4(fp)
  804ef8:	10005045 	stb	zero,321(r2)
  d->_pg90 = 0;
  804efc:	e0bfff17 	ldw	r2,-4(fp)
  804f00:	10005085 	stb	zero,322(r2)
  d->_pg112 = 0;
  804f04:	e0bfff17 	ldw	r2,-4(fp)
  804f08:	100050c5 	stb	zero,323(r2)
  d->_pg105 = 0;
  804f0c:	e0bfff17 	ldw	r2,-4(fp)
  804f10:	10005105 	stb	zero,324(r2)
  d->_pg108 = 0;
  804f14:	e0bfff17 	ldw	r2,-4(fp)
  804f18:	10005145 	stb	zero,325(r2)
  d->_pg144 = 0;
  804f1c:	e0bfff17 	ldw	r2,-4(fp)
  804f20:	10005185 	stb	zero,326(r2)
  d->_pg122 = 0;
  804f24:	e0bfff17 	ldw	r2,-4(fp)
  804f28:	100051c5 	stb	zero,327(r2)
}
  804f2c:	0001883a 	nop
  804f30:	e037883a 	mov	sp,fp
  804f34:	df000017 	ldw	fp,0(sp)
  804f38:	dec00104 	addi	sp,sp,4
  804f3c:	f800283a 	ret

00804f40 <tick>:

void tick(TickData* d) {
  804f40:	defffd04 	addi	sp,sp,-12
  804f44:	dfc00215 	stw	ra,8(sp)
  804f48:	df000115 	stw	fp,4(sp)
  804f4c:	df000104 	addi	fp,sp,4
  804f50:	e13fff15 	stw	r4,-4(fp)
  logic(d);
  804f54:	e13fff17 	ldw	r4,-4(fp)
  804f58:	08004000 	call	800400 <logic>

  d->_pg139 = d->_g139;
  804f5c:	e0bfff17 	ldw	r2,-4(fp)
  804f60:	10c03503 	ldbu	r3,212(r2)
  804f64:	e0bfff17 	ldw	r2,-4(fp)
  804f68:	10c04a45 	stb	r3,297(r2)
  d->_pg64_e1 = d->_g64_e1;
  804f6c:	e0bfff17 	ldw	r2,-4(fp)
  804f70:	10c04803 	ldbu	r3,288(r2)
  804f74:	e0bfff17 	ldw	r2,-4(fp)
  804f78:	10c04a85 	stb	r3,298(r2)
  d->_pg8 = d->_g8;
  804f7c:	e0bfff17 	ldw	r2,-4(fp)
  804f80:	10c01dc3 	ldbu	r3,119(r2)
  804f84:	e0bfff17 	ldw	r2,-4(fp)
  804f88:	10c04ac5 	stb	r3,299(r2)
  d->_pg150 = d->_g150;
  804f8c:	e0bfff17 	ldw	r2,-4(fp)
  804f90:	10c03703 	ldbu	r3,220(r2)
  804f94:	e0bfff17 	ldw	r2,-4(fp)
  804f98:	10c04b05 	stb	r3,300(r2)
  d->_pg117 = d->_g117;
  804f9c:	e0bfff17 	ldw	r2,-4(fp)
  804fa0:	10c03183 	ldbu	r3,198(r2)
  804fa4:	e0bfff17 	ldw	r2,-4(fp)
  804fa8:	10c04b45 	stb	r3,301(r2)
  d->_pg152 = d->_g152;
  804fac:	e0bfff17 	ldw	r2,-4(fp)
  804fb0:	10c03783 	ldbu	r3,222(r2)
  804fb4:	e0bfff17 	ldw	r2,-4(fp)
  804fb8:	10c04b85 	stb	r3,302(r2)
  d->_pg131 = d->_g131;
  804fbc:	e0bfff17 	ldw	r2,-4(fp)
  804fc0:	10c033c3 	ldbu	r3,207(r2)
  804fc4:	e0bfff17 	ldw	r2,-4(fp)
  804fc8:	10c04bc5 	stb	r3,303(r2)
  d->_pg153 = d->_g153;
  804fcc:	e0bfff17 	ldw	r2,-4(fp)
  804fd0:	10c037c3 	ldbu	r3,223(r2)
  804fd4:	e0bfff17 	ldw	r2,-4(fp)
  804fd8:	10c04c05 	stb	r3,304(r2)
  d->_pg132 = d->_g132;
  804fdc:	e0bfff17 	ldw	r2,-4(fp)
  804fe0:	10c03403 	ldbu	r3,208(r2)
  804fe4:	e0bfff17 	ldw	r2,-4(fp)
  804fe8:	10c04c45 	stb	r3,305(r2)
  d->_pg195 = d->_g195;
  804fec:	e0bfff17 	ldw	r2,-4(fp)
  804ff0:	10c038c3 	ldbu	r3,227(r2)
  804ff4:	e0bfff17 	ldw	r2,-4(fp)
  804ff8:	10c04c85 	stb	r3,306(r2)
  d->_pg45_e2 = d->_g45_e2;
  804ffc:	e0bfff17 	ldw	r2,-4(fp)
  805000:	10c047c3 	ldbu	r3,287(r2)
  805004:	e0bfff17 	ldw	r2,-4(fp)
  805008:	10c04cc5 	stb	r3,307(r2)
  d->_pg9 = d->_g9;
  80500c:	e0bfff17 	ldw	r2,-4(fp)
  805010:	10c01e03 	ldbu	r3,120(r2)
  805014:	e0bfff17 	ldw	r2,-4(fp)
  805018:	10c04d05 	stb	r3,308(r2)
  d->_pg10 = d->_g10;
  80501c:	e0bfff17 	ldw	r2,-4(fp)
  805020:	10c01e43 	ldbu	r3,121(r2)
  805024:	e0bfff17 	ldw	r2,-4(fp)
  805028:	10c04d45 	stb	r3,309(r2)
  d->_pg13 = d->_g13;
  80502c:	e0bfff17 	ldw	r2,-4(fp)
  805030:	10c01f03 	ldbu	r3,124(r2)
  805034:	e0bfff17 	ldw	r2,-4(fp)
  805038:	10c04d85 	stb	r3,310(r2)
  d->_pg48 = d->_g48;
  80503c:	e0bfff17 	ldw	r2,-4(fp)
  805040:	10c02543 	ldbu	r3,149(r2)
  805044:	e0bfff17 	ldw	r2,-4(fp)
  805048:	10c04dc5 	stb	r3,311(r2)
  d->_pg50 = d->_g50;
  80504c:	e0bfff17 	ldw	r2,-4(fp)
  805050:	10c025c3 	ldbu	r3,151(r2)
  805054:	e0bfff17 	ldw	r2,-4(fp)
  805058:	10c04e05 	stb	r3,312(r2)
  d->_pg49 = d->_g49;
  80505c:	e0bfff17 	ldw	r2,-4(fp)
  805060:	10c02583 	ldbu	r3,150(r2)
  805064:	e0bfff17 	ldw	r2,-4(fp)
  805068:	10c04e45 	stb	r3,313(r2)
  d->_pg135 = d->_g135;
  80506c:	e0bfff17 	ldw	r2,-4(fp)
  805070:	10c03443 	ldbu	r3,209(r2)
  805074:	e0bfff17 	ldw	r2,-4(fp)
  805078:	10c04e85 	stb	r3,314(r2)
  d->_pg77 = d->_g77;
  80507c:	e0bfff17 	ldw	r2,-4(fp)
  805080:	10c02a83 	ldbu	r3,170(r2)
  805084:	e0bfff17 	ldw	r2,-4(fp)
  805088:	10c04ec5 	stb	r3,315(r2)
  d->_pg55 = d->_g55;
  80508c:	e0bfff17 	ldw	r2,-4(fp)
  805090:	10c02643 	ldbu	r3,153(r2)
  805094:	e0bfff17 	ldw	r2,-4(fp)
  805098:	10c04f05 	stb	r3,316(r2)
  d->_pg56 = d->_g56;
  80509c:	e0bfff17 	ldw	r2,-4(fp)
  8050a0:	10c02683 	ldbu	r3,154(r2)
  8050a4:	e0bfff17 	ldw	r2,-4(fp)
  8050a8:	10c04f45 	stb	r3,317(r2)
  d->_pg85 = d->_g85;
  8050ac:	e0bfff17 	ldw	r2,-4(fp)
  8050b0:	10c02b83 	ldbu	r3,174(r2)
  8050b4:	e0bfff17 	ldw	r2,-4(fp)
  8050b8:	10c04f85 	stb	r3,318(r2)
  d->_pg141 = d->_g141;
  8050bc:	e0bfff17 	ldw	r2,-4(fp)
  8050c0:	10c03583 	ldbu	r3,214(r2)
  8050c4:	e0bfff17 	ldw	r2,-4(fp)
  8050c8:	10c04fc5 	stb	r3,319(r2)
  d->_pg96 = d->_g96;
  8050cc:	e0bfff17 	ldw	r2,-4(fp)
  8050d0:	10c02dc3 	ldbu	r3,183(r2)
  8050d4:	e0bfff17 	ldw	r2,-4(fp)
  8050d8:	10c05005 	stb	r3,320(r2)
  d->_pg87 = d->_g87;
  8050dc:	e0bfff17 	ldw	r2,-4(fp)
  8050e0:	10c02c03 	ldbu	r3,176(r2)
  8050e4:	e0bfff17 	ldw	r2,-4(fp)
  8050e8:	10c05045 	stb	r3,321(r2)
  d->_pg90 = d->_g90;
  8050ec:	e0bfff17 	ldw	r2,-4(fp)
  8050f0:	10c02cc3 	ldbu	r3,179(r2)
  8050f4:	e0bfff17 	ldw	r2,-4(fp)
  8050f8:	10c05085 	stb	r3,322(r2)
  d->_pg112 = d->_g112;
  8050fc:	e0bfff17 	ldw	r2,-4(fp)
  805100:	10c03083 	ldbu	r3,194(r2)
  805104:	e0bfff17 	ldw	r2,-4(fp)
  805108:	10c050c5 	stb	r3,323(r2)
  d->_pg105 = d->_g105;
  80510c:	e0bfff17 	ldw	r2,-4(fp)
  805110:	10c02f43 	ldbu	r3,189(r2)
  805114:	e0bfff17 	ldw	r2,-4(fp)
  805118:	10c05105 	stb	r3,324(r2)
  d->_pg108 = d->_g108;
  80511c:	e0bfff17 	ldw	r2,-4(fp)
  805120:	10c02fc3 	ldbu	r3,191(r2)
  805124:	e0bfff17 	ldw	r2,-4(fp)
  805128:	10c05145 	stb	r3,325(r2)
  d->_pg144 = d->_g144;
  80512c:	e0bfff17 	ldw	r2,-4(fp)
  805130:	10c03603 	ldbu	r3,216(r2)
  805134:	e0bfff17 	ldw	r2,-4(fp)
  805138:	10c05185 	stb	r3,326(r2)
  d->_pg122 = d->_g122;
  80513c:	e0bfff17 	ldw	r2,-4(fp)
  805140:	10c03243 	ldbu	r3,201(r2)
  805144:	e0bfff17 	ldw	r2,-4(fp)
  805148:	10c051c5 	stb	r3,327(r2)
  d->_GO = 0;
  80514c:	e0bfff17 	ldw	r2,-4(fp)
  805150:	10003905 	stb	zero,228(r2)
}
  805154:	0001883a 	nop
  805158:	e037883a 	mov	sp,fp
  80515c:	dfc00117 	ldw	ra,4(sp)
  805160:	df000017 	ldw	fp,0(sp)
  805164:	dec00204 	addi	sp,sp,8
  805168:	f800283a 	ret

0080516c <__adddf3>:
  80516c:	02c00434 	movhi	r11,16
  805170:	5affffc4 	addi	r11,r11,-1
  805174:	2806d7fa 	srli	r3,r5,31
  805178:	2ad4703a 	and	r10,r5,r11
  80517c:	3ad2703a 	and	r9,r7,r11
  805180:	3804d53a 	srli	r2,r7,20
  805184:	3018d77a 	srli	r12,r6,29
  805188:	280ad53a 	srli	r5,r5,20
  80518c:	501490fa 	slli	r10,r10,3
  805190:	2010d77a 	srli	r8,r4,29
  805194:	481290fa 	slli	r9,r9,3
  805198:	380ed7fa 	srli	r7,r7,31
  80519c:	defffb04 	addi	sp,sp,-20
  8051a0:	dc800215 	stw	r18,8(sp)
  8051a4:	dc400115 	stw	r17,4(sp)
  8051a8:	dc000015 	stw	r16,0(sp)
  8051ac:	dfc00415 	stw	ra,16(sp)
  8051b0:	dcc00315 	stw	r19,12(sp)
  8051b4:	1c803fcc 	andi	r18,r3,255
  8051b8:	2c01ffcc 	andi	r16,r5,2047
  8051bc:	5210b03a 	or	r8,r10,r8
  8051c0:	202290fa 	slli	r17,r4,3
  8051c4:	1081ffcc 	andi	r2,r2,2047
  8051c8:	4b12b03a 	or	r9,r9,r12
  8051cc:	300c90fa 	slli	r6,r6,3
  8051d0:	91c07526 	beq	r18,r7,8053a8 <__adddf3+0x23c>
  8051d4:	8087c83a 	sub	r3,r16,r2
  8051d8:	00c0ab0e 	bge	zero,r3,805488 <__adddf3+0x31c>
  8051dc:	10002a1e 	bne	r2,zero,805288 <__adddf3+0x11c>
  8051e0:	4984b03a 	or	r2,r9,r6
  8051e4:	1000961e 	bne	r2,zero,805440 <__adddf3+0x2d4>
  8051e8:	888001cc 	andi	r2,r17,7
  8051ec:	10000726 	beq	r2,zero,80520c <__adddf3+0xa0>
  8051f0:	888003cc 	andi	r2,r17,15
  8051f4:	00c00104 	movi	r3,4
  8051f8:	10c00426 	beq	r2,r3,80520c <__adddf3+0xa0>
  8051fc:	88c7883a 	add	r3,r17,r3
  805200:	1c63803a 	cmpltu	r17,r3,r17
  805204:	4451883a 	add	r8,r8,r17
  805208:	1823883a 	mov	r17,r3
  80520c:	4080202c 	andhi	r2,r8,128
  805210:	10005926 	beq	r2,zero,805378 <__adddf3+0x20c>
  805214:	84000044 	addi	r16,r16,1
  805218:	0081ffc4 	movi	r2,2047
  80521c:	8080ba26 	beq	r16,r2,805508 <__adddf3+0x39c>
  805220:	00bfe034 	movhi	r2,65408
  805224:	10bfffc4 	addi	r2,r2,-1
  805228:	4090703a 	and	r8,r8,r2
  80522c:	4004977a 	slli	r2,r8,29
  805230:	4010927a 	slli	r8,r8,9
  805234:	8822d0fa 	srli	r17,r17,3
  805238:	8401ffcc 	andi	r16,r16,2047
  80523c:	4010d33a 	srli	r8,r8,12
  805240:	9007883a 	mov	r3,r18
  805244:	1444b03a 	or	r2,r2,r17
  805248:	8401ffcc 	andi	r16,r16,2047
  80524c:	8020953a 	slli	r16,r16,20
  805250:	18c03fcc 	andi	r3,r3,255
  805254:	01000434 	movhi	r4,16
  805258:	213fffc4 	addi	r4,r4,-1
  80525c:	180697fa 	slli	r3,r3,31
  805260:	4110703a 	and	r8,r8,r4
  805264:	4410b03a 	or	r8,r8,r16
  805268:	40c6b03a 	or	r3,r8,r3
  80526c:	dfc00417 	ldw	ra,16(sp)
  805270:	dcc00317 	ldw	r19,12(sp)
  805274:	dc800217 	ldw	r18,8(sp)
  805278:	dc400117 	ldw	r17,4(sp)
  80527c:	dc000017 	ldw	r16,0(sp)
  805280:	dec00504 	addi	sp,sp,20
  805284:	f800283a 	ret
  805288:	0081ffc4 	movi	r2,2047
  80528c:	80bfd626 	beq	r16,r2,8051e8 <__alt_mem_onchip_mem+0xff7fd1e8>
  805290:	4a402034 	orhi	r9,r9,128
  805294:	00800e04 	movi	r2,56
  805298:	10c09f16 	blt	r2,r3,805518 <__adddf3+0x3ac>
  80529c:	008007c4 	movi	r2,31
  8052a0:	10c0c216 	blt	r2,r3,8055ac <__adddf3+0x440>
  8052a4:	00800804 	movi	r2,32
  8052a8:	10c5c83a 	sub	r2,r2,r3
  8052ac:	488a983a 	sll	r5,r9,r2
  8052b0:	30c8d83a 	srl	r4,r6,r3
  8052b4:	3084983a 	sll	r2,r6,r2
  8052b8:	48c6d83a 	srl	r3,r9,r3
  8052bc:	290cb03a 	or	r6,r5,r4
  8052c0:	1004c03a 	cmpne	r2,r2,zero
  8052c4:	308cb03a 	or	r6,r6,r2
  8052c8:	898dc83a 	sub	r6,r17,r6
  8052cc:	89a3803a 	cmpltu	r17,r17,r6
  8052d0:	40d1c83a 	sub	r8,r8,r3
  8052d4:	4451c83a 	sub	r8,r8,r17
  8052d8:	3023883a 	mov	r17,r6
  8052dc:	4080202c 	andhi	r2,r8,128
  8052e0:	10002326 	beq	r2,zero,805370 <__adddf3+0x204>
  8052e4:	04c02034 	movhi	r19,128
  8052e8:	9cffffc4 	addi	r19,r19,-1
  8052ec:	44e6703a 	and	r19,r8,r19
  8052f0:	98007626 	beq	r19,zero,8054cc <__adddf3+0x360>
  8052f4:	9809883a 	mov	r4,r19
  8052f8:	08065c00 	call	8065c0 <__clzsi2>
  8052fc:	10fffe04 	addi	r3,r2,-8
  805300:	010007c4 	movi	r4,31
  805304:	20c07716 	blt	r4,r3,8054e4 <__adddf3+0x378>
  805308:	00800804 	movi	r2,32
  80530c:	10c5c83a 	sub	r2,r2,r3
  805310:	8884d83a 	srl	r2,r17,r2
  805314:	98d0983a 	sll	r8,r19,r3
  805318:	88e2983a 	sll	r17,r17,r3
  80531c:	1204b03a 	or	r2,r2,r8
  805320:	1c007416 	blt	r3,r16,8054f4 <__adddf3+0x388>
  805324:	1c21c83a 	sub	r16,r3,r16
  805328:	82000044 	addi	r8,r16,1
  80532c:	00c007c4 	movi	r3,31
  805330:	1a009116 	blt	r3,r8,805578 <__adddf3+0x40c>
  805334:	00c00804 	movi	r3,32
  805338:	1a07c83a 	sub	r3,r3,r8
  80533c:	8a08d83a 	srl	r4,r17,r8
  805340:	88e2983a 	sll	r17,r17,r3
  805344:	10c6983a 	sll	r3,r2,r3
  805348:	1210d83a 	srl	r8,r2,r8
  80534c:	8804c03a 	cmpne	r2,r17,zero
  805350:	1906b03a 	or	r3,r3,r4
  805354:	18a2b03a 	or	r17,r3,r2
  805358:	0021883a 	mov	r16,zero
  80535c:	003fa206 	br	8051e8 <__alt_mem_onchip_mem+0xff7fd1e8>
  805360:	1890b03a 	or	r8,r3,r2
  805364:	40017d26 	beq	r8,zero,80595c <__adddf3+0x7f0>
  805368:	1011883a 	mov	r8,r2
  80536c:	1823883a 	mov	r17,r3
  805370:	888001cc 	andi	r2,r17,7
  805374:	103f9e1e 	bne	r2,zero,8051f0 <__alt_mem_onchip_mem+0xff7fd1f0>
  805378:	4004977a 	slli	r2,r8,29
  80537c:	8822d0fa 	srli	r17,r17,3
  805380:	4010d0fa 	srli	r8,r8,3
  805384:	9007883a 	mov	r3,r18
  805388:	1444b03a 	or	r2,r2,r17
  80538c:	0101ffc4 	movi	r4,2047
  805390:	81002426 	beq	r16,r4,805424 <__adddf3+0x2b8>
  805394:	8120703a 	and	r16,r16,r4
  805398:	01000434 	movhi	r4,16
  80539c:	213fffc4 	addi	r4,r4,-1
  8053a0:	4110703a 	and	r8,r8,r4
  8053a4:	003fa806 	br	805248 <__alt_mem_onchip_mem+0xff7fd248>
  8053a8:	8089c83a 	sub	r4,r16,r2
  8053ac:	01005e0e 	bge	zero,r4,805528 <__adddf3+0x3bc>
  8053b0:	10002b26 	beq	r2,zero,805460 <__adddf3+0x2f4>
  8053b4:	0081ffc4 	movi	r2,2047
  8053b8:	80bf8b26 	beq	r16,r2,8051e8 <__alt_mem_onchip_mem+0xff7fd1e8>
  8053bc:	4a402034 	orhi	r9,r9,128
  8053c0:	00800e04 	movi	r2,56
  8053c4:	1100a40e 	bge	r2,r4,805658 <__adddf3+0x4ec>
  8053c8:	498cb03a 	or	r6,r9,r6
  8053cc:	300ac03a 	cmpne	r5,r6,zero
  8053d0:	0013883a 	mov	r9,zero
  8053d4:	2c4b883a 	add	r5,r5,r17
  8053d8:	2c63803a 	cmpltu	r17,r5,r17
  8053dc:	4a11883a 	add	r8,r9,r8
  8053e0:	8a11883a 	add	r8,r17,r8
  8053e4:	2823883a 	mov	r17,r5
  8053e8:	4080202c 	andhi	r2,r8,128
  8053ec:	103fe026 	beq	r2,zero,805370 <__alt_mem_onchip_mem+0xff7fd370>
  8053f0:	84000044 	addi	r16,r16,1
  8053f4:	0081ffc4 	movi	r2,2047
  8053f8:	8080d226 	beq	r16,r2,805744 <__adddf3+0x5d8>
  8053fc:	00bfe034 	movhi	r2,65408
  805400:	10bfffc4 	addi	r2,r2,-1
  805404:	4090703a 	and	r8,r8,r2
  805408:	880ad07a 	srli	r5,r17,1
  80540c:	400897fa 	slli	r4,r8,31
  805410:	88c0004c 	andi	r3,r17,1
  805414:	28e2b03a 	or	r17,r5,r3
  805418:	4010d07a 	srli	r8,r8,1
  80541c:	2462b03a 	or	r17,r4,r17
  805420:	003f7106 	br	8051e8 <__alt_mem_onchip_mem+0xff7fd1e8>
  805424:	4088b03a 	or	r4,r8,r2
  805428:	20014526 	beq	r4,zero,805940 <__adddf3+0x7d4>
  80542c:	01000434 	movhi	r4,16
  805430:	42000234 	orhi	r8,r8,8
  805434:	213fffc4 	addi	r4,r4,-1
  805438:	4110703a 	and	r8,r8,r4
  80543c:	003f8206 	br	805248 <__alt_mem_onchip_mem+0xff7fd248>
  805440:	18ffffc4 	addi	r3,r3,-1
  805444:	1800491e 	bne	r3,zero,80556c <__adddf3+0x400>
  805448:	898bc83a 	sub	r5,r17,r6
  80544c:	8963803a 	cmpltu	r17,r17,r5
  805450:	4251c83a 	sub	r8,r8,r9
  805454:	4451c83a 	sub	r8,r8,r17
  805458:	2823883a 	mov	r17,r5
  80545c:	003f9f06 	br	8052dc <__alt_mem_onchip_mem+0xff7fd2dc>
  805460:	4984b03a 	or	r2,r9,r6
  805464:	103f6026 	beq	r2,zero,8051e8 <__alt_mem_onchip_mem+0xff7fd1e8>
  805468:	213fffc4 	addi	r4,r4,-1
  80546c:	2000931e 	bne	r4,zero,8056bc <__adddf3+0x550>
  805470:	898d883a 	add	r6,r17,r6
  805474:	3463803a 	cmpltu	r17,r6,r17
  805478:	4251883a 	add	r8,r8,r9
  80547c:	8a11883a 	add	r8,r17,r8
  805480:	3023883a 	mov	r17,r6
  805484:	003fd806 	br	8053e8 <__alt_mem_onchip_mem+0xff7fd3e8>
  805488:	1800541e 	bne	r3,zero,8055dc <__adddf3+0x470>
  80548c:	80800044 	addi	r2,r16,1
  805490:	1081ffcc 	andi	r2,r2,2047
  805494:	00c00044 	movi	r3,1
  805498:	1880a00e 	bge	r3,r2,80571c <__adddf3+0x5b0>
  80549c:	8989c83a 	sub	r4,r17,r6
  8054a0:	8905803a 	cmpltu	r2,r17,r4
  8054a4:	4267c83a 	sub	r19,r8,r9
  8054a8:	98a7c83a 	sub	r19,r19,r2
  8054ac:	9880202c 	andhi	r2,r19,128
  8054b0:	10006326 	beq	r2,zero,805640 <__adddf3+0x4d4>
  8054b4:	3463c83a 	sub	r17,r6,r17
  8054b8:	4a07c83a 	sub	r3,r9,r8
  8054bc:	344d803a 	cmpltu	r6,r6,r17
  8054c0:	19a7c83a 	sub	r19,r3,r6
  8054c4:	3825883a 	mov	r18,r7
  8054c8:	983f8a1e 	bne	r19,zero,8052f4 <__alt_mem_onchip_mem+0xff7fd2f4>
  8054cc:	8809883a 	mov	r4,r17
  8054d0:	08065c00 	call	8065c0 <__clzsi2>
  8054d4:	10800804 	addi	r2,r2,32
  8054d8:	10fffe04 	addi	r3,r2,-8
  8054dc:	010007c4 	movi	r4,31
  8054e0:	20ff890e 	bge	r4,r3,805308 <__alt_mem_onchip_mem+0xff7fd308>
  8054e4:	10bff604 	addi	r2,r2,-40
  8054e8:	8884983a 	sll	r2,r17,r2
  8054ec:	0023883a 	mov	r17,zero
  8054f0:	1c3f8c0e 	bge	r3,r16,805324 <__alt_mem_onchip_mem+0xff7fd324>
  8054f4:	023fe034 	movhi	r8,65408
  8054f8:	423fffc4 	addi	r8,r8,-1
  8054fc:	80e1c83a 	sub	r16,r16,r3
  805500:	1210703a 	and	r8,r2,r8
  805504:	003f3806 	br	8051e8 <__alt_mem_onchip_mem+0xff7fd1e8>
  805508:	9007883a 	mov	r3,r18
  80550c:	0011883a 	mov	r8,zero
  805510:	0005883a 	mov	r2,zero
  805514:	003f4c06 	br	805248 <__alt_mem_onchip_mem+0xff7fd248>
  805518:	498cb03a 	or	r6,r9,r6
  80551c:	300cc03a 	cmpne	r6,r6,zero
  805520:	0007883a 	mov	r3,zero
  805524:	003f6806 	br	8052c8 <__alt_mem_onchip_mem+0xff7fd2c8>
  805528:	20009c1e 	bne	r4,zero,80579c <__adddf3+0x630>
  80552c:	80800044 	addi	r2,r16,1
  805530:	1141ffcc 	andi	r5,r2,2047
  805534:	01000044 	movi	r4,1
  805538:	2140670e 	bge	r4,r5,8056d8 <__adddf3+0x56c>
  80553c:	0101ffc4 	movi	r4,2047
  805540:	11007f26 	beq	r2,r4,805740 <__adddf3+0x5d4>
  805544:	898d883a 	add	r6,r17,r6
  805548:	4247883a 	add	r3,r8,r9
  80554c:	3451803a 	cmpltu	r8,r6,r17
  805550:	40d1883a 	add	r8,r8,r3
  805554:	402297fa 	slli	r17,r8,31
  805558:	300cd07a 	srli	r6,r6,1
  80555c:	4010d07a 	srli	r8,r8,1
  805560:	1021883a 	mov	r16,r2
  805564:	89a2b03a 	or	r17,r17,r6
  805568:	003f1f06 	br	8051e8 <__alt_mem_onchip_mem+0xff7fd1e8>
  80556c:	0081ffc4 	movi	r2,2047
  805570:	80bf481e 	bne	r16,r2,805294 <__alt_mem_onchip_mem+0xff7fd294>
  805574:	003f1c06 	br	8051e8 <__alt_mem_onchip_mem+0xff7fd1e8>
  805578:	843ff844 	addi	r16,r16,-31
  80557c:	01000804 	movi	r4,32
  805580:	1406d83a 	srl	r3,r2,r16
  805584:	41005026 	beq	r8,r4,8056c8 <__adddf3+0x55c>
  805588:	01001004 	movi	r4,64
  80558c:	2211c83a 	sub	r8,r4,r8
  805590:	1204983a 	sll	r2,r2,r8
  805594:	88a2b03a 	or	r17,r17,r2
  805598:	8822c03a 	cmpne	r17,r17,zero
  80559c:	1c62b03a 	or	r17,r3,r17
  8055a0:	0011883a 	mov	r8,zero
  8055a4:	0021883a 	mov	r16,zero
  8055a8:	003f7106 	br	805370 <__alt_mem_onchip_mem+0xff7fd370>
  8055ac:	193ff804 	addi	r4,r3,-32
  8055b0:	00800804 	movi	r2,32
  8055b4:	4908d83a 	srl	r4,r9,r4
  8055b8:	18804526 	beq	r3,r2,8056d0 <__adddf3+0x564>
  8055bc:	00801004 	movi	r2,64
  8055c0:	10c5c83a 	sub	r2,r2,r3
  8055c4:	4886983a 	sll	r3,r9,r2
  8055c8:	198cb03a 	or	r6,r3,r6
  8055cc:	300cc03a 	cmpne	r6,r6,zero
  8055d0:	218cb03a 	or	r6,r4,r6
  8055d4:	0007883a 	mov	r3,zero
  8055d8:	003f3b06 	br	8052c8 <__alt_mem_onchip_mem+0xff7fd2c8>
  8055dc:	80002a26 	beq	r16,zero,805688 <__adddf3+0x51c>
  8055e0:	0101ffc4 	movi	r4,2047
  8055e4:	11006826 	beq	r2,r4,805788 <__adddf3+0x61c>
  8055e8:	00c7c83a 	sub	r3,zero,r3
  8055ec:	42002034 	orhi	r8,r8,128
  8055f0:	01000e04 	movi	r4,56
  8055f4:	20c07c16 	blt	r4,r3,8057e8 <__adddf3+0x67c>
  8055f8:	010007c4 	movi	r4,31
  8055fc:	20c0da16 	blt	r4,r3,805968 <__adddf3+0x7fc>
  805600:	01000804 	movi	r4,32
  805604:	20c9c83a 	sub	r4,r4,r3
  805608:	4114983a 	sll	r10,r8,r4
  80560c:	88cad83a 	srl	r5,r17,r3
  805610:	8908983a 	sll	r4,r17,r4
  805614:	40c6d83a 	srl	r3,r8,r3
  805618:	5162b03a 	or	r17,r10,r5
  80561c:	2008c03a 	cmpne	r4,r4,zero
  805620:	8922b03a 	or	r17,r17,r4
  805624:	3463c83a 	sub	r17,r6,r17
  805628:	48c7c83a 	sub	r3,r9,r3
  80562c:	344d803a 	cmpltu	r6,r6,r17
  805630:	1991c83a 	sub	r8,r3,r6
  805634:	1021883a 	mov	r16,r2
  805638:	3825883a 	mov	r18,r7
  80563c:	003f2706 	br	8052dc <__alt_mem_onchip_mem+0xff7fd2dc>
  805640:	24d0b03a 	or	r8,r4,r19
  805644:	40001b1e 	bne	r8,zero,8056b4 <__adddf3+0x548>
  805648:	0005883a 	mov	r2,zero
  80564c:	0007883a 	mov	r3,zero
  805650:	0021883a 	mov	r16,zero
  805654:	003f4d06 	br	80538c <__alt_mem_onchip_mem+0xff7fd38c>
  805658:	008007c4 	movi	r2,31
  80565c:	11003c16 	blt	r2,r4,805750 <__adddf3+0x5e4>
  805660:	00800804 	movi	r2,32
  805664:	1105c83a 	sub	r2,r2,r4
  805668:	488e983a 	sll	r7,r9,r2
  80566c:	310ad83a 	srl	r5,r6,r4
  805670:	3084983a 	sll	r2,r6,r2
  805674:	4912d83a 	srl	r9,r9,r4
  805678:	394ab03a 	or	r5,r7,r5
  80567c:	1004c03a 	cmpne	r2,r2,zero
  805680:	288ab03a 	or	r5,r5,r2
  805684:	003f5306 	br	8053d4 <__alt_mem_onchip_mem+0xff7fd3d4>
  805688:	4448b03a 	or	r4,r8,r17
  80568c:	20003e26 	beq	r4,zero,805788 <__adddf3+0x61c>
  805690:	00c6303a 	nor	r3,zero,r3
  805694:	18003a1e 	bne	r3,zero,805780 <__adddf3+0x614>
  805698:	3463c83a 	sub	r17,r6,r17
  80569c:	4a07c83a 	sub	r3,r9,r8
  8056a0:	344d803a 	cmpltu	r6,r6,r17
  8056a4:	1991c83a 	sub	r8,r3,r6
  8056a8:	1021883a 	mov	r16,r2
  8056ac:	3825883a 	mov	r18,r7
  8056b0:	003f0a06 	br	8052dc <__alt_mem_onchip_mem+0xff7fd2dc>
  8056b4:	2023883a 	mov	r17,r4
  8056b8:	003f0d06 	br	8052f0 <__alt_mem_onchip_mem+0xff7fd2f0>
  8056bc:	0081ffc4 	movi	r2,2047
  8056c0:	80bf3f1e 	bne	r16,r2,8053c0 <__alt_mem_onchip_mem+0xff7fd3c0>
  8056c4:	003ec806 	br	8051e8 <__alt_mem_onchip_mem+0xff7fd1e8>
  8056c8:	0005883a 	mov	r2,zero
  8056cc:	003fb106 	br	805594 <__alt_mem_onchip_mem+0xff7fd594>
  8056d0:	0007883a 	mov	r3,zero
  8056d4:	003fbc06 	br	8055c8 <__alt_mem_onchip_mem+0xff7fd5c8>
  8056d8:	4444b03a 	or	r2,r8,r17
  8056dc:	8000871e 	bne	r16,zero,8058fc <__adddf3+0x790>
  8056e0:	1000ba26 	beq	r2,zero,8059cc <__adddf3+0x860>
  8056e4:	4984b03a 	or	r2,r9,r6
  8056e8:	103ebf26 	beq	r2,zero,8051e8 <__alt_mem_onchip_mem+0xff7fd1e8>
  8056ec:	8985883a 	add	r2,r17,r6
  8056f0:	4247883a 	add	r3,r8,r9
  8056f4:	1451803a 	cmpltu	r8,r2,r17
  8056f8:	40d1883a 	add	r8,r8,r3
  8056fc:	40c0202c 	andhi	r3,r8,128
  805700:	1023883a 	mov	r17,r2
  805704:	183f1a26 	beq	r3,zero,805370 <__alt_mem_onchip_mem+0xff7fd370>
  805708:	00bfe034 	movhi	r2,65408
  80570c:	10bfffc4 	addi	r2,r2,-1
  805710:	2021883a 	mov	r16,r4
  805714:	4090703a 	and	r8,r8,r2
  805718:	003eb306 	br	8051e8 <__alt_mem_onchip_mem+0xff7fd1e8>
  80571c:	4444b03a 	or	r2,r8,r17
  805720:	8000291e 	bne	r16,zero,8057c8 <__adddf3+0x65c>
  805724:	10004b1e 	bne	r2,zero,805854 <__adddf3+0x6e8>
  805728:	4990b03a 	or	r8,r9,r6
  80572c:	40008b26 	beq	r8,zero,80595c <__adddf3+0x7f0>
  805730:	4811883a 	mov	r8,r9
  805734:	3023883a 	mov	r17,r6
  805738:	3825883a 	mov	r18,r7
  80573c:	003eaa06 	br	8051e8 <__alt_mem_onchip_mem+0xff7fd1e8>
  805740:	1021883a 	mov	r16,r2
  805744:	0011883a 	mov	r8,zero
  805748:	0005883a 	mov	r2,zero
  80574c:	003f0f06 	br	80538c <__alt_mem_onchip_mem+0xff7fd38c>
  805750:	217ff804 	addi	r5,r4,-32
  805754:	00800804 	movi	r2,32
  805758:	494ad83a 	srl	r5,r9,r5
  80575c:	20807d26 	beq	r4,r2,805954 <__adddf3+0x7e8>
  805760:	00801004 	movi	r2,64
  805764:	1109c83a 	sub	r4,r2,r4
  805768:	4912983a 	sll	r9,r9,r4
  80576c:	498cb03a 	or	r6,r9,r6
  805770:	300cc03a 	cmpne	r6,r6,zero
  805774:	298ab03a 	or	r5,r5,r6
  805778:	0013883a 	mov	r9,zero
  80577c:	003f1506 	br	8053d4 <__alt_mem_onchip_mem+0xff7fd3d4>
  805780:	0101ffc4 	movi	r4,2047
  805784:	113f9a1e 	bne	r2,r4,8055f0 <__alt_mem_onchip_mem+0xff7fd5f0>
  805788:	4811883a 	mov	r8,r9
  80578c:	3023883a 	mov	r17,r6
  805790:	1021883a 	mov	r16,r2
  805794:	3825883a 	mov	r18,r7
  805798:	003e9306 	br	8051e8 <__alt_mem_onchip_mem+0xff7fd1e8>
  80579c:	8000161e 	bne	r16,zero,8057f8 <__adddf3+0x68c>
  8057a0:	444ab03a 	or	r5,r8,r17
  8057a4:	28005126 	beq	r5,zero,8058ec <__adddf3+0x780>
  8057a8:	0108303a 	nor	r4,zero,r4
  8057ac:	20004d1e 	bne	r4,zero,8058e4 <__adddf3+0x778>
  8057b0:	89a3883a 	add	r17,r17,r6
  8057b4:	4253883a 	add	r9,r8,r9
  8057b8:	898d803a 	cmpltu	r6,r17,r6
  8057bc:	3251883a 	add	r8,r6,r9
  8057c0:	1021883a 	mov	r16,r2
  8057c4:	003f0806 	br	8053e8 <__alt_mem_onchip_mem+0xff7fd3e8>
  8057c8:	1000301e 	bne	r2,zero,80588c <__adddf3+0x720>
  8057cc:	4984b03a 	or	r2,r9,r6
  8057d0:	10007126 	beq	r2,zero,805998 <__adddf3+0x82c>
  8057d4:	4811883a 	mov	r8,r9
  8057d8:	3023883a 	mov	r17,r6
  8057dc:	3825883a 	mov	r18,r7
  8057e0:	0401ffc4 	movi	r16,2047
  8057e4:	003e8006 	br	8051e8 <__alt_mem_onchip_mem+0xff7fd1e8>
  8057e8:	4462b03a 	or	r17,r8,r17
  8057ec:	8822c03a 	cmpne	r17,r17,zero
  8057f0:	0007883a 	mov	r3,zero
  8057f4:	003f8b06 	br	805624 <__alt_mem_onchip_mem+0xff7fd624>
  8057f8:	0141ffc4 	movi	r5,2047
  8057fc:	11403b26 	beq	r2,r5,8058ec <__adddf3+0x780>
  805800:	0109c83a 	sub	r4,zero,r4
  805804:	42002034 	orhi	r8,r8,128
  805808:	01400e04 	movi	r5,56
  80580c:	29006716 	blt	r5,r4,8059ac <__adddf3+0x840>
  805810:	014007c4 	movi	r5,31
  805814:	29007016 	blt	r5,r4,8059d8 <__adddf3+0x86c>
  805818:	01400804 	movi	r5,32
  80581c:	290bc83a 	sub	r5,r5,r4
  805820:	4154983a 	sll	r10,r8,r5
  805824:	890ed83a 	srl	r7,r17,r4
  805828:	894a983a 	sll	r5,r17,r5
  80582c:	4108d83a 	srl	r4,r8,r4
  805830:	51e2b03a 	or	r17,r10,r7
  805834:	280ac03a 	cmpne	r5,r5,zero
  805838:	8962b03a 	or	r17,r17,r5
  80583c:	89a3883a 	add	r17,r17,r6
  805840:	2253883a 	add	r9,r4,r9
  805844:	898d803a 	cmpltu	r6,r17,r6
  805848:	3251883a 	add	r8,r6,r9
  80584c:	1021883a 	mov	r16,r2
  805850:	003ee506 	br	8053e8 <__alt_mem_onchip_mem+0xff7fd3e8>
  805854:	4984b03a 	or	r2,r9,r6
  805858:	103e6326 	beq	r2,zero,8051e8 <__alt_mem_onchip_mem+0xff7fd1e8>
  80585c:	8987c83a 	sub	r3,r17,r6
  805860:	88c9803a 	cmpltu	r4,r17,r3
  805864:	4245c83a 	sub	r2,r8,r9
  805868:	1105c83a 	sub	r2,r2,r4
  80586c:	1100202c 	andhi	r4,r2,128
  805870:	203ebb26 	beq	r4,zero,805360 <__alt_mem_onchip_mem+0xff7fd360>
  805874:	3463c83a 	sub	r17,r6,r17
  805878:	4a07c83a 	sub	r3,r9,r8
  80587c:	344d803a 	cmpltu	r6,r6,r17
  805880:	1991c83a 	sub	r8,r3,r6
  805884:	3825883a 	mov	r18,r7
  805888:	003e5706 	br	8051e8 <__alt_mem_onchip_mem+0xff7fd1e8>
  80588c:	4984b03a 	or	r2,r9,r6
  805890:	10002e26 	beq	r2,zero,80594c <__adddf3+0x7e0>
  805894:	4004d0fa 	srli	r2,r8,3
  805898:	8822d0fa 	srli	r17,r17,3
  80589c:	4010977a 	slli	r8,r8,29
  8058a0:	10c0022c 	andhi	r3,r2,8
  8058a4:	4462b03a 	or	r17,r8,r17
  8058a8:	18000826 	beq	r3,zero,8058cc <__adddf3+0x760>
  8058ac:	4808d0fa 	srli	r4,r9,3
  8058b0:	20c0022c 	andhi	r3,r4,8
  8058b4:	1800051e 	bne	r3,zero,8058cc <__adddf3+0x760>
  8058b8:	300cd0fa 	srli	r6,r6,3
  8058bc:	4806977a 	slli	r3,r9,29
  8058c0:	2005883a 	mov	r2,r4
  8058c4:	3825883a 	mov	r18,r7
  8058c8:	19a2b03a 	or	r17,r3,r6
  8058cc:	8810d77a 	srli	r8,r17,29
  8058d0:	100490fa 	slli	r2,r2,3
  8058d4:	882290fa 	slli	r17,r17,3
  8058d8:	0401ffc4 	movi	r16,2047
  8058dc:	4090b03a 	or	r8,r8,r2
  8058e0:	003e4106 	br	8051e8 <__alt_mem_onchip_mem+0xff7fd1e8>
  8058e4:	0141ffc4 	movi	r5,2047
  8058e8:	117fc71e 	bne	r2,r5,805808 <__alt_mem_onchip_mem+0xff7fd808>
  8058ec:	4811883a 	mov	r8,r9
  8058f0:	3023883a 	mov	r17,r6
  8058f4:	1021883a 	mov	r16,r2
  8058f8:	003e3b06 	br	8051e8 <__alt_mem_onchip_mem+0xff7fd1e8>
  8058fc:	10002f26 	beq	r2,zero,8059bc <__adddf3+0x850>
  805900:	4984b03a 	or	r2,r9,r6
  805904:	10001126 	beq	r2,zero,80594c <__adddf3+0x7e0>
  805908:	4004d0fa 	srli	r2,r8,3
  80590c:	8822d0fa 	srli	r17,r17,3
  805910:	4010977a 	slli	r8,r8,29
  805914:	10c0022c 	andhi	r3,r2,8
  805918:	4462b03a 	or	r17,r8,r17
  80591c:	183feb26 	beq	r3,zero,8058cc <__alt_mem_onchip_mem+0xff7fd8cc>
  805920:	4808d0fa 	srli	r4,r9,3
  805924:	20c0022c 	andhi	r3,r4,8
  805928:	183fe81e 	bne	r3,zero,8058cc <__alt_mem_onchip_mem+0xff7fd8cc>
  80592c:	300cd0fa 	srli	r6,r6,3
  805930:	4806977a 	slli	r3,r9,29
  805934:	2005883a 	mov	r2,r4
  805938:	19a2b03a 	or	r17,r3,r6
  80593c:	003fe306 	br	8058cc <__alt_mem_onchip_mem+0xff7fd8cc>
  805940:	0011883a 	mov	r8,zero
  805944:	0005883a 	mov	r2,zero
  805948:	003e3f06 	br	805248 <__alt_mem_onchip_mem+0xff7fd248>
  80594c:	0401ffc4 	movi	r16,2047
  805950:	003e2506 	br	8051e8 <__alt_mem_onchip_mem+0xff7fd1e8>
  805954:	0013883a 	mov	r9,zero
  805958:	003f8406 	br	80576c <__alt_mem_onchip_mem+0xff7fd76c>
  80595c:	0005883a 	mov	r2,zero
  805960:	0007883a 	mov	r3,zero
  805964:	003e8906 	br	80538c <__alt_mem_onchip_mem+0xff7fd38c>
  805968:	197ff804 	addi	r5,r3,-32
  80596c:	01000804 	movi	r4,32
  805970:	414ad83a 	srl	r5,r8,r5
  805974:	19002426 	beq	r3,r4,805a08 <__adddf3+0x89c>
  805978:	01001004 	movi	r4,64
  80597c:	20c7c83a 	sub	r3,r4,r3
  805980:	40c6983a 	sll	r3,r8,r3
  805984:	1c46b03a 	or	r3,r3,r17
  805988:	1806c03a 	cmpne	r3,r3,zero
  80598c:	28e2b03a 	or	r17,r5,r3
  805990:	0007883a 	mov	r3,zero
  805994:	003f2306 	br	805624 <__alt_mem_onchip_mem+0xff7fd624>
  805998:	0007883a 	mov	r3,zero
  80599c:	5811883a 	mov	r8,r11
  8059a0:	00bfffc4 	movi	r2,-1
  8059a4:	0401ffc4 	movi	r16,2047
  8059a8:	003e7806 	br	80538c <__alt_mem_onchip_mem+0xff7fd38c>
  8059ac:	4462b03a 	or	r17,r8,r17
  8059b0:	8822c03a 	cmpne	r17,r17,zero
  8059b4:	0009883a 	mov	r4,zero
  8059b8:	003fa006 	br	80583c <__alt_mem_onchip_mem+0xff7fd83c>
  8059bc:	4811883a 	mov	r8,r9
  8059c0:	3023883a 	mov	r17,r6
  8059c4:	0401ffc4 	movi	r16,2047
  8059c8:	003e0706 	br	8051e8 <__alt_mem_onchip_mem+0xff7fd1e8>
  8059cc:	4811883a 	mov	r8,r9
  8059d0:	3023883a 	mov	r17,r6
  8059d4:	003e0406 	br	8051e8 <__alt_mem_onchip_mem+0xff7fd1e8>
  8059d8:	21fff804 	addi	r7,r4,-32
  8059dc:	01400804 	movi	r5,32
  8059e0:	41ced83a 	srl	r7,r8,r7
  8059e4:	21400a26 	beq	r4,r5,805a10 <__adddf3+0x8a4>
  8059e8:	01401004 	movi	r5,64
  8059ec:	2909c83a 	sub	r4,r5,r4
  8059f0:	4108983a 	sll	r4,r8,r4
  8059f4:	2448b03a 	or	r4,r4,r17
  8059f8:	2008c03a 	cmpne	r4,r4,zero
  8059fc:	3922b03a 	or	r17,r7,r4
  805a00:	0009883a 	mov	r4,zero
  805a04:	003f8d06 	br	80583c <__alt_mem_onchip_mem+0xff7fd83c>
  805a08:	0007883a 	mov	r3,zero
  805a0c:	003fdd06 	br	805984 <__alt_mem_onchip_mem+0xff7fd984>
  805a10:	0009883a 	mov	r4,zero
  805a14:	003ff706 	br	8059f4 <__alt_mem_onchip_mem+0xff7fd9f4>

00805a18 <__gedf2>:
  805a18:	2804d53a 	srli	r2,r5,20
  805a1c:	3806d53a 	srli	r3,r7,20
  805a20:	02000434 	movhi	r8,16
  805a24:	423fffc4 	addi	r8,r8,-1
  805a28:	1081ffcc 	andi	r2,r2,2047
  805a2c:	0241ffc4 	movi	r9,2047
  805a30:	2a14703a 	and	r10,r5,r8
  805a34:	18c1ffcc 	andi	r3,r3,2047
  805a38:	3a10703a 	and	r8,r7,r8
  805a3c:	280ad7fa 	srli	r5,r5,31
  805a40:	380ed7fa 	srli	r7,r7,31
  805a44:	12401d26 	beq	r2,r9,805abc <__gedf2+0xa4>
  805a48:	0241ffc4 	movi	r9,2047
  805a4c:	1a401226 	beq	r3,r9,805a98 <__gedf2+0x80>
  805a50:	1000081e 	bne	r2,zero,805a74 <__gedf2+0x5c>
  805a54:	2296b03a 	or	r11,r4,r10
  805a58:	5813003a 	cmpeq	r9,r11,zero
  805a5c:	1800091e 	bne	r3,zero,805a84 <__gedf2+0x6c>
  805a60:	3218b03a 	or	r12,r6,r8
  805a64:	6000071e 	bne	r12,zero,805a84 <__gedf2+0x6c>
  805a68:	0005883a 	mov	r2,zero
  805a6c:	5800101e 	bne	r11,zero,805ab0 <__gedf2+0x98>
  805a70:	f800283a 	ret
  805a74:	18000c1e 	bne	r3,zero,805aa8 <__gedf2+0x90>
  805a78:	3212b03a 	or	r9,r6,r8
  805a7c:	48000c26 	beq	r9,zero,805ab0 <__gedf2+0x98>
  805a80:	0013883a 	mov	r9,zero
  805a84:	39c03fcc 	andi	r7,r7,255
  805a88:	48000826 	beq	r9,zero,805aac <__gedf2+0x94>
  805a8c:	38000926 	beq	r7,zero,805ab4 <__gedf2+0x9c>
  805a90:	00800044 	movi	r2,1
  805a94:	f800283a 	ret
  805a98:	3212b03a 	or	r9,r6,r8
  805a9c:	483fec26 	beq	r9,zero,805a50 <__alt_mem_onchip_mem+0xff7fda50>
  805aa0:	00bfff84 	movi	r2,-2
  805aa4:	f800283a 	ret
  805aa8:	39c03fcc 	andi	r7,r7,255
  805aac:	29c00626 	beq	r5,r7,805ac8 <__gedf2+0xb0>
  805ab0:	283ff726 	beq	r5,zero,805a90 <__alt_mem_onchip_mem+0xff7fda90>
  805ab4:	00bfffc4 	movi	r2,-1
  805ab8:	f800283a 	ret
  805abc:	2292b03a 	or	r9,r4,r10
  805ac0:	483fe126 	beq	r9,zero,805a48 <__alt_mem_onchip_mem+0xff7fda48>
  805ac4:	003ff606 	br	805aa0 <__alt_mem_onchip_mem+0xff7fdaa0>
  805ac8:	18bff916 	blt	r3,r2,805ab0 <__alt_mem_onchip_mem+0xff7fdab0>
  805acc:	10c00316 	blt	r2,r3,805adc <__gedf2+0xc4>
  805ad0:	42bff736 	bltu	r8,r10,805ab0 <__alt_mem_onchip_mem+0xff7fdab0>
  805ad4:	52000326 	beq	r10,r8,805ae4 <__gedf2+0xcc>
  805ad8:	5200042e 	bgeu	r10,r8,805aec <__gedf2+0xd4>
  805adc:	283fec1e 	bne	r5,zero,805a90 <__alt_mem_onchip_mem+0xff7fda90>
  805ae0:	003ff406 	br	805ab4 <__alt_mem_onchip_mem+0xff7fdab4>
  805ae4:	313ff236 	bltu	r6,r4,805ab0 <__alt_mem_onchip_mem+0xff7fdab0>
  805ae8:	21bffc36 	bltu	r4,r6,805adc <__alt_mem_onchip_mem+0xff7fdadc>
  805aec:	0005883a 	mov	r2,zero
  805af0:	f800283a 	ret

00805af4 <__ledf2>:
  805af4:	2804d53a 	srli	r2,r5,20
  805af8:	3810d53a 	srli	r8,r7,20
  805afc:	00c00434 	movhi	r3,16
  805b00:	18ffffc4 	addi	r3,r3,-1
  805b04:	1081ffcc 	andi	r2,r2,2047
  805b08:	0241ffc4 	movi	r9,2047
  805b0c:	28d4703a 	and	r10,r5,r3
  805b10:	4201ffcc 	andi	r8,r8,2047
  805b14:	38c6703a 	and	r3,r7,r3
  805b18:	280ad7fa 	srli	r5,r5,31
  805b1c:	380ed7fa 	srli	r7,r7,31
  805b20:	12401f26 	beq	r2,r9,805ba0 <__ledf2+0xac>
  805b24:	0241ffc4 	movi	r9,2047
  805b28:	42401426 	beq	r8,r9,805b7c <__ledf2+0x88>
  805b2c:	1000091e 	bne	r2,zero,805b54 <__ledf2+0x60>
  805b30:	2296b03a 	or	r11,r4,r10
  805b34:	5813003a 	cmpeq	r9,r11,zero
  805b38:	29403fcc 	andi	r5,r5,255
  805b3c:	40000a1e 	bne	r8,zero,805b68 <__ledf2+0x74>
  805b40:	30d8b03a 	or	r12,r6,r3
  805b44:	6000081e 	bne	r12,zero,805b68 <__ledf2+0x74>
  805b48:	0005883a 	mov	r2,zero
  805b4c:	5800111e 	bne	r11,zero,805b94 <__ledf2+0xa0>
  805b50:	f800283a 	ret
  805b54:	29403fcc 	andi	r5,r5,255
  805b58:	40000c1e 	bne	r8,zero,805b8c <__ledf2+0x98>
  805b5c:	30d2b03a 	or	r9,r6,r3
  805b60:	48000c26 	beq	r9,zero,805b94 <__ledf2+0xa0>
  805b64:	0013883a 	mov	r9,zero
  805b68:	39c03fcc 	andi	r7,r7,255
  805b6c:	48000826 	beq	r9,zero,805b90 <__ledf2+0x9c>
  805b70:	38001126 	beq	r7,zero,805bb8 <__ledf2+0xc4>
  805b74:	00800044 	movi	r2,1
  805b78:	f800283a 	ret
  805b7c:	30d2b03a 	or	r9,r6,r3
  805b80:	483fea26 	beq	r9,zero,805b2c <__alt_mem_onchip_mem+0xff7fdb2c>
  805b84:	00800084 	movi	r2,2
  805b88:	f800283a 	ret
  805b8c:	39c03fcc 	andi	r7,r7,255
  805b90:	39400726 	beq	r7,r5,805bb0 <__ledf2+0xbc>
  805b94:	2800081e 	bne	r5,zero,805bb8 <__ledf2+0xc4>
  805b98:	00800044 	movi	r2,1
  805b9c:	f800283a 	ret
  805ba0:	2292b03a 	or	r9,r4,r10
  805ba4:	483fdf26 	beq	r9,zero,805b24 <__alt_mem_onchip_mem+0xff7fdb24>
  805ba8:	00800084 	movi	r2,2
  805bac:	f800283a 	ret
  805bb0:	4080030e 	bge	r8,r2,805bc0 <__ledf2+0xcc>
  805bb4:	383fef26 	beq	r7,zero,805b74 <__alt_mem_onchip_mem+0xff7fdb74>
  805bb8:	00bfffc4 	movi	r2,-1
  805bbc:	f800283a 	ret
  805bc0:	123feb16 	blt	r2,r8,805b70 <__alt_mem_onchip_mem+0xff7fdb70>
  805bc4:	1abff336 	bltu	r3,r10,805b94 <__alt_mem_onchip_mem+0xff7fdb94>
  805bc8:	50c00326 	beq	r10,r3,805bd8 <__ledf2+0xe4>
  805bcc:	50c0042e 	bgeu	r10,r3,805be0 <__ledf2+0xec>
  805bd0:	283fe81e 	bne	r5,zero,805b74 <__alt_mem_onchip_mem+0xff7fdb74>
  805bd4:	003ff806 	br	805bb8 <__alt_mem_onchip_mem+0xff7fdbb8>
  805bd8:	313fee36 	bltu	r6,r4,805b94 <__alt_mem_onchip_mem+0xff7fdb94>
  805bdc:	21bffc36 	bltu	r4,r6,805bd0 <__alt_mem_onchip_mem+0xff7fdbd0>
  805be0:	0005883a 	mov	r2,zero
  805be4:	f800283a 	ret

00805be8 <__subdf3>:
  805be8:	02000434 	movhi	r8,16
  805bec:	423fffc4 	addi	r8,r8,-1
  805bf0:	defffb04 	addi	sp,sp,-20
  805bf4:	2a14703a 	and	r10,r5,r8
  805bf8:	3812d53a 	srli	r9,r7,20
  805bfc:	3a10703a 	and	r8,r7,r8
  805c00:	2006d77a 	srli	r3,r4,29
  805c04:	3004d77a 	srli	r2,r6,29
  805c08:	dc000015 	stw	r16,0(sp)
  805c0c:	501490fa 	slli	r10,r10,3
  805c10:	2820d53a 	srli	r16,r5,20
  805c14:	401090fa 	slli	r8,r8,3
  805c18:	dc800215 	stw	r18,8(sp)
  805c1c:	dc400115 	stw	r17,4(sp)
  805c20:	dfc00415 	stw	ra,16(sp)
  805c24:	202290fa 	slli	r17,r4,3
  805c28:	dcc00315 	stw	r19,12(sp)
  805c2c:	4a41ffcc 	andi	r9,r9,2047
  805c30:	0101ffc4 	movi	r4,2047
  805c34:	2824d7fa 	srli	r18,r5,31
  805c38:	8401ffcc 	andi	r16,r16,2047
  805c3c:	50c6b03a 	or	r3,r10,r3
  805c40:	380ed7fa 	srli	r7,r7,31
  805c44:	408ab03a 	or	r5,r8,r2
  805c48:	300c90fa 	slli	r6,r6,3
  805c4c:	49009626 	beq	r9,r4,805ea8 <__subdf3+0x2c0>
  805c50:	39c0005c 	xori	r7,r7,1
  805c54:	8245c83a 	sub	r2,r16,r9
  805c58:	3c807426 	beq	r7,r18,805e2c <__subdf3+0x244>
  805c5c:	0080af0e 	bge	zero,r2,805f1c <__subdf3+0x334>
  805c60:	48002a1e 	bne	r9,zero,805d0c <__subdf3+0x124>
  805c64:	2988b03a 	or	r4,r5,r6
  805c68:	20009a1e 	bne	r4,zero,805ed4 <__subdf3+0x2ec>
  805c6c:	888001cc 	andi	r2,r17,7
  805c70:	10000726 	beq	r2,zero,805c90 <__subdf3+0xa8>
  805c74:	888003cc 	andi	r2,r17,15
  805c78:	01000104 	movi	r4,4
  805c7c:	11000426 	beq	r2,r4,805c90 <__subdf3+0xa8>
  805c80:	890b883a 	add	r5,r17,r4
  805c84:	2c63803a 	cmpltu	r17,r5,r17
  805c88:	1c47883a 	add	r3,r3,r17
  805c8c:	2823883a 	mov	r17,r5
  805c90:	1880202c 	andhi	r2,r3,128
  805c94:	10005926 	beq	r2,zero,805dfc <__subdf3+0x214>
  805c98:	84000044 	addi	r16,r16,1
  805c9c:	0081ffc4 	movi	r2,2047
  805ca0:	8080be26 	beq	r16,r2,805f9c <__subdf3+0x3b4>
  805ca4:	017fe034 	movhi	r5,65408
  805ca8:	297fffc4 	addi	r5,r5,-1
  805cac:	1946703a 	and	r3,r3,r5
  805cb0:	1804977a 	slli	r2,r3,29
  805cb4:	1806927a 	slli	r3,r3,9
  805cb8:	8822d0fa 	srli	r17,r17,3
  805cbc:	8401ffcc 	andi	r16,r16,2047
  805cc0:	180ad33a 	srli	r5,r3,12
  805cc4:	9100004c 	andi	r4,r18,1
  805cc8:	1444b03a 	or	r2,r2,r17
  805ccc:	80c1ffcc 	andi	r3,r16,2047
  805cd0:	1820953a 	slli	r16,r3,20
  805cd4:	20c03fcc 	andi	r3,r4,255
  805cd8:	180897fa 	slli	r4,r3,31
  805cdc:	00c00434 	movhi	r3,16
  805ce0:	18ffffc4 	addi	r3,r3,-1
  805ce4:	28c6703a 	and	r3,r5,r3
  805ce8:	1c06b03a 	or	r3,r3,r16
  805cec:	1906b03a 	or	r3,r3,r4
  805cf0:	dfc00417 	ldw	ra,16(sp)
  805cf4:	dcc00317 	ldw	r19,12(sp)
  805cf8:	dc800217 	ldw	r18,8(sp)
  805cfc:	dc400117 	ldw	r17,4(sp)
  805d00:	dc000017 	ldw	r16,0(sp)
  805d04:	dec00504 	addi	sp,sp,20
  805d08:	f800283a 	ret
  805d0c:	0101ffc4 	movi	r4,2047
  805d10:	813fd626 	beq	r16,r4,805c6c <__alt_mem_onchip_mem+0xff7fdc6c>
  805d14:	29402034 	orhi	r5,r5,128
  805d18:	01000e04 	movi	r4,56
  805d1c:	2080a316 	blt	r4,r2,805fac <__subdf3+0x3c4>
  805d20:	010007c4 	movi	r4,31
  805d24:	2080c616 	blt	r4,r2,806040 <__subdf3+0x458>
  805d28:	01000804 	movi	r4,32
  805d2c:	2089c83a 	sub	r4,r4,r2
  805d30:	2910983a 	sll	r8,r5,r4
  805d34:	308ed83a 	srl	r7,r6,r2
  805d38:	3108983a 	sll	r4,r6,r4
  805d3c:	2884d83a 	srl	r2,r5,r2
  805d40:	41ccb03a 	or	r6,r8,r7
  805d44:	2008c03a 	cmpne	r4,r4,zero
  805d48:	310cb03a 	or	r6,r6,r4
  805d4c:	898dc83a 	sub	r6,r17,r6
  805d50:	89a3803a 	cmpltu	r17,r17,r6
  805d54:	1887c83a 	sub	r3,r3,r2
  805d58:	1c47c83a 	sub	r3,r3,r17
  805d5c:	3023883a 	mov	r17,r6
  805d60:	1880202c 	andhi	r2,r3,128
  805d64:	10002326 	beq	r2,zero,805df4 <__subdf3+0x20c>
  805d68:	04c02034 	movhi	r19,128
  805d6c:	9cffffc4 	addi	r19,r19,-1
  805d70:	1ce6703a 	and	r19,r3,r19
  805d74:	98007a26 	beq	r19,zero,805f60 <__subdf3+0x378>
  805d78:	9809883a 	mov	r4,r19
  805d7c:	08065c00 	call	8065c0 <__clzsi2>
  805d80:	113ffe04 	addi	r4,r2,-8
  805d84:	00c007c4 	movi	r3,31
  805d88:	19007b16 	blt	r3,r4,805f78 <__subdf3+0x390>
  805d8c:	00800804 	movi	r2,32
  805d90:	1105c83a 	sub	r2,r2,r4
  805d94:	8884d83a 	srl	r2,r17,r2
  805d98:	9906983a 	sll	r3,r19,r4
  805d9c:	8922983a 	sll	r17,r17,r4
  805da0:	10c4b03a 	or	r2,r2,r3
  805da4:	24007816 	blt	r4,r16,805f88 <__subdf3+0x3a0>
  805da8:	2421c83a 	sub	r16,r4,r16
  805dac:	80c00044 	addi	r3,r16,1
  805db0:	010007c4 	movi	r4,31
  805db4:	20c09516 	blt	r4,r3,80600c <__subdf3+0x424>
  805db8:	01400804 	movi	r5,32
  805dbc:	28cbc83a 	sub	r5,r5,r3
  805dc0:	88c8d83a 	srl	r4,r17,r3
  805dc4:	8962983a 	sll	r17,r17,r5
  805dc8:	114a983a 	sll	r5,r2,r5
  805dcc:	10c6d83a 	srl	r3,r2,r3
  805dd0:	8804c03a 	cmpne	r2,r17,zero
  805dd4:	290ab03a 	or	r5,r5,r4
  805dd8:	28a2b03a 	or	r17,r5,r2
  805ddc:	0021883a 	mov	r16,zero
  805de0:	003fa206 	br	805c6c <__alt_mem_onchip_mem+0xff7fdc6c>
  805de4:	2090b03a 	or	r8,r4,r2
  805de8:	40018e26 	beq	r8,zero,806424 <__subdf3+0x83c>
  805dec:	1007883a 	mov	r3,r2
  805df0:	2023883a 	mov	r17,r4
  805df4:	888001cc 	andi	r2,r17,7
  805df8:	103f9e1e 	bne	r2,zero,805c74 <__alt_mem_onchip_mem+0xff7fdc74>
  805dfc:	1804977a 	slli	r2,r3,29
  805e00:	8822d0fa 	srli	r17,r17,3
  805e04:	1810d0fa 	srli	r8,r3,3
  805e08:	9100004c 	andi	r4,r18,1
  805e0c:	1444b03a 	or	r2,r2,r17
  805e10:	00c1ffc4 	movi	r3,2047
  805e14:	80c02826 	beq	r16,r3,805eb8 <__subdf3+0x2d0>
  805e18:	01400434 	movhi	r5,16
  805e1c:	297fffc4 	addi	r5,r5,-1
  805e20:	80e0703a 	and	r16,r16,r3
  805e24:	414a703a 	and	r5,r8,r5
  805e28:	003fa806 	br	805ccc <__alt_mem_onchip_mem+0xff7fdccc>
  805e2c:	0080630e 	bge	zero,r2,805fbc <__subdf3+0x3d4>
  805e30:	48003026 	beq	r9,zero,805ef4 <__subdf3+0x30c>
  805e34:	0101ffc4 	movi	r4,2047
  805e38:	813f8c26 	beq	r16,r4,805c6c <__alt_mem_onchip_mem+0xff7fdc6c>
  805e3c:	29402034 	orhi	r5,r5,128
  805e40:	01000e04 	movi	r4,56
  805e44:	2080a90e 	bge	r4,r2,8060ec <__subdf3+0x504>
  805e48:	298cb03a 	or	r6,r5,r6
  805e4c:	3012c03a 	cmpne	r9,r6,zero
  805e50:	0005883a 	mov	r2,zero
  805e54:	4c53883a 	add	r9,r9,r17
  805e58:	4c63803a 	cmpltu	r17,r9,r17
  805e5c:	10c7883a 	add	r3,r2,r3
  805e60:	88c7883a 	add	r3,r17,r3
  805e64:	4823883a 	mov	r17,r9
  805e68:	1880202c 	andhi	r2,r3,128
  805e6c:	1000d026 	beq	r2,zero,8061b0 <__subdf3+0x5c8>
  805e70:	84000044 	addi	r16,r16,1
  805e74:	0081ffc4 	movi	r2,2047
  805e78:	8080fe26 	beq	r16,r2,806274 <__subdf3+0x68c>
  805e7c:	00bfe034 	movhi	r2,65408
  805e80:	10bfffc4 	addi	r2,r2,-1
  805e84:	1886703a 	and	r3,r3,r2
  805e88:	880ad07a 	srli	r5,r17,1
  805e8c:	180497fa 	slli	r2,r3,31
  805e90:	8900004c 	andi	r4,r17,1
  805e94:	2922b03a 	or	r17,r5,r4
  805e98:	1806d07a 	srli	r3,r3,1
  805e9c:	1462b03a 	or	r17,r2,r17
  805ea0:	3825883a 	mov	r18,r7
  805ea4:	003f7106 	br	805c6c <__alt_mem_onchip_mem+0xff7fdc6c>
  805ea8:	2984b03a 	or	r2,r5,r6
  805eac:	103f6826 	beq	r2,zero,805c50 <__alt_mem_onchip_mem+0xff7fdc50>
  805eb0:	39c03fcc 	andi	r7,r7,255
  805eb4:	003f6706 	br	805c54 <__alt_mem_onchip_mem+0xff7fdc54>
  805eb8:	4086b03a 	or	r3,r8,r2
  805ebc:	18015226 	beq	r3,zero,806408 <__subdf3+0x820>
  805ec0:	00c00434 	movhi	r3,16
  805ec4:	41400234 	orhi	r5,r8,8
  805ec8:	18ffffc4 	addi	r3,r3,-1
  805ecc:	28ca703a 	and	r5,r5,r3
  805ed0:	003f7e06 	br	805ccc <__alt_mem_onchip_mem+0xff7fdccc>
  805ed4:	10bfffc4 	addi	r2,r2,-1
  805ed8:	1000491e 	bne	r2,zero,806000 <__subdf3+0x418>
  805edc:	898fc83a 	sub	r7,r17,r6
  805ee0:	89e3803a 	cmpltu	r17,r17,r7
  805ee4:	1947c83a 	sub	r3,r3,r5
  805ee8:	1c47c83a 	sub	r3,r3,r17
  805eec:	3823883a 	mov	r17,r7
  805ef0:	003f9b06 	br	805d60 <__alt_mem_onchip_mem+0xff7fdd60>
  805ef4:	2988b03a 	or	r4,r5,r6
  805ef8:	203f5c26 	beq	r4,zero,805c6c <__alt_mem_onchip_mem+0xff7fdc6c>
  805efc:	10bfffc4 	addi	r2,r2,-1
  805f00:	1000931e 	bne	r2,zero,806150 <__subdf3+0x568>
  805f04:	898d883a 	add	r6,r17,r6
  805f08:	3463803a 	cmpltu	r17,r6,r17
  805f0c:	1947883a 	add	r3,r3,r5
  805f10:	88c7883a 	add	r3,r17,r3
  805f14:	3023883a 	mov	r17,r6
  805f18:	003fd306 	br	805e68 <__alt_mem_onchip_mem+0xff7fde68>
  805f1c:	1000541e 	bne	r2,zero,806070 <__subdf3+0x488>
  805f20:	80800044 	addi	r2,r16,1
  805f24:	1081ffcc 	andi	r2,r2,2047
  805f28:	01000044 	movi	r4,1
  805f2c:	2080a20e 	bge	r4,r2,8061b8 <__subdf3+0x5d0>
  805f30:	8989c83a 	sub	r4,r17,r6
  805f34:	8905803a 	cmpltu	r2,r17,r4
  805f38:	1967c83a 	sub	r19,r3,r5
  805f3c:	98a7c83a 	sub	r19,r19,r2
  805f40:	9880202c 	andhi	r2,r19,128
  805f44:	10006326 	beq	r2,zero,8060d4 <__subdf3+0x4ec>
  805f48:	3463c83a 	sub	r17,r6,r17
  805f4c:	28c7c83a 	sub	r3,r5,r3
  805f50:	344d803a 	cmpltu	r6,r6,r17
  805f54:	19a7c83a 	sub	r19,r3,r6
  805f58:	3825883a 	mov	r18,r7
  805f5c:	983f861e 	bne	r19,zero,805d78 <__alt_mem_onchip_mem+0xff7fdd78>
  805f60:	8809883a 	mov	r4,r17
  805f64:	08065c00 	call	8065c0 <__clzsi2>
  805f68:	10800804 	addi	r2,r2,32
  805f6c:	113ffe04 	addi	r4,r2,-8
  805f70:	00c007c4 	movi	r3,31
  805f74:	193f850e 	bge	r3,r4,805d8c <__alt_mem_onchip_mem+0xff7fdd8c>
  805f78:	10bff604 	addi	r2,r2,-40
  805f7c:	8884983a 	sll	r2,r17,r2
  805f80:	0023883a 	mov	r17,zero
  805f84:	243f880e 	bge	r4,r16,805da8 <__alt_mem_onchip_mem+0xff7fdda8>
  805f88:	00ffe034 	movhi	r3,65408
  805f8c:	18ffffc4 	addi	r3,r3,-1
  805f90:	8121c83a 	sub	r16,r16,r4
  805f94:	10c6703a 	and	r3,r2,r3
  805f98:	003f3406 	br	805c6c <__alt_mem_onchip_mem+0xff7fdc6c>
  805f9c:	9100004c 	andi	r4,r18,1
  805fa0:	000b883a 	mov	r5,zero
  805fa4:	0005883a 	mov	r2,zero
  805fa8:	003f4806 	br	805ccc <__alt_mem_onchip_mem+0xff7fdccc>
  805fac:	298cb03a 	or	r6,r5,r6
  805fb0:	300cc03a 	cmpne	r6,r6,zero
  805fb4:	0005883a 	mov	r2,zero
  805fb8:	003f6406 	br	805d4c <__alt_mem_onchip_mem+0xff7fdd4c>
  805fbc:	10009a1e 	bne	r2,zero,806228 <__subdf3+0x640>
  805fc0:	82400044 	addi	r9,r16,1
  805fc4:	4881ffcc 	andi	r2,r9,2047
  805fc8:	02800044 	movi	r10,1
  805fcc:	5080670e 	bge	r10,r2,80616c <__subdf3+0x584>
  805fd0:	0081ffc4 	movi	r2,2047
  805fd4:	4880af26 	beq	r9,r2,806294 <__subdf3+0x6ac>
  805fd8:	898d883a 	add	r6,r17,r6
  805fdc:	1945883a 	add	r2,r3,r5
  805fe0:	3447803a 	cmpltu	r3,r6,r17
  805fe4:	1887883a 	add	r3,r3,r2
  805fe8:	182297fa 	slli	r17,r3,31
  805fec:	300cd07a 	srli	r6,r6,1
  805ff0:	1806d07a 	srli	r3,r3,1
  805ff4:	4821883a 	mov	r16,r9
  805ff8:	89a2b03a 	or	r17,r17,r6
  805ffc:	003f1b06 	br	805c6c <__alt_mem_onchip_mem+0xff7fdc6c>
  806000:	0101ffc4 	movi	r4,2047
  806004:	813f441e 	bne	r16,r4,805d18 <__alt_mem_onchip_mem+0xff7fdd18>
  806008:	003f1806 	br	805c6c <__alt_mem_onchip_mem+0xff7fdc6c>
  80600c:	843ff844 	addi	r16,r16,-31
  806010:	01400804 	movi	r5,32
  806014:	1408d83a 	srl	r4,r2,r16
  806018:	19405026 	beq	r3,r5,80615c <__subdf3+0x574>
  80601c:	01401004 	movi	r5,64
  806020:	28c7c83a 	sub	r3,r5,r3
  806024:	10c4983a 	sll	r2,r2,r3
  806028:	88a2b03a 	or	r17,r17,r2
  80602c:	8822c03a 	cmpne	r17,r17,zero
  806030:	2462b03a 	or	r17,r4,r17
  806034:	0007883a 	mov	r3,zero
  806038:	0021883a 	mov	r16,zero
  80603c:	003f6d06 	br	805df4 <__alt_mem_onchip_mem+0xff7fddf4>
  806040:	11fff804 	addi	r7,r2,-32
  806044:	01000804 	movi	r4,32
  806048:	29ced83a 	srl	r7,r5,r7
  80604c:	11004526 	beq	r2,r4,806164 <__subdf3+0x57c>
  806050:	01001004 	movi	r4,64
  806054:	2089c83a 	sub	r4,r4,r2
  806058:	2904983a 	sll	r2,r5,r4
  80605c:	118cb03a 	or	r6,r2,r6
  806060:	300cc03a 	cmpne	r6,r6,zero
  806064:	398cb03a 	or	r6,r7,r6
  806068:	0005883a 	mov	r2,zero
  80606c:	003f3706 	br	805d4c <__alt_mem_onchip_mem+0xff7fdd4c>
  806070:	80002a26 	beq	r16,zero,80611c <__subdf3+0x534>
  806074:	0101ffc4 	movi	r4,2047
  806078:	49006626 	beq	r9,r4,806214 <__subdf3+0x62c>
  80607c:	0085c83a 	sub	r2,zero,r2
  806080:	18c02034 	orhi	r3,r3,128
  806084:	01000e04 	movi	r4,56
  806088:	20807e16 	blt	r4,r2,806284 <__subdf3+0x69c>
  80608c:	010007c4 	movi	r4,31
  806090:	2080e716 	blt	r4,r2,806430 <__subdf3+0x848>
  806094:	01000804 	movi	r4,32
  806098:	2089c83a 	sub	r4,r4,r2
  80609c:	1914983a 	sll	r10,r3,r4
  8060a0:	8890d83a 	srl	r8,r17,r2
  8060a4:	8908983a 	sll	r4,r17,r4
  8060a8:	1884d83a 	srl	r2,r3,r2
  8060ac:	5222b03a 	or	r17,r10,r8
  8060b0:	2006c03a 	cmpne	r3,r4,zero
  8060b4:	88e2b03a 	or	r17,r17,r3
  8060b8:	3463c83a 	sub	r17,r6,r17
  8060bc:	2885c83a 	sub	r2,r5,r2
  8060c0:	344d803a 	cmpltu	r6,r6,r17
  8060c4:	1187c83a 	sub	r3,r2,r6
  8060c8:	4821883a 	mov	r16,r9
  8060cc:	3825883a 	mov	r18,r7
  8060d0:	003f2306 	br	805d60 <__alt_mem_onchip_mem+0xff7fdd60>
  8060d4:	24d0b03a 	or	r8,r4,r19
  8060d8:	40001b1e 	bne	r8,zero,806148 <__subdf3+0x560>
  8060dc:	0005883a 	mov	r2,zero
  8060e0:	0009883a 	mov	r4,zero
  8060e4:	0021883a 	mov	r16,zero
  8060e8:	003f4906 	br	805e10 <__alt_mem_onchip_mem+0xff7fde10>
  8060ec:	010007c4 	movi	r4,31
  8060f0:	20803a16 	blt	r4,r2,8061dc <__subdf3+0x5f4>
  8060f4:	01000804 	movi	r4,32
  8060f8:	2089c83a 	sub	r4,r4,r2
  8060fc:	2912983a 	sll	r9,r5,r4
  806100:	3090d83a 	srl	r8,r6,r2
  806104:	3108983a 	sll	r4,r6,r4
  806108:	2884d83a 	srl	r2,r5,r2
  80610c:	4a12b03a 	or	r9,r9,r8
  806110:	2008c03a 	cmpne	r4,r4,zero
  806114:	4912b03a 	or	r9,r9,r4
  806118:	003f4e06 	br	805e54 <__alt_mem_onchip_mem+0xff7fde54>
  80611c:	1c48b03a 	or	r4,r3,r17
  806120:	20003c26 	beq	r4,zero,806214 <__subdf3+0x62c>
  806124:	0084303a 	nor	r2,zero,r2
  806128:	1000381e 	bne	r2,zero,80620c <__subdf3+0x624>
  80612c:	3463c83a 	sub	r17,r6,r17
  806130:	28c5c83a 	sub	r2,r5,r3
  806134:	344d803a 	cmpltu	r6,r6,r17
  806138:	1187c83a 	sub	r3,r2,r6
  80613c:	4821883a 	mov	r16,r9
  806140:	3825883a 	mov	r18,r7
  806144:	003f0606 	br	805d60 <__alt_mem_onchip_mem+0xff7fdd60>
  806148:	2023883a 	mov	r17,r4
  80614c:	003f0906 	br	805d74 <__alt_mem_onchip_mem+0xff7fdd74>
  806150:	0101ffc4 	movi	r4,2047
  806154:	813f3a1e 	bne	r16,r4,805e40 <__alt_mem_onchip_mem+0xff7fde40>
  806158:	003ec406 	br	805c6c <__alt_mem_onchip_mem+0xff7fdc6c>
  80615c:	0005883a 	mov	r2,zero
  806160:	003fb106 	br	806028 <__alt_mem_onchip_mem+0xff7fe028>
  806164:	0005883a 	mov	r2,zero
  806168:	003fbc06 	br	80605c <__alt_mem_onchip_mem+0xff7fe05c>
  80616c:	1c44b03a 	or	r2,r3,r17
  806170:	80008e1e 	bne	r16,zero,8063ac <__subdf3+0x7c4>
  806174:	1000c826 	beq	r2,zero,806498 <__subdf3+0x8b0>
  806178:	2984b03a 	or	r2,r5,r6
  80617c:	103ebb26 	beq	r2,zero,805c6c <__alt_mem_onchip_mem+0xff7fdc6c>
  806180:	8989883a 	add	r4,r17,r6
  806184:	1945883a 	add	r2,r3,r5
  806188:	2447803a 	cmpltu	r3,r4,r17
  80618c:	1887883a 	add	r3,r3,r2
  806190:	1880202c 	andhi	r2,r3,128
  806194:	2023883a 	mov	r17,r4
  806198:	103f1626 	beq	r2,zero,805df4 <__alt_mem_onchip_mem+0xff7fddf4>
  80619c:	00bfe034 	movhi	r2,65408
  8061a0:	10bfffc4 	addi	r2,r2,-1
  8061a4:	5021883a 	mov	r16,r10
  8061a8:	1886703a 	and	r3,r3,r2
  8061ac:	003eaf06 	br	805c6c <__alt_mem_onchip_mem+0xff7fdc6c>
  8061b0:	3825883a 	mov	r18,r7
  8061b4:	003f0f06 	br	805df4 <__alt_mem_onchip_mem+0xff7fddf4>
  8061b8:	1c44b03a 	or	r2,r3,r17
  8061bc:	8000251e 	bne	r16,zero,806254 <__subdf3+0x66c>
  8061c0:	1000661e 	bne	r2,zero,80635c <__subdf3+0x774>
  8061c4:	2990b03a 	or	r8,r5,r6
  8061c8:	40009626 	beq	r8,zero,806424 <__subdf3+0x83c>
  8061cc:	2807883a 	mov	r3,r5
  8061d0:	3023883a 	mov	r17,r6
  8061d4:	3825883a 	mov	r18,r7
  8061d8:	003ea406 	br	805c6c <__alt_mem_onchip_mem+0xff7fdc6c>
  8061dc:	127ff804 	addi	r9,r2,-32
  8061e0:	01000804 	movi	r4,32
  8061e4:	2a52d83a 	srl	r9,r5,r9
  8061e8:	11008c26 	beq	r2,r4,80641c <__subdf3+0x834>
  8061ec:	01001004 	movi	r4,64
  8061f0:	2085c83a 	sub	r2,r4,r2
  8061f4:	2884983a 	sll	r2,r5,r2
  8061f8:	118cb03a 	or	r6,r2,r6
  8061fc:	300cc03a 	cmpne	r6,r6,zero
  806200:	4992b03a 	or	r9,r9,r6
  806204:	0005883a 	mov	r2,zero
  806208:	003f1206 	br	805e54 <__alt_mem_onchip_mem+0xff7fde54>
  80620c:	0101ffc4 	movi	r4,2047
  806210:	493f9c1e 	bne	r9,r4,806084 <__alt_mem_onchip_mem+0xff7fe084>
  806214:	2807883a 	mov	r3,r5
  806218:	3023883a 	mov	r17,r6
  80621c:	4821883a 	mov	r16,r9
  806220:	3825883a 	mov	r18,r7
  806224:	003e9106 	br	805c6c <__alt_mem_onchip_mem+0xff7fdc6c>
  806228:	80001f1e 	bne	r16,zero,8062a8 <__subdf3+0x6c0>
  80622c:	1c48b03a 	or	r4,r3,r17
  806230:	20005a26 	beq	r4,zero,80639c <__subdf3+0x7b4>
  806234:	0084303a 	nor	r2,zero,r2
  806238:	1000561e 	bne	r2,zero,806394 <__subdf3+0x7ac>
  80623c:	89a3883a 	add	r17,r17,r6
  806240:	1945883a 	add	r2,r3,r5
  806244:	898d803a 	cmpltu	r6,r17,r6
  806248:	3087883a 	add	r3,r6,r2
  80624c:	4821883a 	mov	r16,r9
  806250:	003f0506 	br	805e68 <__alt_mem_onchip_mem+0xff7fde68>
  806254:	10002b1e 	bne	r2,zero,806304 <__subdf3+0x71c>
  806258:	2984b03a 	or	r2,r5,r6
  80625c:	10008026 	beq	r2,zero,806460 <__subdf3+0x878>
  806260:	2807883a 	mov	r3,r5
  806264:	3023883a 	mov	r17,r6
  806268:	3825883a 	mov	r18,r7
  80626c:	0401ffc4 	movi	r16,2047
  806270:	003e7e06 	br	805c6c <__alt_mem_onchip_mem+0xff7fdc6c>
  806274:	3809883a 	mov	r4,r7
  806278:	0011883a 	mov	r8,zero
  80627c:	0005883a 	mov	r2,zero
  806280:	003ee306 	br	805e10 <__alt_mem_onchip_mem+0xff7fde10>
  806284:	1c62b03a 	or	r17,r3,r17
  806288:	8822c03a 	cmpne	r17,r17,zero
  80628c:	0005883a 	mov	r2,zero
  806290:	003f8906 	br	8060b8 <__alt_mem_onchip_mem+0xff7fe0b8>
  806294:	3809883a 	mov	r4,r7
  806298:	4821883a 	mov	r16,r9
  80629c:	0011883a 	mov	r8,zero
  8062a0:	0005883a 	mov	r2,zero
  8062a4:	003eda06 	br	805e10 <__alt_mem_onchip_mem+0xff7fde10>
  8062a8:	0101ffc4 	movi	r4,2047
  8062ac:	49003b26 	beq	r9,r4,80639c <__subdf3+0x7b4>
  8062b0:	0085c83a 	sub	r2,zero,r2
  8062b4:	18c02034 	orhi	r3,r3,128
  8062b8:	01000e04 	movi	r4,56
  8062bc:	20806e16 	blt	r4,r2,806478 <__subdf3+0x890>
  8062c0:	010007c4 	movi	r4,31
  8062c4:	20807716 	blt	r4,r2,8064a4 <__subdf3+0x8bc>
  8062c8:	01000804 	movi	r4,32
  8062cc:	2089c83a 	sub	r4,r4,r2
  8062d0:	1914983a 	sll	r10,r3,r4
  8062d4:	8890d83a 	srl	r8,r17,r2
  8062d8:	8908983a 	sll	r4,r17,r4
  8062dc:	1884d83a 	srl	r2,r3,r2
  8062e0:	5222b03a 	or	r17,r10,r8
  8062e4:	2006c03a 	cmpne	r3,r4,zero
  8062e8:	88e2b03a 	or	r17,r17,r3
  8062ec:	89a3883a 	add	r17,r17,r6
  8062f0:	1145883a 	add	r2,r2,r5
  8062f4:	898d803a 	cmpltu	r6,r17,r6
  8062f8:	3087883a 	add	r3,r6,r2
  8062fc:	4821883a 	mov	r16,r9
  806300:	003ed906 	br	805e68 <__alt_mem_onchip_mem+0xff7fde68>
  806304:	2984b03a 	or	r2,r5,r6
  806308:	10004226 	beq	r2,zero,806414 <__subdf3+0x82c>
  80630c:	1808d0fa 	srli	r4,r3,3
  806310:	8822d0fa 	srli	r17,r17,3
  806314:	1806977a 	slli	r3,r3,29
  806318:	2080022c 	andhi	r2,r4,8
  80631c:	1c62b03a 	or	r17,r3,r17
  806320:	10000826 	beq	r2,zero,806344 <__subdf3+0x75c>
  806324:	2812d0fa 	srli	r9,r5,3
  806328:	4880022c 	andhi	r2,r9,8
  80632c:	1000051e 	bne	r2,zero,806344 <__subdf3+0x75c>
  806330:	300cd0fa 	srli	r6,r6,3
  806334:	2804977a 	slli	r2,r5,29
  806338:	4809883a 	mov	r4,r9
  80633c:	3825883a 	mov	r18,r7
  806340:	11a2b03a 	or	r17,r2,r6
  806344:	8806d77a 	srli	r3,r17,29
  806348:	200890fa 	slli	r4,r4,3
  80634c:	882290fa 	slli	r17,r17,3
  806350:	0401ffc4 	movi	r16,2047
  806354:	1906b03a 	or	r3,r3,r4
  806358:	003e4406 	br	805c6c <__alt_mem_onchip_mem+0xff7fdc6c>
  80635c:	2984b03a 	or	r2,r5,r6
  806360:	103e4226 	beq	r2,zero,805c6c <__alt_mem_onchip_mem+0xff7fdc6c>
  806364:	8989c83a 	sub	r4,r17,r6
  806368:	8911803a 	cmpltu	r8,r17,r4
  80636c:	1945c83a 	sub	r2,r3,r5
  806370:	1205c83a 	sub	r2,r2,r8
  806374:	1200202c 	andhi	r8,r2,128
  806378:	403e9a26 	beq	r8,zero,805de4 <__alt_mem_onchip_mem+0xff7fdde4>
  80637c:	3463c83a 	sub	r17,r6,r17
  806380:	28c5c83a 	sub	r2,r5,r3
  806384:	344d803a 	cmpltu	r6,r6,r17
  806388:	1187c83a 	sub	r3,r2,r6
  80638c:	3825883a 	mov	r18,r7
  806390:	003e3606 	br	805c6c <__alt_mem_onchip_mem+0xff7fdc6c>
  806394:	0101ffc4 	movi	r4,2047
  806398:	493fc71e 	bne	r9,r4,8062b8 <__alt_mem_onchip_mem+0xff7fe2b8>
  80639c:	2807883a 	mov	r3,r5
  8063a0:	3023883a 	mov	r17,r6
  8063a4:	4821883a 	mov	r16,r9
  8063a8:	003e3006 	br	805c6c <__alt_mem_onchip_mem+0xff7fdc6c>
  8063ac:	10003626 	beq	r2,zero,806488 <__subdf3+0x8a0>
  8063b0:	2984b03a 	or	r2,r5,r6
  8063b4:	10001726 	beq	r2,zero,806414 <__subdf3+0x82c>
  8063b8:	1808d0fa 	srli	r4,r3,3
  8063bc:	8822d0fa 	srli	r17,r17,3
  8063c0:	1806977a 	slli	r3,r3,29
  8063c4:	2080022c 	andhi	r2,r4,8
  8063c8:	1c62b03a 	or	r17,r3,r17
  8063cc:	10000726 	beq	r2,zero,8063ec <__subdf3+0x804>
  8063d0:	2812d0fa 	srli	r9,r5,3
  8063d4:	4880022c 	andhi	r2,r9,8
  8063d8:	1000041e 	bne	r2,zero,8063ec <__subdf3+0x804>
  8063dc:	300cd0fa 	srli	r6,r6,3
  8063e0:	2804977a 	slli	r2,r5,29
  8063e4:	4809883a 	mov	r4,r9
  8063e8:	11a2b03a 	or	r17,r2,r6
  8063ec:	8806d77a 	srli	r3,r17,29
  8063f0:	200890fa 	slli	r4,r4,3
  8063f4:	882290fa 	slli	r17,r17,3
  8063f8:	3825883a 	mov	r18,r7
  8063fc:	1906b03a 	or	r3,r3,r4
  806400:	0401ffc4 	movi	r16,2047
  806404:	003e1906 	br	805c6c <__alt_mem_onchip_mem+0xff7fdc6c>
  806408:	000b883a 	mov	r5,zero
  80640c:	0005883a 	mov	r2,zero
  806410:	003e2e06 	br	805ccc <__alt_mem_onchip_mem+0xff7fdccc>
  806414:	0401ffc4 	movi	r16,2047
  806418:	003e1406 	br	805c6c <__alt_mem_onchip_mem+0xff7fdc6c>
  80641c:	0005883a 	mov	r2,zero
  806420:	003f7506 	br	8061f8 <__alt_mem_onchip_mem+0xff7fe1f8>
  806424:	0005883a 	mov	r2,zero
  806428:	0009883a 	mov	r4,zero
  80642c:	003e7806 	br	805e10 <__alt_mem_onchip_mem+0xff7fde10>
  806430:	123ff804 	addi	r8,r2,-32
  806434:	01000804 	movi	r4,32
  806438:	1a10d83a 	srl	r8,r3,r8
  80643c:	11002526 	beq	r2,r4,8064d4 <__subdf3+0x8ec>
  806440:	01001004 	movi	r4,64
  806444:	2085c83a 	sub	r2,r4,r2
  806448:	1884983a 	sll	r2,r3,r2
  80644c:	1444b03a 	or	r2,r2,r17
  806450:	1004c03a 	cmpne	r2,r2,zero
  806454:	40a2b03a 	or	r17,r8,r2
  806458:	0005883a 	mov	r2,zero
  80645c:	003f1606 	br	8060b8 <__alt_mem_onchip_mem+0xff7fe0b8>
  806460:	02000434 	movhi	r8,16
  806464:	0009883a 	mov	r4,zero
  806468:	423fffc4 	addi	r8,r8,-1
  80646c:	00bfffc4 	movi	r2,-1
  806470:	0401ffc4 	movi	r16,2047
  806474:	003e6606 	br	805e10 <__alt_mem_onchip_mem+0xff7fde10>
  806478:	1c62b03a 	or	r17,r3,r17
  80647c:	8822c03a 	cmpne	r17,r17,zero
  806480:	0005883a 	mov	r2,zero
  806484:	003f9906 	br	8062ec <__alt_mem_onchip_mem+0xff7fe2ec>
  806488:	2807883a 	mov	r3,r5
  80648c:	3023883a 	mov	r17,r6
  806490:	0401ffc4 	movi	r16,2047
  806494:	003df506 	br	805c6c <__alt_mem_onchip_mem+0xff7fdc6c>
  806498:	2807883a 	mov	r3,r5
  80649c:	3023883a 	mov	r17,r6
  8064a0:	003df206 	br	805c6c <__alt_mem_onchip_mem+0xff7fdc6c>
  8064a4:	123ff804 	addi	r8,r2,-32
  8064a8:	01000804 	movi	r4,32
  8064ac:	1a10d83a 	srl	r8,r3,r8
  8064b0:	11000a26 	beq	r2,r4,8064dc <__subdf3+0x8f4>
  8064b4:	01001004 	movi	r4,64
  8064b8:	2085c83a 	sub	r2,r4,r2
  8064bc:	1884983a 	sll	r2,r3,r2
  8064c0:	1444b03a 	or	r2,r2,r17
  8064c4:	1004c03a 	cmpne	r2,r2,zero
  8064c8:	40a2b03a 	or	r17,r8,r2
  8064cc:	0005883a 	mov	r2,zero
  8064d0:	003f8606 	br	8062ec <__alt_mem_onchip_mem+0xff7fe2ec>
  8064d4:	0005883a 	mov	r2,zero
  8064d8:	003fdc06 	br	80644c <__alt_mem_onchip_mem+0xff7fe44c>
  8064dc:	0005883a 	mov	r2,zero
  8064e0:	003ff706 	br	8064c0 <__alt_mem_onchip_mem+0xff7fe4c0>

008064e4 <__floatsidf>:
  8064e4:	defffd04 	addi	sp,sp,-12
  8064e8:	dfc00215 	stw	ra,8(sp)
  8064ec:	dc400115 	stw	r17,4(sp)
  8064f0:	dc000015 	stw	r16,0(sp)
  8064f4:	20002b26 	beq	r4,zero,8065a4 <__floatsidf+0xc0>
  8064f8:	2023883a 	mov	r17,r4
  8064fc:	2020d7fa 	srli	r16,r4,31
  806500:	20002d16 	blt	r4,zero,8065b8 <__floatsidf+0xd4>
  806504:	8809883a 	mov	r4,r17
  806508:	08065c00 	call	8065c0 <__clzsi2>
  80650c:	01410784 	movi	r5,1054
  806510:	288bc83a 	sub	r5,r5,r2
  806514:	01010cc4 	movi	r4,1075
  806518:	2149c83a 	sub	r4,r4,r5
  80651c:	00c007c4 	movi	r3,31
  806520:	1900160e 	bge	r3,r4,80657c <__floatsidf+0x98>
  806524:	00c104c4 	movi	r3,1043
  806528:	1947c83a 	sub	r3,r3,r5
  80652c:	88c6983a 	sll	r3,r17,r3
  806530:	00800434 	movhi	r2,16
  806534:	10bfffc4 	addi	r2,r2,-1
  806538:	1886703a 	and	r3,r3,r2
  80653c:	2941ffcc 	andi	r5,r5,2047
  806540:	800d883a 	mov	r6,r16
  806544:	0005883a 	mov	r2,zero
  806548:	280a953a 	slli	r5,r5,20
  80654c:	31803fcc 	andi	r6,r6,255
  806550:	01000434 	movhi	r4,16
  806554:	300c97fa 	slli	r6,r6,31
  806558:	213fffc4 	addi	r4,r4,-1
  80655c:	1906703a 	and	r3,r3,r4
  806560:	1946b03a 	or	r3,r3,r5
  806564:	1986b03a 	or	r3,r3,r6
  806568:	dfc00217 	ldw	ra,8(sp)
  80656c:	dc400117 	ldw	r17,4(sp)
  806570:	dc000017 	ldw	r16,0(sp)
  806574:	dec00304 	addi	sp,sp,12
  806578:	f800283a 	ret
  80657c:	00c002c4 	movi	r3,11
  806580:	1887c83a 	sub	r3,r3,r2
  806584:	88c6d83a 	srl	r3,r17,r3
  806588:	8904983a 	sll	r2,r17,r4
  80658c:	01000434 	movhi	r4,16
  806590:	213fffc4 	addi	r4,r4,-1
  806594:	2941ffcc 	andi	r5,r5,2047
  806598:	1906703a 	and	r3,r3,r4
  80659c:	800d883a 	mov	r6,r16
  8065a0:	003fe906 	br	806548 <__alt_mem_onchip_mem+0xff7fe548>
  8065a4:	000d883a 	mov	r6,zero
  8065a8:	000b883a 	mov	r5,zero
  8065ac:	0007883a 	mov	r3,zero
  8065b0:	0005883a 	mov	r2,zero
  8065b4:	003fe406 	br	806548 <__alt_mem_onchip_mem+0xff7fe548>
  8065b8:	0123c83a 	sub	r17,zero,r4
  8065bc:	003fd106 	br	806504 <__alt_mem_onchip_mem+0xff7fe504>

008065c0 <__clzsi2>:
  8065c0:	00bfffd4 	movui	r2,65535
  8065c4:	11000536 	bltu	r2,r4,8065dc <__clzsi2+0x1c>
  8065c8:	00803fc4 	movi	r2,255
  8065cc:	11000f36 	bltu	r2,r4,80660c <__clzsi2+0x4c>
  8065d0:	00800804 	movi	r2,32
  8065d4:	0007883a 	mov	r3,zero
  8065d8:	00000506 	br	8065f0 <__clzsi2+0x30>
  8065dc:	00804034 	movhi	r2,256
  8065e0:	10bfffc4 	addi	r2,r2,-1
  8065e4:	11000c2e 	bgeu	r2,r4,806618 <__clzsi2+0x58>
  8065e8:	00800204 	movi	r2,8
  8065ec:	00c00604 	movi	r3,24
  8065f0:	20c8d83a 	srl	r4,r4,r3
  8065f4:	00c02074 	movhi	r3,129
  8065f8:	18f546c4 	addi	r3,r3,-10981
  8065fc:	1909883a 	add	r4,r3,r4
  806600:	20c00003 	ldbu	r3,0(r4)
  806604:	10c5c83a 	sub	r2,r2,r3
  806608:	f800283a 	ret
  80660c:	00800604 	movi	r2,24
  806610:	00c00204 	movi	r3,8
  806614:	003ff606 	br	8065f0 <__alt_mem_onchip_mem+0xff7fe5f0>
  806618:	00800404 	movi	r2,16
  80661c:	1007883a 	mov	r3,r2
  806620:	003ff306 	br	8065f0 <__alt_mem_onchip_mem+0xff7fe5f0>

00806624 <_puts_r>:
  806624:	defff604 	addi	sp,sp,-40
  806628:	dc000715 	stw	r16,28(sp)
  80662c:	2021883a 	mov	r16,r4
  806630:	2809883a 	mov	r4,r5
  806634:	dc400815 	stw	r17,32(sp)
  806638:	dfc00915 	stw	ra,36(sp)
  80663c:	2823883a 	mov	r17,r5
  806640:	08066f80 	call	8066f8 <strlen>
  806644:	10c00044 	addi	r3,r2,1
  806648:	d8800115 	stw	r2,4(sp)
  80664c:	00802074 	movhi	r2,129
  806650:	10b58704 	addi	r2,r2,-10724
  806654:	d8800215 	stw	r2,8(sp)
  806658:	00800044 	movi	r2,1
  80665c:	d8800315 	stw	r2,12(sp)
  806660:	00800084 	movi	r2,2
  806664:	dc400015 	stw	r17,0(sp)
  806668:	d8c00615 	stw	r3,24(sp)
  80666c:	dec00415 	stw	sp,16(sp)
  806670:	d8800515 	stw	r2,20(sp)
  806674:	80000226 	beq	r16,zero,806680 <_puts_r+0x5c>
  806678:	80800e17 	ldw	r2,56(r16)
  80667c:	10001426 	beq	r2,zero,8066d0 <_puts_r+0xac>
  806680:	81400217 	ldw	r5,8(r16)
  806684:	2880030b 	ldhu	r2,12(r5)
  806688:	10c8000c 	andi	r3,r2,8192
  80668c:	1800061e 	bne	r3,zero,8066a8 <_puts_r+0x84>
  806690:	29001917 	ldw	r4,100(r5)
  806694:	00f7ffc4 	movi	r3,-8193
  806698:	10880014 	ori	r2,r2,8192
  80669c:	20c6703a 	and	r3,r4,r3
  8066a0:	2880030d 	sth	r2,12(r5)
  8066a4:	28c01915 	stw	r3,100(r5)
  8066a8:	d9800404 	addi	r6,sp,16
  8066ac:	8009883a 	mov	r4,r16
  8066b0:	0806b300 	call	806b30 <__sfvwrite_r>
  8066b4:	1000091e 	bne	r2,zero,8066dc <_puts_r+0xb8>
  8066b8:	00800284 	movi	r2,10
  8066bc:	dfc00917 	ldw	ra,36(sp)
  8066c0:	dc400817 	ldw	r17,32(sp)
  8066c4:	dc000717 	ldw	r16,28(sp)
  8066c8:	dec00a04 	addi	sp,sp,40
  8066cc:	f800283a 	ret
  8066d0:	8009883a 	mov	r4,r16
  8066d4:	0806ae00 	call	806ae0 <__sinit>
  8066d8:	003fe906 	br	806680 <__alt_mem_onchip_mem+0xff7fe680>
  8066dc:	00bfffc4 	movi	r2,-1
  8066e0:	003ff606 	br	8066bc <__alt_mem_onchip_mem+0xff7fe6bc>

008066e4 <puts>:
  8066e4:	00802074 	movhi	r2,129
  8066e8:	10bd4104 	addi	r2,r2,-2812
  8066ec:	200b883a 	mov	r5,r4
  8066f0:	11000017 	ldw	r4,0(r2)
  8066f4:	08066241 	jmpi	806624 <_puts_r>

008066f8 <strlen>:
  8066f8:	208000cc 	andi	r2,r4,3
  8066fc:	10002026 	beq	r2,zero,806780 <strlen+0x88>
  806700:	20800007 	ldb	r2,0(r4)
  806704:	10002026 	beq	r2,zero,806788 <strlen+0x90>
  806708:	2005883a 	mov	r2,r4
  80670c:	00000206 	br	806718 <strlen+0x20>
  806710:	10c00007 	ldb	r3,0(r2)
  806714:	18001826 	beq	r3,zero,806778 <strlen+0x80>
  806718:	10800044 	addi	r2,r2,1
  80671c:	10c000cc 	andi	r3,r2,3
  806720:	183ffb1e 	bne	r3,zero,806710 <__alt_mem_onchip_mem+0xff7fe710>
  806724:	10c00017 	ldw	r3,0(r2)
  806728:	01ffbff4 	movhi	r7,65279
  80672c:	39ffbfc4 	addi	r7,r7,-257
  806730:	00ca303a 	nor	r5,zero,r3
  806734:	01a02074 	movhi	r6,32897
  806738:	19c7883a 	add	r3,r3,r7
  80673c:	31a02004 	addi	r6,r6,-32640
  806740:	1946703a 	and	r3,r3,r5
  806744:	1986703a 	and	r3,r3,r6
  806748:	1800091e 	bne	r3,zero,806770 <strlen+0x78>
  80674c:	10800104 	addi	r2,r2,4
  806750:	10c00017 	ldw	r3,0(r2)
  806754:	19cb883a 	add	r5,r3,r7
  806758:	00c6303a 	nor	r3,zero,r3
  80675c:	28c6703a 	and	r3,r5,r3
  806760:	1986703a 	and	r3,r3,r6
  806764:	183ff926 	beq	r3,zero,80674c <__alt_mem_onchip_mem+0xff7fe74c>
  806768:	00000106 	br	806770 <strlen+0x78>
  80676c:	10800044 	addi	r2,r2,1
  806770:	10c00007 	ldb	r3,0(r2)
  806774:	183ffd1e 	bne	r3,zero,80676c <__alt_mem_onchip_mem+0xff7fe76c>
  806778:	1105c83a 	sub	r2,r2,r4
  80677c:	f800283a 	ret
  806780:	2005883a 	mov	r2,r4
  806784:	003fe706 	br	806724 <__alt_mem_onchip_mem+0xff7fe724>
  806788:	0005883a 	mov	r2,zero
  80678c:	f800283a 	ret

00806790 <__fp_unlock>:
  806790:	0005883a 	mov	r2,zero
  806794:	f800283a 	ret

00806798 <_cleanup_r>:
  806798:	01402074 	movhi	r5,129
  80679c:	2961cb04 	addi	r5,r5,-30932
  8067a0:	08070b01 	jmpi	8070b0 <_fwalk_reent>

008067a4 <__sinit.part.1>:
  8067a4:	defff704 	addi	sp,sp,-36
  8067a8:	00c02034 	movhi	r3,128
  8067ac:	dfc00815 	stw	ra,32(sp)
  8067b0:	ddc00715 	stw	r23,28(sp)
  8067b4:	dd800615 	stw	r22,24(sp)
  8067b8:	dd400515 	stw	r21,20(sp)
  8067bc:	dd000415 	stw	r20,16(sp)
  8067c0:	dcc00315 	stw	r19,12(sp)
  8067c4:	dc800215 	stw	r18,8(sp)
  8067c8:	dc400115 	stw	r17,4(sp)
  8067cc:	dc000015 	stw	r16,0(sp)
  8067d0:	18d9e604 	addi	r3,r3,26520
  8067d4:	24000117 	ldw	r16,4(r4)
  8067d8:	20c00f15 	stw	r3,60(r4)
  8067dc:	2080bb04 	addi	r2,r4,748
  8067e0:	00c000c4 	movi	r3,3
  8067e4:	20c0b915 	stw	r3,740(r4)
  8067e8:	2080ba15 	stw	r2,744(r4)
  8067ec:	2000b815 	stw	zero,736(r4)
  8067f0:	05c00204 	movi	r23,8
  8067f4:	00800104 	movi	r2,4
  8067f8:	2025883a 	mov	r18,r4
  8067fc:	b80d883a 	mov	r6,r23
  806800:	81001704 	addi	r4,r16,92
  806804:	000b883a 	mov	r5,zero
  806808:	80000015 	stw	zero,0(r16)
  80680c:	80000115 	stw	zero,4(r16)
  806810:	80000215 	stw	zero,8(r16)
  806814:	8080030d 	sth	r2,12(r16)
  806818:	80001915 	stw	zero,100(r16)
  80681c:	8000038d 	sth	zero,14(r16)
  806820:	80000415 	stw	zero,16(r16)
  806824:	80000515 	stw	zero,20(r16)
  806828:	80000615 	stw	zero,24(r16)
  80682c:	0807d080 	call	807d08 <memset>
  806830:	05802074 	movhi	r22,129
  806834:	94400217 	ldw	r17,8(r18)
  806838:	05402074 	movhi	r21,129
  80683c:	05002074 	movhi	r20,129
  806840:	04c02074 	movhi	r19,129
  806844:	b5a0fa04 	addi	r22,r22,-31768
  806848:	ad611104 	addi	r21,r21,-31676
  80684c:	a5213004 	addi	r20,r20,-31552
  806850:	9ce14704 	addi	r19,r19,-31460
  806854:	85800815 	stw	r22,32(r16)
  806858:	85400915 	stw	r21,36(r16)
  80685c:	85000a15 	stw	r20,40(r16)
  806860:	84c00b15 	stw	r19,44(r16)
  806864:	84000715 	stw	r16,28(r16)
  806868:	00800284 	movi	r2,10
  80686c:	8880030d 	sth	r2,12(r17)
  806870:	00800044 	movi	r2,1
  806874:	b80d883a 	mov	r6,r23
  806878:	89001704 	addi	r4,r17,92
  80687c:	000b883a 	mov	r5,zero
  806880:	88000015 	stw	zero,0(r17)
  806884:	88000115 	stw	zero,4(r17)
  806888:	88000215 	stw	zero,8(r17)
  80688c:	88001915 	stw	zero,100(r17)
  806890:	8880038d 	sth	r2,14(r17)
  806894:	88000415 	stw	zero,16(r17)
  806898:	88000515 	stw	zero,20(r17)
  80689c:	88000615 	stw	zero,24(r17)
  8068a0:	0807d080 	call	807d08 <memset>
  8068a4:	94000317 	ldw	r16,12(r18)
  8068a8:	00800484 	movi	r2,18
  8068ac:	8c400715 	stw	r17,28(r17)
  8068b0:	8d800815 	stw	r22,32(r17)
  8068b4:	8d400915 	stw	r21,36(r17)
  8068b8:	8d000a15 	stw	r20,40(r17)
  8068bc:	8cc00b15 	stw	r19,44(r17)
  8068c0:	8080030d 	sth	r2,12(r16)
  8068c4:	00800084 	movi	r2,2
  8068c8:	80000015 	stw	zero,0(r16)
  8068cc:	80000115 	stw	zero,4(r16)
  8068d0:	80000215 	stw	zero,8(r16)
  8068d4:	80001915 	stw	zero,100(r16)
  8068d8:	8080038d 	sth	r2,14(r16)
  8068dc:	80000415 	stw	zero,16(r16)
  8068e0:	80000515 	stw	zero,20(r16)
  8068e4:	80000615 	stw	zero,24(r16)
  8068e8:	b80d883a 	mov	r6,r23
  8068ec:	000b883a 	mov	r5,zero
  8068f0:	81001704 	addi	r4,r16,92
  8068f4:	0807d080 	call	807d08 <memset>
  8068f8:	00800044 	movi	r2,1
  8068fc:	84000715 	stw	r16,28(r16)
  806900:	85800815 	stw	r22,32(r16)
  806904:	85400915 	stw	r21,36(r16)
  806908:	85000a15 	stw	r20,40(r16)
  80690c:	84c00b15 	stw	r19,44(r16)
  806910:	90800e15 	stw	r2,56(r18)
  806914:	dfc00817 	ldw	ra,32(sp)
  806918:	ddc00717 	ldw	r23,28(sp)
  80691c:	dd800617 	ldw	r22,24(sp)
  806920:	dd400517 	ldw	r21,20(sp)
  806924:	dd000417 	ldw	r20,16(sp)
  806928:	dcc00317 	ldw	r19,12(sp)
  80692c:	dc800217 	ldw	r18,8(sp)
  806930:	dc400117 	ldw	r17,4(sp)
  806934:	dc000017 	ldw	r16,0(sp)
  806938:	dec00904 	addi	sp,sp,36
  80693c:	f800283a 	ret

00806940 <__fp_lock>:
  806940:	0005883a 	mov	r2,zero
  806944:	f800283a 	ret

00806948 <__sfmoreglue>:
  806948:	defffc04 	addi	sp,sp,-16
  80694c:	dc400115 	stw	r17,4(sp)
  806950:	2c7fffc4 	addi	r17,r5,-1
  806954:	8c401a24 	muli	r17,r17,104
  806958:	dc800215 	stw	r18,8(sp)
  80695c:	2825883a 	mov	r18,r5
  806960:	89401d04 	addi	r5,r17,116
  806964:	dc000015 	stw	r16,0(sp)
  806968:	dfc00315 	stw	ra,12(sp)
  80696c:	08071740 	call	807174 <_malloc_r>
  806970:	1021883a 	mov	r16,r2
  806974:	10000726 	beq	r2,zero,806994 <__sfmoreglue+0x4c>
  806978:	11000304 	addi	r4,r2,12
  80697c:	10000015 	stw	zero,0(r2)
  806980:	14800115 	stw	r18,4(r2)
  806984:	11000215 	stw	r4,8(r2)
  806988:	89801a04 	addi	r6,r17,104
  80698c:	000b883a 	mov	r5,zero
  806990:	0807d080 	call	807d08 <memset>
  806994:	8005883a 	mov	r2,r16
  806998:	dfc00317 	ldw	ra,12(sp)
  80699c:	dc800217 	ldw	r18,8(sp)
  8069a0:	dc400117 	ldw	r17,4(sp)
  8069a4:	dc000017 	ldw	r16,0(sp)
  8069a8:	dec00404 	addi	sp,sp,16
  8069ac:	f800283a 	ret

008069b0 <__sfp>:
  8069b0:	defffb04 	addi	sp,sp,-20
  8069b4:	dc000015 	stw	r16,0(sp)
  8069b8:	04002074 	movhi	r16,129
  8069bc:	843d4004 	addi	r16,r16,-2816
  8069c0:	dcc00315 	stw	r19,12(sp)
  8069c4:	2027883a 	mov	r19,r4
  8069c8:	81000017 	ldw	r4,0(r16)
  8069cc:	dfc00415 	stw	ra,16(sp)
  8069d0:	dc800215 	stw	r18,8(sp)
  8069d4:	20800e17 	ldw	r2,56(r4)
  8069d8:	dc400115 	stw	r17,4(sp)
  8069dc:	1000021e 	bne	r2,zero,8069e8 <__sfp+0x38>
  8069e0:	08067a40 	call	8067a4 <__sinit.part.1>
  8069e4:	81000017 	ldw	r4,0(r16)
  8069e8:	2480b804 	addi	r18,r4,736
  8069ec:	047fffc4 	movi	r17,-1
  8069f0:	91000117 	ldw	r4,4(r18)
  8069f4:	94000217 	ldw	r16,8(r18)
  8069f8:	213fffc4 	addi	r4,r4,-1
  8069fc:	20000a16 	blt	r4,zero,806a28 <__sfp+0x78>
  806a00:	8080030f 	ldh	r2,12(r16)
  806a04:	10000c26 	beq	r2,zero,806a38 <__sfp+0x88>
  806a08:	80c01d04 	addi	r3,r16,116
  806a0c:	00000206 	br	806a18 <__sfp+0x68>
  806a10:	18bfe60f 	ldh	r2,-104(r3)
  806a14:	10000826 	beq	r2,zero,806a38 <__sfp+0x88>
  806a18:	213fffc4 	addi	r4,r4,-1
  806a1c:	1c3ffd04 	addi	r16,r3,-12
  806a20:	18c01a04 	addi	r3,r3,104
  806a24:	247ffa1e 	bne	r4,r17,806a10 <__alt_mem_onchip_mem+0xff7fea10>
  806a28:	90800017 	ldw	r2,0(r18)
  806a2c:	10001d26 	beq	r2,zero,806aa4 <__sfp+0xf4>
  806a30:	1025883a 	mov	r18,r2
  806a34:	003fee06 	br	8069f0 <__alt_mem_onchip_mem+0xff7fe9f0>
  806a38:	00bfffc4 	movi	r2,-1
  806a3c:	8080038d 	sth	r2,14(r16)
  806a40:	00800044 	movi	r2,1
  806a44:	8080030d 	sth	r2,12(r16)
  806a48:	80001915 	stw	zero,100(r16)
  806a4c:	80000015 	stw	zero,0(r16)
  806a50:	80000215 	stw	zero,8(r16)
  806a54:	80000115 	stw	zero,4(r16)
  806a58:	80000415 	stw	zero,16(r16)
  806a5c:	80000515 	stw	zero,20(r16)
  806a60:	80000615 	stw	zero,24(r16)
  806a64:	01800204 	movi	r6,8
  806a68:	000b883a 	mov	r5,zero
  806a6c:	81001704 	addi	r4,r16,92
  806a70:	0807d080 	call	807d08 <memset>
  806a74:	8005883a 	mov	r2,r16
  806a78:	80000c15 	stw	zero,48(r16)
  806a7c:	80000d15 	stw	zero,52(r16)
  806a80:	80001115 	stw	zero,68(r16)
  806a84:	80001215 	stw	zero,72(r16)
  806a88:	dfc00417 	ldw	ra,16(sp)
  806a8c:	dcc00317 	ldw	r19,12(sp)
  806a90:	dc800217 	ldw	r18,8(sp)
  806a94:	dc400117 	ldw	r17,4(sp)
  806a98:	dc000017 	ldw	r16,0(sp)
  806a9c:	dec00504 	addi	sp,sp,20
  806aa0:	f800283a 	ret
  806aa4:	01400104 	movi	r5,4
  806aa8:	9809883a 	mov	r4,r19
  806aac:	08069480 	call	806948 <__sfmoreglue>
  806ab0:	90800015 	stw	r2,0(r18)
  806ab4:	103fde1e 	bne	r2,zero,806a30 <__alt_mem_onchip_mem+0xff7fea30>
  806ab8:	00800304 	movi	r2,12
  806abc:	98800015 	stw	r2,0(r19)
  806ac0:	0005883a 	mov	r2,zero
  806ac4:	003ff006 	br	806a88 <__alt_mem_onchip_mem+0xff7fea88>

00806ac8 <_cleanup>:
  806ac8:	00802074 	movhi	r2,129
  806acc:	10bd4004 	addi	r2,r2,-2816
  806ad0:	11000017 	ldw	r4,0(r2)
  806ad4:	01402074 	movhi	r5,129
  806ad8:	2961cb04 	addi	r5,r5,-30932
  806adc:	08070b01 	jmpi	8070b0 <_fwalk_reent>

00806ae0 <__sinit>:
  806ae0:	20800e17 	ldw	r2,56(r4)
  806ae4:	10000126 	beq	r2,zero,806aec <__sinit+0xc>
  806ae8:	f800283a 	ret
  806aec:	08067a41 	jmpi	8067a4 <__sinit.part.1>

00806af0 <__sfp_lock_acquire>:
  806af0:	f800283a 	ret

00806af4 <__sfp_lock_release>:
  806af4:	f800283a 	ret

00806af8 <__sinit_lock_acquire>:
  806af8:	f800283a 	ret

00806afc <__sinit_lock_release>:
  806afc:	f800283a 	ret

00806b00 <__fp_lock_all>:
  806b00:	00802074 	movhi	r2,129
  806b04:	10bd4104 	addi	r2,r2,-2812
  806b08:	11000017 	ldw	r4,0(r2)
  806b0c:	01402034 	movhi	r5,128
  806b10:	295a5004 	addi	r5,r5,26944
  806b14:	0806fec1 	jmpi	806fec <_fwalk>

00806b18 <__fp_unlock_all>:
  806b18:	00802074 	movhi	r2,129
  806b1c:	10bd4104 	addi	r2,r2,-2812
  806b20:	11000017 	ldw	r4,0(r2)
  806b24:	01402034 	movhi	r5,128
  806b28:	2959e404 	addi	r5,r5,26512
  806b2c:	0806fec1 	jmpi	806fec <_fwalk>

00806b30 <__sfvwrite_r>:
  806b30:	30800217 	ldw	r2,8(r6)
  806b34:	10006726 	beq	r2,zero,806cd4 <__sfvwrite_r+0x1a4>
  806b38:	28c0030b 	ldhu	r3,12(r5)
  806b3c:	defff404 	addi	sp,sp,-48
  806b40:	dd400715 	stw	r21,28(sp)
  806b44:	dd000615 	stw	r20,24(sp)
  806b48:	dc000215 	stw	r16,8(sp)
  806b4c:	dfc00b15 	stw	ra,44(sp)
  806b50:	df000a15 	stw	fp,40(sp)
  806b54:	ddc00915 	stw	r23,36(sp)
  806b58:	dd800815 	stw	r22,32(sp)
  806b5c:	dcc00515 	stw	r19,20(sp)
  806b60:	dc800415 	stw	r18,16(sp)
  806b64:	dc400315 	stw	r17,12(sp)
  806b68:	1880020c 	andi	r2,r3,8
  806b6c:	2821883a 	mov	r16,r5
  806b70:	202b883a 	mov	r21,r4
  806b74:	3029883a 	mov	r20,r6
  806b78:	10002726 	beq	r2,zero,806c18 <__sfvwrite_r+0xe8>
  806b7c:	28800417 	ldw	r2,16(r5)
  806b80:	10002526 	beq	r2,zero,806c18 <__sfvwrite_r+0xe8>
  806b84:	1880008c 	andi	r2,r3,2
  806b88:	a4400017 	ldw	r17,0(r20)
  806b8c:	10002a26 	beq	r2,zero,806c38 <__sfvwrite_r+0x108>
  806b90:	05a00034 	movhi	r22,32768
  806b94:	0027883a 	mov	r19,zero
  806b98:	0025883a 	mov	r18,zero
  806b9c:	b5bf0004 	addi	r22,r22,-1024
  806ba0:	980d883a 	mov	r6,r19
  806ba4:	a809883a 	mov	r4,r21
  806ba8:	90004626 	beq	r18,zero,806cc4 <__sfvwrite_r+0x194>
  806bac:	900f883a 	mov	r7,r18
  806bb0:	b480022e 	bgeu	r22,r18,806bbc <__sfvwrite_r+0x8c>
  806bb4:	01e00034 	movhi	r7,32768
  806bb8:	39ff0004 	addi	r7,r7,-1024
  806bbc:	80800917 	ldw	r2,36(r16)
  806bc0:	81400717 	ldw	r5,28(r16)
  806bc4:	103ee83a 	callr	r2
  806bc8:	0080570e 	bge	zero,r2,806d28 <__sfvwrite_r+0x1f8>
  806bcc:	a0c00217 	ldw	r3,8(r20)
  806bd0:	98a7883a 	add	r19,r19,r2
  806bd4:	90a5c83a 	sub	r18,r18,r2
  806bd8:	1885c83a 	sub	r2,r3,r2
  806bdc:	a0800215 	stw	r2,8(r20)
  806be0:	103fef1e 	bne	r2,zero,806ba0 <__alt_mem_onchip_mem+0xff7feba0>
  806be4:	0005883a 	mov	r2,zero
  806be8:	dfc00b17 	ldw	ra,44(sp)
  806bec:	df000a17 	ldw	fp,40(sp)
  806bf0:	ddc00917 	ldw	r23,36(sp)
  806bf4:	dd800817 	ldw	r22,32(sp)
  806bf8:	dd400717 	ldw	r21,28(sp)
  806bfc:	dd000617 	ldw	r20,24(sp)
  806c00:	dcc00517 	ldw	r19,20(sp)
  806c04:	dc800417 	ldw	r18,16(sp)
  806c08:	dc400317 	ldw	r17,12(sp)
  806c0c:	dc000217 	ldw	r16,8(sp)
  806c10:	dec00c04 	addi	sp,sp,48
  806c14:	f800283a 	ret
  806c18:	800b883a 	mov	r5,r16
  806c1c:	a809883a 	mov	r4,r21
  806c20:	08085840 	call	808584 <__swsetup_r>
  806c24:	1000eb1e 	bne	r2,zero,806fd4 <__sfvwrite_r+0x4a4>
  806c28:	80c0030b 	ldhu	r3,12(r16)
  806c2c:	a4400017 	ldw	r17,0(r20)
  806c30:	1880008c 	andi	r2,r3,2
  806c34:	103fd61e 	bne	r2,zero,806b90 <__alt_mem_onchip_mem+0xff7feb90>
  806c38:	1880004c 	andi	r2,r3,1
  806c3c:	10003f1e 	bne	r2,zero,806d3c <__sfvwrite_r+0x20c>
  806c40:	0039883a 	mov	fp,zero
  806c44:	0025883a 	mov	r18,zero
  806c48:	90001a26 	beq	r18,zero,806cb4 <__sfvwrite_r+0x184>
  806c4c:	1880800c 	andi	r2,r3,512
  806c50:	84c00217 	ldw	r19,8(r16)
  806c54:	10002126 	beq	r2,zero,806cdc <__sfvwrite_r+0x1ac>
  806c58:	982f883a 	mov	r23,r19
  806c5c:	94c09336 	bltu	r18,r19,806eac <__sfvwrite_r+0x37c>
  806c60:	1881200c 	andi	r2,r3,1152
  806c64:	10009e1e 	bne	r2,zero,806ee0 <__sfvwrite_r+0x3b0>
  806c68:	81000017 	ldw	r4,0(r16)
  806c6c:	b80d883a 	mov	r6,r23
  806c70:	e00b883a 	mov	r5,fp
  806c74:	0807bac0 	call	807bac <memmove>
  806c78:	80c00217 	ldw	r3,8(r16)
  806c7c:	81000017 	ldw	r4,0(r16)
  806c80:	9005883a 	mov	r2,r18
  806c84:	1ce7c83a 	sub	r19,r3,r19
  806c88:	25cf883a 	add	r7,r4,r23
  806c8c:	84c00215 	stw	r19,8(r16)
  806c90:	81c00015 	stw	r7,0(r16)
  806c94:	a0c00217 	ldw	r3,8(r20)
  806c98:	e0b9883a 	add	fp,fp,r2
  806c9c:	90a5c83a 	sub	r18,r18,r2
  806ca0:	18a7c83a 	sub	r19,r3,r2
  806ca4:	a4c00215 	stw	r19,8(r20)
  806ca8:	983fce26 	beq	r19,zero,806be4 <__alt_mem_onchip_mem+0xff7febe4>
  806cac:	80c0030b 	ldhu	r3,12(r16)
  806cb0:	903fe61e 	bne	r18,zero,806c4c <__alt_mem_onchip_mem+0xff7fec4c>
  806cb4:	8f000017 	ldw	fp,0(r17)
  806cb8:	8c800117 	ldw	r18,4(r17)
  806cbc:	8c400204 	addi	r17,r17,8
  806cc0:	003fe106 	br	806c48 <__alt_mem_onchip_mem+0xff7fec48>
  806cc4:	8cc00017 	ldw	r19,0(r17)
  806cc8:	8c800117 	ldw	r18,4(r17)
  806ccc:	8c400204 	addi	r17,r17,8
  806cd0:	003fb306 	br	806ba0 <__alt_mem_onchip_mem+0xff7feba0>
  806cd4:	0005883a 	mov	r2,zero
  806cd8:	f800283a 	ret
  806cdc:	81000017 	ldw	r4,0(r16)
  806ce0:	80800417 	ldw	r2,16(r16)
  806ce4:	11005736 	bltu	r2,r4,806e44 <__sfvwrite_r+0x314>
  806ce8:	85c00517 	ldw	r23,20(r16)
  806cec:	95c05536 	bltu	r18,r23,806e44 <__sfvwrite_r+0x314>
  806cf0:	00a00034 	movhi	r2,32768
  806cf4:	10bfffc4 	addi	r2,r2,-1
  806cf8:	9009883a 	mov	r4,r18
  806cfc:	1480012e 	bgeu	r2,r18,806d04 <__sfvwrite_r+0x1d4>
  806d00:	1009883a 	mov	r4,r2
  806d04:	b80b883a 	mov	r5,r23
  806d08:	08092380 	call	809238 <__divsi3>
  806d0c:	15cf383a 	mul	r7,r2,r23
  806d10:	81400717 	ldw	r5,28(r16)
  806d14:	80800917 	ldw	r2,36(r16)
  806d18:	e00d883a 	mov	r6,fp
  806d1c:	a809883a 	mov	r4,r21
  806d20:	103ee83a 	callr	r2
  806d24:	00bfdb16 	blt	zero,r2,806c94 <__alt_mem_onchip_mem+0xff7fec94>
  806d28:	8080030b 	ldhu	r2,12(r16)
  806d2c:	10801014 	ori	r2,r2,64
  806d30:	8080030d 	sth	r2,12(r16)
  806d34:	00bfffc4 	movi	r2,-1
  806d38:	003fab06 	br	806be8 <__alt_mem_onchip_mem+0xff7febe8>
  806d3c:	0027883a 	mov	r19,zero
  806d40:	0011883a 	mov	r8,zero
  806d44:	0039883a 	mov	fp,zero
  806d48:	0025883a 	mov	r18,zero
  806d4c:	90001f26 	beq	r18,zero,806dcc <__sfvwrite_r+0x29c>
  806d50:	40005a26 	beq	r8,zero,806ebc <__sfvwrite_r+0x38c>
  806d54:	982d883a 	mov	r22,r19
  806d58:	94c0012e 	bgeu	r18,r19,806d60 <__sfvwrite_r+0x230>
  806d5c:	902d883a 	mov	r22,r18
  806d60:	81000017 	ldw	r4,0(r16)
  806d64:	80800417 	ldw	r2,16(r16)
  806d68:	b02f883a 	mov	r23,r22
  806d6c:	81c00517 	ldw	r7,20(r16)
  806d70:	1100032e 	bgeu	r2,r4,806d80 <__sfvwrite_r+0x250>
  806d74:	80c00217 	ldw	r3,8(r16)
  806d78:	38c7883a 	add	r3,r7,r3
  806d7c:	1d801816 	blt	r3,r22,806de0 <__sfvwrite_r+0x2b0>
  806d80:	b1c03e16 	blt	r22,r7,806e7c <__sfvwrite_r+0x34c>
  806d84:	80800917 	ldw	r2,36(r16)
  806d88:	81400717 	ldw	r5,28(r16)
  806d8c:	e00d883a 	mov	r6,fp
  806d90:	da000115 	stw	r8,4(sp)
  806d94:	a809883a 	mov	r4,r21
  806d98:	103ee83a 	callr	r2
  806d9c:	102f883a 	mov	r23,r2
  806da0:	da000117 	ldw	r8,4(sp)
  806da4:	00bfe00e 	bge	zero,r2,806d28 <__alt_mem_onchip_mem+0xff7fed28>
  806da8:	9de7c83a 	sub	r19,r19,r23
  806dac:	98001f26 	beq	r19,zero,806e2c <__sfvwrite_r+0x2fc>
  806db0:	a0800217 	ldw	r2,8(r20)
  806db4:	e5f9883a 	add	fp,fp,r23
  806db8:	95e5c83a 	sub	r18,r18,r23
  806dbc:	15efc83a 	sub	r23,r2,r23
  806dc0:	a5c00215 	stw	r23,8(r20)
  806dc4:	b83f8726 	beq	r23,zero,806be4 <__alt_mem_onchip_mem+0xff7febe4>
  806dc8:	903fe11e 	bne	r18,zero,806d50 <__alt_mem_onchip_mem+0xff7fed50>
  806dcc:	8f000017 	ldw	fp,0(r17)
  806dd0:	8c800117 	ldw	r18,4(r17)
  806dd4:	0011883a 	mov	r8,zero
  806dd8:	8c400204 	addi	r17,r17,8
  806ddc:	003fdb06 	br	806d4c <__alt_mem_onchip_mem+0xff7fed4c>
  806de0:	180d883a 	mov	r6,r3
  806de4:	e00b883a 	mov	r5,fp
  806de8:	da000115 	stw	r8,4(sp)
  806dec:	d8c00015 	stw	r3,0(sp)
  806df0:	0807bac0 	call	807bac <memmove>
  806df4:	d8c00017 	ldw	r3,0(sp)
  806df8:	80800017 	ldw	r2,0(r16)
  806dfc:	800b883a 	mov	r5,r16
  806e00:	a809883a 	mov	r4,r21
  806e04:	10c5883a 	add	r2,r2,r3
  806e08:	80800015 	stw	r2,0(r16)
  806e0c:	d8c00015 	stw	r3,0(sp)
  806e10:	0808a4c0 	call	808a4c <_fflush_r>
  806e14:	d8c00017 	ldw	r3,0(sp)
  806e18:	da000117 	ldw	r8,4(sp)
  806e1c:	103fc21e 	bne	r2,zero,806d28 <__alt_mem_onchip_mem+0xff7fed28>
  806e20:	182f883a 	mov	r23,r3
  806e24:	9de7c83a 	sub	r19,r19,r23
  806e28:	983fe11e 	bne	r19,zero,806db0 <__alt_mem_onchip_mem+0xff7fedb0>
  806e2c:	800b883a 	mov	r5,r16
  806e30:	a809883a 	mov	r4,r21
  806e34:	0808a4c0 	call	808a4c <_fflush_r>
  806e38:	103fbb1e 	bne	r2,zero,806d28 <__alt_mem_onchip_mem+0xff7fed28>
  806e3c:	0011883a 	mov	r8,zero
  806e40:	003fdb06 	br	806db0 <__alt_mem_onchip_mem+0xff7fedb0>
  806e44:	94c0012e 	bgeu	r18,r19,806e4c <__sfvwrite_r+0x31c>
  806e48:	9027883a 	mov	r19,r18
  806e4c:	980d883a 	mov	r6,r19
  806e50:	e00b883a 	mov	r5,fp
  806e54:	0807bac0 	call	807bac <memmove>
  806e58:	80800217 	ldw	r2,8(r16)
  806e5c:	80c00017 	ldw	r3,0(r16)
  806e60:	14c5c83a 	sub	r2,r2,r19
  806e64:	1cc7883a 	add	r3,r3,r19
  806e68:	80800215 	stw	r2,8(r16)
  806e6c:	80c00015 	stw	r3,0(r16)
  806e70:	10004326 	beq	r2,zero,806f80 <__sfvwrite_r+0x450>
  806e74:	9805883a 	mov	r2,r19
  806e78:	003f8606 	br	806c94 <__alt_mem_onchip_mem+0xff7fec94>
  806e7c:	b00d883a 	mov	r6,r22
  806e80:	e00b883a 	mov	r5,fp
  806e84:	da000115 	stw	r8,4(sp)
  806e88:	0807bac0 	call	807bac <memmove>
  806e8c:	80800217 	ldw	r2,8(r16)
  806e90:	80c00017 	ldw	r3,0(r16)
  806e94:	da000117 	ldw	r8,4(sp)
  806e98:	1585c83a 	sub	r2,r2,r22
  806e9c:	1dad883a 	add	r22,r3,r22
  806ea0:	80800215 	stw	r2,8(r16)
  806ea4:	85800015 	stw	r22,0(r16)
  806ea8:	003fbf06 	br	806da8 <__alt_mem_onchip_mem+0xff7feda8>
  806eac:	81000017 	ldw	r4,0(r16)
  806eb0:	9027883a 	mov	r19,r18
  806eb4:	902f883a 	mov	r23,r18
  806eb8:	003f6c06 	br	806c6c <__alt_mem_onchip_mem+0xff7fec6c>
  806ebc:	900d883a 	mov	r6,r18
  806ec0:	01400284 	movi	r5,10
  806ec4:	e009883a 	mov	r4,fp
  806ec8:	08079800 	call	807980 <memchr>
  806ecc:	10003e26 	beq	r2,zero,806fc8 <__sfvwrite_r+0x498>
  806ed0:	10800044 	addi	r2,r2,1
  806ed4:	1727c83a 	sub	r19,r2,fp
  806ed8:	02000044 	movi	r8,1
  806edc:	003f9d06 	br	806d54 <__alt_mem_onchip_mem+0xff7fed54>
  806ee0:	80800517 	ldw	r2,20(r16)
  806ee4:	81400417 	ldw	r5,16(r16)
  806ee8:	81c00017 	ldw	r7,0(r16)
  806eec:	10a7883a 	add	r19,r2,r2
  806ef0:	9885883a 	add	r2,r19,r2
  806ef4:	1026d7fa 	srli	r19,r2,31
  806ef8:	396dc83a 	sub	r22,r7,r5
  806efc:	b1000044 	addi	r4,r22,1
  806f00:	9885883a 	add	r2,r19,r2
  806f04:	1027d07a 	srai	r19,r2,1
  806f08:	2485883a 	add	r2,r4,r18
  806f0c:	980d883a 	mov	r6,r19
  806f10:	9880022e 	bgeu	r19,r2,806f1c <__sfvwrite_r+0x3ec>
  806f14:	1027883a 	mov	r19,r2
  806f18:	100d883a 	mov	r6,r2
  806f1c:	18c1000c 	andi	r3,r3,1024
  806f20:	18001c26 	beq	r3,zero,806f94 <__sfvwrite_r+0x464>
  806f24:	300b883a 	mov	r5,r6
  806f28:	a809883a 	mov	r4,r21
  806f2c:	08071740 	call	807174 <_malloc_r>
  806f30:	102f883a 	mov	r23,r2
  806f34:	10002926 	beq	r2,zero,806fdc <__sfvwrite_r+0x4ac>
  806f38:	81400417 	ldw	r5,16(r16)
  806f3c:	b00d883a 	mov	r6,r22
  806f40:	1009883a 	mov	r4,r2
  806f44:	0807a640 	call	807a64 <memcpy>
  806f48:	8080030b 	ldhu	r2,12(r16)
  806f4c:	00fedfc4 	movi	r3,-1153
  806f50:	10c4703a 	and	r2,r2,r3
  806f54:	10802014 	ori	r2,r2,128
  806f58:	8080030d 	sth	r2,12(r16)
  806f5c:	bd89883a 	add	r4,r23,r22
  806f60:	9d8fc83a 	sub	r7,r19,r22
  806f64:	85c00415 	stw	r23,16(r16)
  806f68:	84c00515 	stw	r19,20(r16)
  806f6c:	81000015 	stw	r4,0(r16)
  806f70:	9027883a 	mov	r19,r18
  806f74:	81c00215 	stw	r7,8(r16)
  806f78:	902f883a 	mov	r23,r18
  806f7c:	003f3b06 	br	806c6c <__alt_mem_onchip_mem+0xff7fec6c>
  806f80:	800b883a 	mov	r5,r16
  806f84:	a809883a 	mov	r4,r21
  806f88:	0808a4c0 	call	808a4c <_fflush_r>
  806f8c:	103fb926 	beq	r2,zero,806e74 <__alt_mem_onchip_mem+0xff7fee74>
  806f90:	003f6506 	br	806d28 <__alt_mem_onchip_mem+0xff7fed28>
  806f94:	a809883a 	mov	r4,r21
  806f98:	0807e300 	call	807e30 <_realloc_r>
  806f9c:	102f883a 	mov	r23,r2
  806fa0:	103fee1e 	bne	r2,zero,806f5c <__alt_mem_onchip_mem+0xff7fef5c>
  806fa4:	81400417 	ldw	r5,16(r16)
  806fa8:	a809883a 	mov	r4,r21
  806fac:	0808bfc0 	call	808bfc <_free_r>
  806fb0:	8080030b 	ldhu	r2,12(r16)
  806fb4:	00ffdfc4 	movi	r3,-129
  806fb8:	1884703a 	and	r2,r3,r2
  806fbc:	00c00304 	movi	r3,12
  806fc0:	a8c00015 	stw	r3,0(r21)
  806fc4:	003f5906 	br	806d2c <__alt_mem_onchip_mem+0xff7fed2c>
  806fc8:	94c00044 	addi	r19,r18,1
  806fcc:	02000044 	movi	r8,1
  806fd0:	003f6006 	br	806d54 <__alt_mem_onchip_mem+0xff7fed54>
  806fd4:	00bfffc4 	movi	r2,-1
  806fd8:	003f0306 	br	806be8 <__alt_mem_onchip_mem+0xff7febe8>
  806fdc:	00800304 	movi	r2,12
  806fe0:	a8800015 	stw	r2,0(r21)
  806fe4:	8080030b 	ldhu	r2,12(r16)
  806fe8:	003f5006 	br	806d2c <__alt_mem_onchip_mem+0xff7fed2c>

00806fec <_fwalk>:
  806fec:	defff704 	addi	sp,sp,-36
  806ff0:	dd000415 	stw	r20,16(sp)
  806ff4:	dfc00815 	stw	ra,32(sp)
  806ff8:	ddc00715 	stw	r23,28(sp)
  806ffc:	dd800615 	stw	r22,24(sp)
  807000:	dd400515 	stw	r21,20(sp)
  807004:	dcc00315 	stw	r19,12(sp)
  807008:	dc800215 	stw	r18,8(sp)
  80700c:	dc400115 	stw	r17,4(sp)
  807010:	dc000015 	stw	r16,0(sp)
  807014:	2500b804 	addi	r20,r4,736
  807018:	a0002326 	beq	r20,zero,8070a8 <_fwalk+0xbc>
  80701c:	282b883a 	mov	r21,r5
  807020:	002f883a 	mov	r23,zero
  807024:	05800044 	movi	r22,1
  807028:	04ffffc4 	movi	r19,-1
  80702c:	a4400117 	ldw	r17,4(r20)
  807030:	a4800217 	ldw	r18,8(r20)
  807034:	8c7fffc4 	addi	r17,r17,-1
  807038:	88000d16 	blt	r17,zero,807070 <_fwalk+0x84>
  80703c:	94000304 	addi	r16,r18,12
  807040:	94800384 	addi	r18,r18,14
  807044:	8080000b 	ldhu	r2,0(r16)
  807048:	8c7fffc4 	addi	r17,r17,-1
  80704c:	813ffd04 	addi	r4,r16,-12
  807050:	b080042e 	bgeu	r22,r2,807064 <_fwalk+0x78>
  807054:	9080000f 	ldh	r2,0(r18)
  807058:	14c00226 	beq	r2,r19,807064 <_fwalk+0x78>
  80705c:	a83ee83a 	callr	r21
  807060:	b8aeb03a 	or	r23,r23,r2
  807064:	84001a04 	addi	r16,r16,104
  807068:	94801a04 	addi	r18,r18,104
  80706c:	8cfff51e 	bne	r17,r19,807044 <__alt_mem_onchip_mem+0xff7ff044>
  807070:	a5000017 	ldw	r20,0(r20)
  807074:	a03fed1e 	bne	r20,zero,80702c <__alt_mem_onchip_mem+0xff7ff02c>
  807078:	b805883a 	mov	r2,r23
  80707c:	dfc00817 	ldw	ra,32(sp)
  807080:	ddc00717 	ldw	r23,28(sp)
  807084:	dd800617 	ldw	r22,24(sp)
  807088:	dd400517 	ldw	r21,20(sp)
  80708c:	dd000417 	ldw	r20,16(sp)
  807090:	dcc00317 	ldw	r19,12(sp)
  807094:	dc800217 	ldw	r18,8(sp)
  807098:	dc400117 	ldw	r17,4(sp)
  80709c:	dc000017 	ldw	r16,0(sp)
  8070a0:	dec00904 	addi	sp,sp,36
  8070a4:	f800283a 	ret
  8070a8:	002f883a 	mov	r23,zero
  8070ac:	003ff206 	br	807078 <__alt_mem_onchip_mem+0xff7ff078>

008070b0 <_fwalk_reent>:
  8070b0:	defff704 	addi	sp,sp,-36
  8070b4:	dd000415 	stw	r20,16(sp)
  8070b8:	dfc00815 	stw	ra,32(sp)
  8070bc:	ddc00715 	stw	r23,28(sp)
  8070c0:	dd800615 	stw	r22,24(sp)
  8070c4:	dd400515 	stw	r21,20(sp)
  8070c8:	dcc00315 	stw	r19,12(sp)
  8070cc:	dc800215 	stw	r18,8(sp)
  8070d0:	dc400115 	stw	r17,4(sp)
  8070d4:	dc000015 	stw	r16,0(sp)
  8070d8:	2500b804 	addi	r20,r4,736
  8070dc:	a0002326 	beq	r20,zero,80716c <_fwalk_reent+0xbc>
  8070e0:	282b883a 	mov	r21,r5
  8070e4:	2027883a 	mov	r19,r4
  8070e8:	002f883a 	mov	r23,zero
  8070ec:	05800044 	movi	r22,1
  8070f0:	04bfffc4 	movi	r18,-1
  8070f4:	a4400117 	ldw	r17,4(r20)
  8070f8:	a4000217 	ldw	r16,8(r20)
  8070fc:	8c7fffc4 	addi	r17,r17,-1
  807100:	88000c16 	blt	r17,zero,807134 <_fwalk_reent+0x84>
  807104:	84000304 	addi	r16,r16,12
  807108:	8080000b 	ldhu	r2,0(r16)
  80710c:	8c7fffc4 	addi	r17,r17,-1
  807110:	817ffd04 	addi	r5,r16,-12
  807114:	b080052e 	bgeu	r22,r2,80712c <_fwalk_reent+0x7c>
  807118:	8080008f 	ldh	r2,2(r16)
  80711c:	9809883a 	mov	r4,r19
  807120:	14800226 	beq	r2,r18,80712c <_fwalk_reent+0x7c>
  807124:	a83ee83a 	callr	r21
  807128:	b8aeb03a 	or	r23,r23,r2
  80712c:	84001a04 	addi	r16,r16,104
  807130:	8cbff51e 	bne	r17,r18,807108 <__alt_mem_onchip_mem+0xff7ff108>
  807134:	a5000017 	ldw	r20,0(r20)
  807138:	a03fee1e 	bne	r20,zero,8070f4 <__alt_mem_onchip_mem+0xff7ff0f4>
  80713c:	b805883a 	mov	r2,r23
  807140:	dfc00817 	ldw	ra,32(sp)
  807144:	ddc00717 	ldw	r23,28(sp)
  807148:	dd800617 	ldw	r22,24(sp)
  80714c:	dd400517 	ldw	r21,20(sp)
  807150:	dd000417 	ldw	r20,16(sp)
  807154:	dcc00317 	ldw	r19,12(sp)
  807158:	dc800217 	ldw	r18,8(sp)
  80715c:	dc400117 	ldw	r17,4(sp)
  807160:	dc000017 	ldw	r16,0(sp)
  807164:	dec00904 	addi	sp,sp,36
  807168:	f800283a 	ret
  80716c:	002f883a 	mov	r23,zero
  807170:	003ff206 	br	80713c <__alt_mem_onchip_mem+0xff7ff13c>

00807174 <_malloc_r>:
  807174:	defff504 	addi	sp,sp,-44
  807178:	dc800315 	stw	r18,12(sp)
  80717c:	dfc00a15 	stw	ra,40(sp)
  807180:	df000915 	stw	fp,36(sp)
  807184:	ddc00815 	stw	r23,32(sp)
  807188:	dd800715 	stw	r22,28(sp)
  80718c:	dd400615 	stw	r21,24(sp)
  807190:	dd000515 	stw	r20,20(sp)
  807194:	dcc00415 	stw	r19,16(sp)
  807198:	dc400215 	stw	r17,8(sp)
  80719c:	dc000115 	stw	r16,4(sp)
  8071a0:	288002c4 	addi	r2,r5,11
  8071a4:	00c00584 	movi	r3,22
  8071a8:	2025883a 	mov	r18,r4
  8071ac:	18807f2e 	bgeu	r3,r2,8073ac <_malloc_r+0x238>
  8071b0:	047ffe04 	movi	r17,-8
  8071b4:	1462703a 	and	r17,r2,r17
  8071b8:	8800a316 	blt	r17,zero,807448 <_malloc_r+0x2d4>
  8071bc:	8940a236 	bltu	r17,r5,807448 <_malloc_r+0x2d4>
  8071c0:	0809a940 	call	809a94 <__malloc_lock>
  8071c4:	00807dc4 	movi	r2,503
  8071c8:	1441e92e 	bgeu	r2,r17,807970 <_malloc_r+0x7fc>
  8071cc:	8804d27a 	srli	r2,r17,9
  8071d0:	1000a126 	beq	r2,zero,807458 <_malloc_r+0x2e4>
  8071d4:	00c00104 	movi	r3,4
  8071d8:	18811e36 	bltu	r3,r2,807654 <_malloc_r+0x4e0>
  8071dc:	8804d1ba 	srli	r2,r17,6
  8071e0:	12000e44 	addi	r8,r2,57
  8071e4:	11c00e04 	addi	r7,r2,56
  8071e8:	4209883a 	add	r4,r8,r8
  8071ec:	04c02074 	movhi	r19,129
  8071f0:	2109883a 	add	r4,r4,r4
  8071f4:	9cf74304 	addi	r19,r19,-8948
  8071f8:	2109883a 	add	r4,r4,r4
  8071fc:	9909883a 	add	r4,r19,r4
  807200:	24000117 	ldw	r16,4(r4)
  807204:	213ffe04 	addi	r4,r4,-8
  807208:	24009726 	beq	r4,r16,807468 <_malloc_r+0x2f4>
  80720c:	80800117 	ldw	r2,4(r16)
  807210:	01bfff04 	movi	r6,-4
  807214:	014003c4 	movi	r5,15
  807218:	1184703a 	and	r2,r2,r6
  80721c:	1447c83a 	sub	r3,r2,r17
  807220:	28c00716 	blt	r5,r3,807240 <_malloc_r+0xcc>
  807224:	1800920e 	bge	r3,zero,807470 <_malloc_r+0x2fc>
  807228:	84000317 	ldw	r16,12(r16)
  80722c:	24008e26 	beq	r4,r16,807468 <_malloc_r+0x2f4>
  807230:	80800117 	ldw	r2,4(r16)
  807234:	1184703a 	and	r2,r2,r6
  807238:	1447c83a 	sub	r3,r2,r17
  80723c:	28fff90e 	bge	r5,r3,807224 <__alt_mem_onchip_mem+0xff7ff224>
  807240:	3809883a 	mov	r4,r7
  807244:	01802074 	movhi	r6,129
  807248:	9c000417 	ldw	r16,16(r19)
  80724c:	31b74304 	addi	r6,r6,-8948
  807250:	32000204 	addi	r8,r6,8
  807254:	82013426 	beq	r16,r8,807728 <_malloc_r+0x5b4>
  807258:	80c00117 	ldw	r3,4(r16)
  80725c:	00bfff04 	movi	r2,-4
  807260:	188e703a 	and	r7,r3,r2
  807264:	3c45c83a 	sub	r2,r7,r17
  807268:	00c003c4 	movi	r3,15
  80726c:	18811f16 	blt	r3,r2,8076ec <_malloc_r+0x578>
  807270:	32000515 	stw	r8,20(r6)
  807274:	32000415 	stw	r8,16(r6)
  807278:	10007f0e 	bge	r2,zero,807478 <_malloc_r+0x304>
  80727c:	00807fc4 	movi	r2,511
  807280:	11c0fd36 	bltu	r2,r7,807678 <_malloc_r+0x504>
  807284:	3806d0fa 	srli	r3,r7,3
  807288:	01c00044 	movi	r7,1
  80728c:	30800117 	ldw	r2,4(r6)
  807290:	19400044 	addi	r5,r3,1
  807294:	294b883a 	add	r5,r5,r5
  807298:	1807d0ba 	srai	r3,r3,2
  80729c:	294b883a 	add	r5,r5,r5
  8072a0:	294b883a 	add	r5,r5,r5
  8072a4:	298b883a 	add	r5,r5,r6
  8072a8:	38c6983a 	sll	r3,r7,r3
  8072ac:	29c00017 	ldw	r7,0(r5)
  8072b0:	2a7ffe04 	addi	r9,r5,-8
  8072b4:	1886b03a 	or	r3,r3,r2
  8072b8:	82400315 	stw	r9,12(r16)
  8072bc:	81c00215 	stw	r7,8(r16)
  8072c0:	30c00115 	stw	r3,4(r6)
  8072c4:	2c000015 	stw	r16,0(r5)
  8072c8:	3c000315 	stw	r16,12(r7)
  8072cc:	2005d0ba 	srai	r2,r4,2
  8072d0:	01400044 	movi	r5,1
  8072d4:	288a983a 	sll	r5,r5,r2
  8072d8:	19406f36 	bltu	r3,r5,807498 <_malloc_r+0x324>
  8072dc:	28c4703a 	and	r2,r5,r3
  8072e0:	10000a1e 	bne	r2,zero,80730c <_malloc_r+0x198>
  8072e4:	00bfff04 	movi	r2,-4
  8072e8:	294b883a 	add	r5,r5,r5
  8072ec:	2088703a 	and	r4,r4,r2
  8072f0:	28c4703a 	and	r2,r5,r3
  8072f4:	21000104 	addi	r4,r4,4
  8072f8:	1000041e 	bne	r2,zero,80730c <_malloc_r+0x198>
  8072fc:	294b883a 	add	r5,r5,r5
  807300:	28c4703a 	and	r2,r5,r3
  807304:	21000104 	addi	r4,r4,4
  807308:	103ffc26 	beq	r2,zero,8072fc <__alt_mem_onchip_mem+0xff7ff2fc>
  80730c:	02bfff04 	movi	r10,-4
  807310:	024003c4 	movi	r9,15
  807314:	21800044 	addi	r6,r4,1
  807318:	318d883a 	add	r6,r6,r6
  80731c:	318d883a 	add	r6,r6,r6
  807320:	318d883a 	add	r6,r6,r6
  807324:	998d883a 	add	r6,r19,r6
  807328:	333ffe04 	addi	r12,r6,-8
  80732c:	2017883a 	mov	r11,r4
  807330:	31800104 	addi	r6,r6,4
  807334:	34000017 	ldw	r16,0(r6)
  807338:	31fffd04 	addi	r7,r6,-12
  80733c:	81c0041e 	bne	r16,r7,807350 <_malloc_r+0x1dc>
  807340:	0000fb06 	br	807730 <_malloc_r+0x5bc>
  807344:	1801030e 	bge	r3,zero,807754 <_malloc_r+0x5e0>
  807348:	84000317 	ldw	r16,12(r16)
  80734c:	81c0f826 	beq	r16,r7,807730 <_malloc_r+0x5bc>
  807350:	80800117 	ldw	r2,4(r16)
  807354:	1284703a 	and	r2,r2,r10
  807358:	1447c83a 	sub	r3,r2,r17
  80735c:	48fff90e 	bge	r9,r3,807344 <__alt_mem_onchip_mem+0xff7ff344>
  807360:	80800317 	ldw	r2,12(r16)
  807364:	81000217 	ldw	r4,8(r16)
  807368:	89400054 	ori	r5,r17,1
  80736c:	81400115 	stw	r5,4(r16)
  807370:	20800315 	stw	r2,12(r4)
  807374:	11000215 	stw	r4,8(r2)
  807378:	8463883a 	add	r17,r16,r17
  80737c:	9c400515 	stw	r17,20(r19)
  807380:	9c400415 	stw	r17,16(r19)
  807384:	18800054 	ori	r2,r3,1
  807388:	88800115 	stw	r2,4(r17)
  80738c:	8a000315 	stw	r8,12(r17)
  807390:	8a000215 	stw	r8,8(r17)
  807394:	88e3883a 	add	r17,r17,r3
  807398:	88c00015 	stw	r3,0(r17)
  80739c:	9009883a 	mov	r4,r18
  8073a0:	0809ab80 	call	809ab8 <__malloc_unlock>
  8073a4:	80800204 	addi	r2,r16,8
  8073a8:	00001b06 	br	807418 <_malloc_r+0x2a4>
  8073ac:	04400404 	movi	r17,16
  8073b0:	89402536 	bltu	r17,r5,807448 <_malloc_r+0x2d4>
  8073b4:	0809a940 	call	809a94 <__malloc_lock>
  8073b8:	00800184 	movi	r2,6
  8073bc:	01000084 	movi	r4,2
  8073c0:	04c02074 	movhi	r19,129
  8073c4:	1085883a 	add	r2,r2,r2
  8073c8:	9cf74304 	addi	r19,r19,-8948
  8073cc:	1085883a 	add	r2,r2,r2
  8073d0:	9885883a 	add	r2,r19,r2
  8073d4:	14000117 	ldw	r16,4(r2)
  8073d8:	10fffe04 	addi	r3,r2,-8
  8073dc:	80c0d926 	beq	r16,r3,807744 <_malloc_r+0x5d0>
  8073e0:	80c00117 	ldw	r3,4(r16)
  8073e4:	81000317 	ldw	r4,12(r16)
  8073e8:	00bfff04 	movi	r2,-4
  8073ec:	1884703a 	and	r2,r3,r2
  8073f0:	81400217 	ldw	r5,8(r16)
  8073f4:	8085883a 	add	r2,r16,r2
  8073f8:	10c00117 	ldw	r3,4(r2)
  8073fc:	29000315 	stw	r4,12(r5)
  807400:	21400215 	stw	r5,8(r4)
  807404:	18c00054 	ori	r3,r3,1
  807408:	10c00115 	stw	r3,4(r2)
  80740c:	9009883a 	mov	r4,r18
  807410:	0809ab80 	call	809ab8 <__malloc_unlock>
  807414:	80800204 	addi	r2,r16,8
  807418:	dfc00a17 	ldw	ra,40(sp)
  80741c:	df000917 	ldw	fp,36(sp)
  807420:	ddc00817 	ldw	r23,32(sp)
  807424:	dd800717 	ldw	r22,28(sp)
  807428:	dd400617 	ldw	r21,24(sp)
  80742c:	dd000517 	ldw	r20,20(sp)
  807430:	dcc00417 	ldw	r19,16(sp)
  807434:	dc800317 	ldw	r18,12(sp)
  807438:	dc400217 	ldw	r17,8(sp)
  80743c:	dc000117 	ldw	r16,4(sp)
  807440:	dec00b04 	addi	sp,sp,44
  807444:	f800283a 	ret
  807448:	00800304 	movi	r2,12
  80744c:	90800015 	stw	r2,0(r18)
  807450:	0005883a 	mov	r2,zero
  807454:	003ff006 	br	807418 <__alt_mem_onchip_mem+0xff7ff418>
  807458:	01002004 	movi	r4,128
  80745c:	02001004 	movi	r8,64
  807460:	01c00fc4 	movi	r7,63
  807464:	003f6106 	br	8071ec <__alt_mem_onchip_mem+0xff7ff1ec>
  807468:	4009883a 	mov	r4,r8
  80746c:	003f7506 	br	807244 <__alt_mem_onchip_mem+0xff7ff244>
  807470:	81000317 	ldw	r4,12(r16)
  807474:	003fde06 	br	8073f0 <__alt_mem_onchip_mem+0xff7ff3f0>
  807478:	81c5883a 	add	r2,r16,r7
  80747c:	11400117 	ldw	r5,4(r2)
  807480:	9009883a 	mov	r4,r18
  807484:	29400054 	ori	r5,r5,1
  807488:	11400115 	stw	r5,4(r2)
  80748c:	0809ab80 	call	809ab8 <__malloc_unlock>
  807490:	80800204 	addi	r2,r16,8
  807494:	003fe006 	br	807418 <__alt_mem_onchip_mem+0xff7ff418>
  807498:	9c000217 	ldw	r16,8(r19)
  80749c:	00bfff04 	movi	r2,-4
  8074a0:	85800117 	ldw	r22,4(r16)
  8074a4:	b0ac703a 	and	r22,r22,r2
  8074a8:	b4400336 	bltu	r22,r17,8074b8 <_malloc_r+0x344>
  8074ac:	b445c83a 	sub	r2,r22,r17
  8074b0:	00c003c4 	movi	r3,15
  8074b4:	18805d16 	blt	r3,r2,80762c <_malloc_r+0x4b8>
  8074b8:	05c02074 	movhi	r23,129
  8074bc:	00802074 	movhi	r2,129
  8074c0:	10846904 	addi	r2,r2,4516
  8074c4:	bdfd4204 	addi	r23,r23,-2808
  8074c8:	15400017 	ldw	r21,0(r2)
  8074cc:	b8c00017 	ldw	r3,0(r23)
  8074d0:	00bfffc4 	movi	r2,-1
  8074d4:	858d883a 	add	r6,r16,r22
  8074d8:	8d6b883a 	add	r21,r17,r21
  8074dc:	1880ea26 	beq	r3,r2,807888 <_malloc_r+0x714>
  8074e0:	ad4403c4 	addi	r21,r21,4111
  8074e4:	00bc0004 	movi	r2,-4096
  8074e8:	a8aa703a 	and	r21,r21,r2
  8074ec:	a80b883a 	mov	r5,r21
  8074f0:	9009883a 	mov	r4,r18
  8074f4:	d9800015 	stw	r6,0(sp)
  8074f8:	08083940 	call	808394 <_sbrk_r>
  8074fc:	1029883a 	mov	r20,r2
  807500:	00bfffc4 	movi	r2,-1
  807504:	d9800017 	ldw	r6,0(sp)
  807508:	a080e826 	beq	r20,r2,8078ac <_malloc_r+0x738>
  80750c:	a180a636 	bltu	r20,r6,8077a8 <_malloc_r+0x634>
  807510:	07002074 	movhi	fp,129
  807514:	e7047204 	addi	fp,fp,4552
  807518:	e0800017 	ldw	r2,0(fp)
  80751c:	a887883a 	add	r3,r21,r2
  807520:	e0c00015 	stw	r3,0(fp)
  807524:	3500e626 	beq	r6,r20,8078c0 <_malloc_r+0x74c>
  807528:	b9000017 	ldw	r4,0(r23)
  80752c:	00bfffc4 	movi	r2,-1
  807530:	2080ee26 	beq	r4,r2,8078ec <_malloc_r+0x778>
  807534:	a185c83a 	sub	r2,r20,r6
  807538:	10c5883a 	add	r2,r2,r3
  80753c:	e0800015 	stw	r2,0(fp)
  807540:	a0c001cc 	andi	r3,r20,7
  807544:	1800bc26 	beq	r3,zero,807838 <_malloc_r+0x6c4>
  807548:	a0e9c83a 	sub	r20,r20,r3
  80754c:	00840204 	movi	r2,4104
  807550:	a5000204 	addi	r20,r20,8
  807554:	10c7c83a 	sub	r3,r2,r3
  807558:	a545883a 	add	r2,r20,r21
  80755c:	1083ffcc 	andi	r2,r2,4095
  807560:	18abc83a 	sub	r21,r3,r2
  807564:	a80b883a 	mov	r5,r21
  807568:	9009883a 	mov	r4,r18
  80756c:	08083940 	call	808394 <_sbrk_r>
  807570:	00ffffc4 	movi	r3,-1
  807574:	10c0e126 	beq	r2,r3,8078fc <_malloc_r+0x788>
  807578:	1505c83a 	sub	r2,r2,r20
  80757c:	1545883a 	add	r2,r2,r21
  807580:	10800054 	ori	r2,r2,1
  807584:	e0c00017 	ldw	r3,0(fp)
  807588:	9d000215 	stw	r20,8(r19)
  80758c:	a0800115 	stw	r2,4(r20)
  807590:	a8c7883a 	add	r3,r21,r3
  807594:	e0c00015 	stw	r3,0(fp)
  807598:	84c00e26 	beq	r16,r19,8075d4 <_malloc_r+0x460>
  80759c:	018003c4 	movi	r6,15
  8075a0:	3580a72e 	bgeu	r6,r22,807840 <_malloc_r+0x6cc>
  8075a4:	81400117 	ldw	r5,4(r16)
  8075a8:	013ffe04 	movi	r4,-8
  8075ac:	b0bffd04 	addi	r2,r22,-12
  8075b0:	1104703a 	and	r2,r2,r4
  8075b4:	2900004c 	andi	r4,r5,1
  8075b8:	2088b03a 	or	r4,r4,r2
  8075bc:	81000115 	stw	r4,4(r16)
  8075c0:	01400144 	movi	r5,5
  8075c4:	8089883a 	add	r4,r16,r2
  8075c8:	21400115 	stw	r5,4(r4)
  8075cc:	21400215 	stw	r5,8(r4)
  8075d0:	3080cd36 	bltu	r6,r2,807908 <_malloc_r+0x794>
  8075d4:	00802074 	movhi	r2,129
  8075d8:	10846804 	addi	r2,r2,4512
  8075dc:	11000017 	ldw	r4,0(r2)
  8075e0:	20c0012e 	bgeu	r4,r3,8075e8 <_malloc_r+0x474>
  8075e4:	10c00015 	stw	r3,0(r2)
  8075e8:	00802074 	movhi	r2,129
  8075ec:	10846704 	addi	r2,r2,4508
  8075f0:	11000017 	ldw	r4,0(r2)
  8075f4:	9c000217 	ldw	r16,8(r19)
  8075f8:	20c0012e 	bgeu	r4,r3,807600 <_malloc_r+0x48c>
  8075fc:	10c00015 	stw	r3,0(r2)
  807600:	80c00117 	ldw	r3,4(r16)
  807604:	00bfff04 	movi	r2,-4
  807608:	1886703a 	and	r3,r3,r2
  80760c:	1c45c83a 	sub	r2,r3,r17
  807610:	1c400236 	bltu	r3,r17,80761c <_malloc_r+0x4a8>
  807614:	00c003c4 	movi	r3,15
  807618:	18800416 	blt	r3,r2,80762c <_malloc_r+0x4b8>
  80761c:	9009883a 	mov	r4,r18
  807620:	0809ab80 	call	809ab8 <__malloc_unlock>
  807624:	0005883a 	mov	r2,zero
  807628:	003f7b06 	br	807418 <__alt_mem_onchip_mem+0xff7ff418>
  80762c:	88c00054 	ori	r3,r17,1
  807630:	80c00115 	stw	r3,4(r16)
  807634:	8463883a 	add	r17,r16,r17
  807638:	10800054 	ori	r2,r2,1
  80763c:	9c400215 	stw	r17,8(r19)
  807640:	88800115 	stw	r2,4(r17)
  807644:	9009883a 	mov	r4,r18
  807648:	0809ab80 	call	809ab8 <__malloc_unlock>
  80764c:	80800204 	addi	r2,r16,8
  807650:	003f7106 	br	807418 <__alt_mem_onchip_mem+0xff7ff418>
  807654:	00c00504 	movi	r3,20
  807658:	18804a2e 	bgeu	r3,r2,807784 <_malloc_r+0x610>
  80765c:	00c01504 	movi	r3,84
  807660:	18806e36 	bltu	r3,r2,80781c <_malloc_r+0x6a8>
  807664:	8804d33a 	srli	r2,r17,12
  807668:	12001bc4 	addi	r8,r2,111
  80766c:	11c01b84 	addi	r7,r2,110
  807670:	4209883a 	add	r4,r8,r8
  807674:	003edd06 	br	8071ec <__alt_mem_onchip_mem+0xff7ff1ec>
  807678:	3804d27a 	srli	r2,r7,9
  80767c:	00c00104 	movi	r3,4
  807680:	1880442e 	bgeu	r3,r2,807794 <_malloc_r+0x620>
  807684:	00c00504 	movi	r3,20
  807688:	18808136 	bltu	r3,r2,807890 <_malloc_r+0x71c>
  80768c:	11401704 	addi	r5,r2,92
  807690:	10c016c4 	addi	r3,r2,91
  807694:	294b883a 	add	r5,r5,r5
  807698:	294b883a 	add	r5,r5,r5
  80769c:	294b883a 	add	r5,r5,r5
  8076a0:	994b883a 	add	r5,r19,r5
  8076a4:	28800017 	ldw	r2,0(r5)
  8076a8:	01802074 	movhi	r6,129
  8076ac:	297ffe04 	addi	r5,r5,-8
  8076b0:	31b74304 	addi	r6,r6,-8948
  8076b4:	28806526 	beq	r5,r2,80784c <_malloc_r+0x6d8>
  8076b8:	01bfff04 	movi	r6,-4
  8076bc:	10c00117 	ldw	r3,4(r2)
  8076c0:	1986703a 	and	r3,r3,r6
  8076c4:	38c0022e 	bgeu	r7,r3,8076d0 <_malloc_r+0x55c>
  8076c8:	10800217 	ldw	r2,8(r2)
  8076cc:	28bffb1e 	bne	r5,r2,8076bc <__alt_mem_onchip_mem+0xff7ff6bc>
  8076d0:	11400317 	ldw	r5,12(r2)
  8076d4:	98c00117 	ldw	r3,4(r19)
  8076d8:	81400315 	stw	r5,12(r16)
  8076dc:	80800215 	stw	r2,8(r16)
  8076e0:	2c000215 	stw	r16,8(r5)
  8076e4:	14000315 	stw	r16,12(r2)
  8076e8:	003ef806 	br	8072cc <__alt_mem_onchip_mem+0xff7ff2cc>
  8076ec:	88c00054 	ori	r3,r17,1
  8076f0:	80c00115 	stw	r3,4(r16)
  8076f4:	8463883a 	add	r17,r16,r17
  8076f8:	34400515 	stw	r17,20(r6)
  8076fc:	34400415 	stw	r17,16(r6)
  807700:	10c00054 	ori	r3,r2,1
  807704:	8a000315 	stw	r8,12(r17)
  807708:	8a000215 	stw	r8,8(r17)
  80770c:	88c00115 	stw	r3,4(r17)
  807710:	88a3883a 	add	r17,r17,r2
  807714:	88800015 	stw	r2,0(r17)
  807718:	9009883a 	mov	r4,r18
  80771c:	0809ab80 	call	809ab8 <__malloc_unlock>
  807720:	80800204 	addi	r2,r16,8
  807724:	003f3c06 	br	807418 <__alt_mem_onchip_mem+0xff7ff418>
  807728:	30c00117 	ldw	r3,4(r6)
  80772c:	003ee706 	br	8072cc <__alt_mem_onchip_mem+0xff7ff2cc>
  807730:	5ac00044 	addi	r11,r11,1
  807734:	588000cc 	andi	r2,r11,3
  807738:	31800204 	addi	r6,r6,8
  80773c:	103efd1e 	bne	r2,zero,807334 <__alt_mem_onchip_mem+0xff7ff334>
  807740:	00002406 	br	8077d4 <_malloc_r+0x660>
  807744:	14000317 	ldw	r16,12(r2)
  807748:	143f251e 	bne	r2,r16,8073e0 <__alt_mem_onchip_mem+0xff7ff3e0>
  80774c:	21000084 	addi	r4,r4,2
  807750:	003ebc06 	br	807244 <__alt_mem_onchip_mem+0xff7ff244>
  807754:	8085883a 	add	r2,r16,r2
  807758:	10c00117 	ldw	r3,4(r2)
  80775c:	81000317 	ldw	r4,12(r16)
  807760:	81400217 	ldw	r5,8(r16)
  807764:	18c00054 	ori	r3,r3,1
  807768:	10c00115 	stw	r3,4(r2)
  80776c:	29000315 	stw	r4,12(r5)
  807770:	21400215 	stw	r5,8(r4)
  807774:	9009883a 	mov	r4,r18
  807778:	0809ab80 	call	809ab8 <__malloc_unlock>
  80777c:	80800204 	addi	r2,r16,8
  807780:	003f2506 	br	807418 <__alt_mem_onchip_mem+0xff7ff418>
  807784:	12001704 	addi	r8,r2,92
  807788:	11c016c4 	addi	r7,r2,91
  80778c:	4209883a 	add	r4,r8,r8
  807790:	003e9606 	br	8071ec <__alt_mem_onchip_mem+0xff7ff1ec>
  807794:	3804d1ba 	srli	r2,r7,6
  807798:	11400e44 	addi	r5,r2,57
  80779c:	10c00e04 	addi	r3,r2,56
  8077a0:	294b883a 	add	r5,r5,r5
  8077a4:	003fbc06 	br	807698 <__alt_mem_onchip_mem+0xff7ff698>
  8077a8:	84ff5926 	beq	r16,r19,807510 <__alt_mem_onchip_mem+0xff7ff510>
  8077ac:	00802074 	movhi	r2,129
  8077b0:	10b74304 	addi	r2,r2,-8948
  8077b4:	14000217 	ldw	r16,8(r2)
  8077b8:	00bfff04 	movi	r2,-4
  8077bc:	80c00117 	ldw	r3,4(r16)
  8077c0:	1886703a 	and	r3,r3,r2
  8077c4:	003f9106 	br	80760c <__alt_mem_onchip_mem+0xff7ff60c>
  8077c8:	60800217 	ldw	r2,8(r12)
  8077cc:	213fffc4 	addi	r4,r4,-1
  8077d0:	1300651e 	bne	r2,r12,807968 <_malloc_r+0x7f4>
  8077d4:	208000cc 	andi	r2,r4,3
  8077d8:	633ffe04 	addi	r12,r12,-8
  8077dc:	103ffa1e 	bne	r2,zero,8077c8 <__alt_mem_onchip_mem+0xff7ff7c8>
  8077e0:	98800117 	ldw	r2,4(r19)
  8077e4:	0146303a 	nor	r3,zero,r5
  8077e8:	1884703a 	and	r2,r3,r2
  8077ec:	98800115 	stw	r2,4(r19)
  8077f0:	294b883a 	add	r5,r5,r5
  8077f4:	117f2836 	bltu	r2,r5,807498 <__alt_mem_onchip_mem+0xff7ff498>
  8077f8:	283f2726 	beq	r5,zero,807498 <__alt_mem_onchip_mem+0xff7ff498>
  8077fc:	2886703a 	and	r3,r5,r2
  807800:	5809883a 	mov	r4,r11
  807804:	183ec31e 	bne	r3,zero,807314 <__alt_mem_onchip_mem+0xff7ff314>
  807808:	294b883a 	add	r5,r5,r5
  80780c:	2886703a 	and	r3,r5,r2
  807810:	21000104 	addi	r4,r4,4
  807814:	183ffc26 	beq	r3,zero,807808 <__alt_mem_onchip_mem+0xff7ff808>
  807818:	003ebe06 	br	807314 <__alt_mem_onchip_mem+0xff7ff314>
  80781c:	00c05504 	movi	r3,340
  807820:	18801236 	bltu	r3,r2,80786c <_malloc_r+0x6f8>
  807824:	8804d3fa 	srli	r2,r17,15
  807828:	12001e04 	addi	r8,r2,120
  80782c:	11c01dc4 	addi	r7,r2,119
  807830:	4209883a 	add	r4,r8,r8
  807834:	003e6d06 	br	8071ec <__alt_mem_onchip_mem+0xff7ff1ec>
  807838:	00c40004 	movi	r3,4096
  80783c:	003f4606 	br	807558 <__alt_mem_onchip_mem+0xff7ff558>
  807840:	00800044 	movi	r2,1
  807844:	a0800115 	stw	r2,4(r20)
  807848:	003f7406 	br	80761c <__alt_mem_onchip_mem+0xff7ff61c>
  80784c:	1805d0ba 	srai	r2,r3,2
  807850:	01c00044 	movi	r7,1
  807854:	30c00117 	ldw	r3,4(r6)
  807858:	388e983a 	sll	r7,r7,r2
  80785c:	2805883a 	mov	r2,r5
  807860:	38c6b03a 	or	r3,r7,r3
  807864:	30c00115 	stw	r3,4(r6)
  807868:	003f9b06 	br	8076d8 <__alt_mem_onchip_mem+0xff7ff6d8>
  80786c:	00c15504 	movi	r3,1364
  807870:	18801a36 	bltu	r3,r2,8078dc <_malloc_r+0x768>
  807874:	8804d4ba 	srli	r2,r17,18
  807878:	12001f44 	addi	r8,r2,125
  80787c:	11c01f04 	addi	r7,r2,124
  807880:	4209883a 	add	r4,r8,r8
  807884:	003e5906 	br	8071ec <__alt_mem_onchip_mem+0xff7ff1ec>
  807888:	ad400404 	addi	r21,r21,16
  80788c:	003f1706 	br	8074ec <__alt_mem_onchip_mem+0xff7ff4ec>
  807890:	00c01504 	movi	r3,84
  807894:	18802336 	bltu	r3,r2,807924 <_malloc_r+0x7b0>
  807898:	3804d33a 	srli	r2,r7,12
  80789c:	11401bc4 	addi	r5,r2,111
  8078a0:	10c01b84 	addi	r3,r2,110
  8078a4:	294b883a 	add	r5,r5,r5
  8078a8:	003f7b06 	br	807698 <__alt_mem_onchip_mem+0xff7ff698>
  8078ac:	9c000217 	ldw	r16,8(r19)
  8078b0:	00bfff04 	movi	r2,-4
  8078b4:	80c00117 	ldw	r3,4(r16)
  8078b8:	1886703a 	and	r3,r3,r2
  8078bc:	003f5306 	br	80760c <__alt_mem_onchip_mem+0xff7ff60c>
  8078c0:	3083ffcc 	andi	r2,r6,4095
  8078c4:	103f181e 	bne	r2,zero,807528 <__alt_mem_onchip_mem+0xff7ff528>
  8078c8:	99000217 	ldw	r4,8(r19)
  8078cc:	b545883a 	add	r2,r22,r21
  8078d0:	10800054 	ori	r2,r2,1
  8078d4:	20800115 	stw	r2,4(r4)
  8078d8:	003f3e06 	br	8075d4 <__alt_mem_onchip_mem+0xff7ff5d4>
  8078dc:	01003f84 	movi	r4,254
  8078e0:	02001fc4 	movi	r8,127
  8078e4:	01c01f84 	movi	r7,126
  8078e8:	003e4006 	br	8071ec <__alt_mem_onchip_mem+0xff7ff1ec>
  8078ec:	00802074 	movhi	r2,129
  8078f0:	10bd4204 	addi	r2,r2,-2808
  8078f4:	15000015 	stw	r20,0(r2)
  8078f8:	003f1106 	br	807540 <__alt_mem_onchip_mem+0xff7ff540>
  8078fc:	00800044 	movi	r2,1
  807900:	002b883a 	mov	r21,zero
  807904:	003f1f06 	br	807584 <__alt_mem_onchip_mem+0xff7ff584>
  807908:	81400204 	addi	r5,r16,8
  80790c:	9009883a 	mov	r4,r18
  807910:	0808bfc0 	call	808bfc <_free_r>
  807914:	00802074 	movhi	r2,129
  807918:	10847204 	addi	r2,r2,4552
  80791c:	10c00017 	ldw	r3,0(r2)
  807920:	003f2c06 	br	8075d4 <__alt_mem_onchip_mem+0xff7ff5d4>
  807924:	00c05504 	movi	r3,340
  807928:	18800536 	bltu	r3,r2,807940 <_malloc_r+0x7cc>
  80792c:	3804d3fa 	srli	r2,r7,15
  807930:	11401e04 	addi	r5,r2,120
  807934:	10c01dc4 	addi	r3,r2,119
  807938:	294b883a 	add	r5,r5,r5
  80793c:	003f5606 	br	807698 <__alt_mem_onchip_mem+0xff7ff698>
  807940:	00c15504 	movi	r3,1364
  807944:	18800536 	bltu	r3,r2,80795c <_malloc_r+0x7e8>
  807948:	3804d4ba 	srli	r2,r7,18
  80794c:	11401f44 	addi	r5,r2,125
  807950:	10c01f04 	addi	r3,r2,124
  807954:	294b883a 	add	r5,r5,r5
  807958:	003f4f06 	br	807698 <__alt_mem_onchip_mem+0xff7ff698>
  80795c:	01403f84 	movi	r5,254
  807960:	00c01f84 	movi	r3,126
  807964:	003f4c06 	br	807698 <__alt_mem_onchip_mem+0xff7ff698>
  807968:	98800117 	ldw	r2,4(r19)
  80796c:	003fa006 	br	8077f0 <__alt_mem_onchip_mem+0xff7ff7f0>
  807970:	8808d0fa 	srli	r4,r17,3
  807974:	20800044 	addi	r2,r4,1
  807978:	1085883a 	add	r2,r2,r2
  80797c:	003e9006 	br	8073c0 <__alt_mem_onchip_mem+0xff7ff3c0>

00807980 <memchr>:
  807980:	208000cc 	andi	r2,r4,3
  807984:	280f883a 	mov	r7,r5
  807988:	10003426 	beq	r2,zero,807a5c <memchr+0xdc>
  80798c:	30bfffc4 	addi	r2,r6,-1
  807990:	30001a26 	beq	r6,zero,8079fc <memchr+0x7c>
  807994:	20c00003 	ldbu	r3,0(r4)
  807998:	29803fcc 	andi	r6,r5,255
  80799c:	30c0051e 	bne	r6,r3,8079b4 <memchr+0x34>
  8079a0:	00001806 	br	807a04 <memchr+0x84>
  8079a4:	10001526 	beq	r2,zero,8079fc <memchr+0x7c>
  8079a8:	20c00003 	ldbu	r3,0(r4)
  8079ac:	10bfffc4 	addi	r2,r2,-1
  8079b0:	30c01426 	beq	r6,r3,807a04 <memchr+0x84>
  8079b4:	21000044 	addi	r4,r4,1
  8079b8:	20c000cc 	andi	r3,r4,3
  8079bc:	183ff91e 	bne	r3,zero,8079a4 <__alt_mem_onchip_mem+0xff7ff9a4>
  8079c0:	020000c4 	movi	r8,3
  8079c4:	40801136 	bltu	r8,r2,807a0c <memchr+0x8c>
  8079c8:	10000c26 	beq	r2,zero,8079fc <memchr+0x7c>
  8079cc:	20c00003 	ldbu	r3,0(r4)
  8079d0:	29403fcc 	andi	r5,r5,255
  8079d4:	28c00b26 	beq	r5,r3,807a04 <memchr+0x84>
  8079d8:	20c00044 	addi	r3,r4,1
  8079dc:	39803fcc 	andi	r6,r7,255
  8079e0:	2089883a 	add	r4,r4,r2
  8079e4:	00000306 	br	8079f4 <memchr+0x74>
  8079e8:	18c00044 	addi	r3,r3,1
  8079ec:	197fffc3 	ldbu	r5,-1(r3)
  8079f0:	31400526 	beq	r6,r5,807a08 <memchr+0x88>
  8079f4:	1805883a 	mov	r2,r3
  8079f8:	20fffb1e 	bne	r4,r3,8079e8 <__alt_mem_onchip_mem+0xff7ff9e8>
  8079fc:	0005883a 	mov	r2,zero
  807a00:	f800283a 	ret
  807a04:	2005883a 	mov	r2,r4
  807a08:	f800283a 	ret
  807a0c:	28c03fcc 	andi	r3,r5,255
  807a10:	1812923a 	slli	r9,r3,8
  807a14:	02ffbff4 	movhi	r11,65279
  807a18:	02a02074 	movhi	r10,32897
  807a1c:	48d2b03a 	or	r9,r9,r3
  807a20:	4806943a 	slli	r3,r9,16
  807a24:	5affbfc4 	addi	r11,r11,-257
  807a28:	52a02004 	addi	r10,r10,-32640
  807a2c:	48d2b03a 	or	r9,r9,r3
  807a30:	20c00017 	ldw	r3,0(r4)
  807a34:	48c6f03a 	xor	r3,r9,r3
  807a38:	1acd883a 	add	r6,r3,r11
  807a3c:	00c6303a 	nor	r3,zero,r3
  807a40:	30c6703a 	and	r3,r6,r3
  807a44:	1a86703a 	and	r3,r3,r10
  807a48:	183fe01e 	bne	r3,zero,8079cc <__alt_mem_onchip_mem+0xff7ff9cc>
  807a4c:	10bfff04 	addi	r2,r2,-4
  807a50:	21000104 	addi	r4,r4,4
  807a54:	40bff636 	bltu	r8,r2,807a30 <__alt_mem_onchip_mem+0xff7ffa30>
  807a58:	003fdb06 	br	8079c8 <__alt_mem_onchip_mem+0xff7ff9c8>
  807a5c:	3005883a 	mov	r2,r6
  807a60:	003fd706 	br	8079c0 <__alt_mem_onchip_mem+0xff7ff9c0>

00807a64 <memcpy>:
  807a64:	defffd04 	addi	sp,sp,-12
  807a68:	dfc00215 	stw	ra,8(sp)
  807a6c:	dc400115 	stw	r17,4(sp)
  807a70:	dc000015 	stw	r16,0(sp)
  807a74:	00c003c4 	movi	r3,15
  807a78:	2005883a 	mov	r2,r4
  807a7c:	1980452e 	bgeu	r3,r6,807b94 <memcpy+0x130>
  807a80:	2906b03a 	or	r3,r5,r4
  807a84:	18c000cc 	andi	r3,r3,3
  807a88:	1800441e 	bne	r3,zero,807b9c <memcpy+0x138>
  807a8c:	347ffc04 	addi	r17,r6,-16
  807a90:	8822d13a 	srli	r17,r17,4
  807a94:	28c00104 	addi	r3,r5,4
  807a98:	23400104 	addi	r13,r4,4
  807a9c:	8820913a 	slli	r16,r17,4
  807aa0:	2b000204 	addi	r12,r5,8
  807aa4:	22c00204 	addi	r11,r4,8
  807aa8:	84000504 	addi	r16,r16,20
  807aac:	2a800304 	addi	r10,r5,12
  807ab0:	22400304 	addi	r9,r4,12
  807ab4:	2c21883a 	add	r16,r5,r16
  807ab8:	2811883a 	mov	r8,r5
  807abc:	200f883a 	mov	r7,r4
  807ac0:	41000017 	ldw	r4,0(r8)
  807ac4:	1fc00017 	ldw	ra,0(r3)
  807ac8:	63c00017 	ldw	r15,0(r12)
  807acc:	39000015 	stw	r4,0(r7)
  807ad0:	53800017 	ldw	r14,0(r10)
  807ad4:	6fc00015 	stw	ra,0(r13)
  807ad8:	5bc00015 	stw	r15,0(r11)
  807adc:	4b800015 	stw	r14,0(r9)
  807ae0:	18c00404 	addi	r3,r3,16
  807ae4:	39c00404 	addi	r7,r7,16
  807ae8:	42000404 	addi	r8,r8,16
  807aec:	6b400404 	addi	r13,r13,16
  807af0:	63000404 	addi	r12,r12,16
  807af4:	5ac00404 	addi	r11,r11,16
  807af8:	52800404 	addi	r10,r10,16
  807afc:	4a400404 	addi	r9,r9,16
  807b00:	1c3fef1e 	bne	r3,r16,807ac0 <__alt_mem_onchip_mem+0xff7ffac0>
  807b04:	89c00044 	addi	r7,r17,1
  807b08:	380e913a 	slli	r7,r7,4
  807b0c:	310003cc 	andi	r4,r6,15
  807b10:	02c000c4 	movi	r11,3
  807b14:	11c7883a 	add	r3,r2,r7
  807b18:	29cb883a 	add	r5,r5,r7
  807b1c:	5900212e 	bgeu	r11,r4,807ba4 <memcpy+0x140>
  807b20:	1813883a 	mov	r9,r3
  807b24:	2811883a 	mov	r8,r5
  807b28:	200f883a 	mov	r7,r4
  807b2c:	42800017 	ldw	r10,0(r8)
  807b30:	4a400104 	addi	r9,r9,4
  807b34:	39ffff04 	addi	r7,r7,-4
  807b38:	4abfff15 	stw	r10,-4(r9)
  807b3c:	42000104 	addi	r8,r8,4
  807b40:	59fffa36 	bltu	r11,r7,807b2c <__alt_mem_onchip_mem+0xff7ffb2c>
  807b44:	213fff04 	addi	r4,r4,-4
  807b48:	2008d0ba 	srli	r4,r4,2
  807b4c:	318000cc 	andi	r6,r6,3
  807b50:	21000044 	addi	r4,r4,1
  807b54:	2109883a 	add	r4,r4,r4
  807b58:	2109883a 	add	r4,r4,r4
  807b5c:	1907883a 	add	r3,r3,r4
  807b60:	290b883a 	add	r5,r5,r4
  807b64:	30000626 	beq	r6,zero,807b80 <memcpy+0x11c>
  807b68:	198d883a 	add	r6,r3,r6
  807b6c:	29c00003 	ldbu	r7,0(r5)
  807b70:	18c00044 	addi	r3,r3,1
  807b74:	29400044 	addi	r5,r5,1
  807b78:	19ffffc5 	stb	r7,-1(r3)
  807b7c:	19bffb1e 	bne	r3,r6,807b6c <__alt_mem_onchip_mem+0xff7ffb6c>
  807b80:	dfc00217 	ldw	ra,8(sp)
  807b84:	dc400117 	ldw	r17,4(sp)
  807b88:	dc000017 	ldw	r16,0(sp)
  807b8c:	dec00304 	addi	sp,sp,12
  807b90:	f800283a 	ret
  807b94:	2007883a 	mov	r3,r4
  807b98:	003ff206 	br	807b64 <__alt_mem_onchip_mem+0xff7ffb64>
  807b9c:	2007883a 	mov	r3,r4
  807ba0:	003ff106 	br	807b68 <__alt_mem_onchip_mem+0xff7ffb68>
  807ba4:	200d883a 	mov	r6,r4
  807ba8:	003fee06 	br	807b64 <__alt_mem_onchip_mem+0xff7ffb64>

00807bac <memmove>:
  807bac:	2005883a 	mov	r2,r4
  807bb0:	29000b2e 	bgeu	r5,r4,807be0 <memmove+0x34>
  807bb4:	298f883a 	add	r7,r5,r6
  807bb8:	21c0092e 	bgeu	r4,r7,807be0 <memmove+0x34>
  807bbc:	2187883a 	add	r3,r4,r6
  807bc0:	198bc83a 	sub	r5,r3,r6
  807bc4:	30004826 	beq	r6,zero,807ce8 <memmove+0x13c>
  807bc8:	39ffffc4 	addi	r7,r7,-1
  807bcc:	39000003 	ldbu	r4,0(r7)
  807bd0:	18ffffc4 	addi	r3,r3,-1
  807bd4:	19000005 	stb	r4,0(r3)
  807bd8:	28fffb1e 	bne	r5,r3,807bc8 <__alt_mem_onchip_mem+0xff7ffbc8>
  807bdc:	f800283a 	ret
  807be0:	00c003c4 	movi	r3,15
  807be4:	1980412e 	bgeu	r3,r6,807cec <memmove+0x140>
  807be8:	2886b03a 	or	r3,r5,r2
  807bec:	18c000cc 	andi	r3,r3,3
  807bf0:	1800401e 	bne	r3,zero,807cf4 <memmove+0x148>
  807bf4:	33fffc04 	addi	r15,r6,-16
  807bf8:	781ed13a 	srli	r15,r15,4
  807bfc:	28c00104 	addi	r3,r5,4
  807c00:	13400104 	addi	r13,r2,4
  807c04:	781c913a 	slli	r14,r15,4
  807c08:	2b000204 	addi	r12,r5,8
  807c0c:	12c00204 	addi	r11,r2,8
  807c10:	73800504 	addi	r14,r14,20
  807c14:	2a800304 	addi	r10,r5,12
  807c18:	12400304 	addi	r9,r2,12
  807c1c:	2b9d883a 	add	r14,r5,r14
  807c20:	2811883a 	mov	r8,r5
  807c24:	100f883a 	mov	r7,r2
  807c28:	41000017 	ldw	r4,0(r8)
  807c2c:	39c00404 	addi	r7,r7,16
  807c30:	18c00404 	addi	r3,r3,16
  807c34:	393ffc15 	stw	r4,-16(r7)
  807c38:	193ffc17 	ldw	r4,-16(r3)
  807c3c:	6b400404 	addi	r13,r13,16
  807c40:	5ac00404 	addi	r11,r11,16
  807c44:	693ffc15 	stw	r4,-16(r13)
  807c48:	61000017 	ldw	r4,0(r12)
  807c4c:	4a400404 	addi	r9,r9,16
  807c50:	42000404 	addi	r8,r8,16
  807c54:	593ffc15 	stw	r4,-16(r11)
  807c58:	51000017 	ldw	r4,0(r10)
  807c5c:	63000404 	addi	r12,r12,16
  807c60:	52800404 	addi	r10,r10,16
  807c64:	493ffc15 	stw	r4,-16(r9)
  807c68:	1bbfef1e 	bne	r3,r14,807c28 <__alt_mem_onchip_mem+0xff7ffc28>
  807c6c:	79000044 	addi	r4,r15,1
  807c70:	2008913a 	slli	r4,r4,4
  807c74:	328003cc 	andi	r10,r6,15
  807c78:	02c000c4 	movi	r11,3
  807c7c:	1107883a 	add	r3,r2,r4
  807c80:	290b883a 	add	r5,r5,r4
  807c84:	5a801e2e 	bgeu	r11,r10,807d00 <memmove+0x154>
  807c88:	1813883a 	mov	r9,r3
  807c8c:	2811883a 	mov	r8,r5
  807c90:	500f883a 	mov	r7,r10
  807c94:	41000017 	ldw	r4,0(r8)
  807c98:	4a400104 	addi	r9,r9,4
  807c9c:	39ffff04 	addi	r7,r7,-4
  807ca0:	493fff15 	stw	r4,-4(r9)
  807ca4:	42000104 	addi	r8,r8,4
  807ca8:	59fffa36 	bltu	r11,r7,807c94 <__alt_mem_onchip_mem+0xff7ffc94>
  807cac:	513fff04 	addi	r4,r10,-4
  807cb0:	2008d0ba 	srli	r4,r4,2
  807cb4:	318000cc 	andi	r6,r6,3
  807cb8:	21000044 	addi	r4,r4,1
  807cbc:	2109883a 	add	r4,r4,r4
  807cc0:	2109883a 	add	r4,r4,r4
  807cc4:	1907883a 	add	r3,r3,r4
  807cc8:	290b883a 	add	r5,r5,r4
  807ccc:	30000b26 	beq	r6,zero,807cfc <memmove+0x150>
  807cd0:	198d883a 	add	r6,r3,r6
  807cd4:	29c00003 	ldbu	r7,0(r5)
  807cd8:	18c00044 	addi	r3,r3,1
  807cdc:	29400044 	addi	r5,r5,1
  807ce0:	19ffffc5 	stb	r7,-1(r3)
  807ce4:	19bffb1e 	bne	r3,r6,807cd4 <__alt_mem_onchip_mem+0xff7ffcd4>
  807ce8:	f800283a 	ret
  807cec:	1007883a 	mov	r3,r2
  807cf0:	003ff606 	br	807ccc <__alt_mem_onchip_mem+0xff7ffccc>
  807cf4:	1007883a 	mov	r3,r2
  807cf8:	003ff506 	br	807cd0 <__alt_mem_onchip_mem+0xff7ffcd0>
  807cfc:	f800283a 	ret
  807d00:	500d883a 	mov	r6,r10
  807d04:	003ff106 	br	807ccc <__alt_mem_onchip_mem+0xff7ffccc>

00807d08 <memset>:
  807d08:	20c000cc 	andi	r3,r4,3
  807d0c:	2005883a 	mov	r2,r4
  807d10:	18004426 	beq	r3,zero,807e24 <memset+0x11c>
  807d14:	31ffffc4 	addi	r7,r6,-1
  807d18:	30004026 	beq	r6,zero,807e1c <memset+0x114>
  807d1c:	2813883a 	mov	r9,r5
  807d20:	200d883a 	mov	r6,r4
  807d24:	2007883a 	mov	r3,r4
  807d28:	00000406 	br	807d3c <memset+0x34>
  807d2c:	3a3fffc4 	addi	r8,r7,-1
  807d30:	31800044 	addi	r6,r6,1
  807d34:	38003926 	beq	r7,zero,807e1c <memset+0x114>
  807d38:	400f883a 	mov	r7,r8
  807d3c:	18c00044 	addi	r3,r3,1
  807d40:	32400005 	stb	r9,0(r6)
  807d44:	1a0000cc 	andi	r8,r3,3
  807d48:	403ff81e 	bne	r8,zero,807d2c <__alt_mem_onchip_mem+0xff7ffd2c>
  807d4c:	010000c4 	movi	r4,3
  807d50:	21c02d2e 	bgeu	r4,r7,807e08 <memset+0x100>
  807d54:	29003fcc 	andi	r4,r5,255
  807d58:	200c923a 	slli	r6,r4,8
  807d5c:	3108b03a 	or	r4,r6,r4
  807d60:	200c943a 	slli	r6,r4,16
  807d64:	218cb03a 	or	r6,r4,r6
  807d68:	010003c4 	movi	r4,15
  807d6c:	21c0182e 	bgeu	r4,r7,807dd0 <memset+0xc8>
  807d70:	3b3ffc04 	addi	r12,r7,-16
  807d74:	6018d13a 	srli	r12,r12,4
  807d78:	1a000104 	addi	r8,r3,4
  807d7c:	1ac00204 	addi	r11,r3,8
  807d80:	6008913a 	slli	r4,r12,4
  807d84:	1a800304 	addi	r10,r3,12
  807d88:	1813883a 	mov	r9,r3
  807d8c:	21000504 	addi	r4,r4,20
  807d90:	1909883a 	add	r4,r3,r4
  807d94:	49800015 	stw	r6,0(r9)
  807d98:	41800015 	stw	r6,0(r8)
  807d9c:	59800015 	stw	r6,0(r11)
  807da0:	51800015 	stw	r6,0(r10)
  807da4:	42000404 	addi	r8,r8,16
  807da8:	4a400404 	addi	r9,r9,16
  807dac:	5ac00404 	addi	r11,r11,16
  807db0:	52800404 	addi	r10,r10,16
  807db4:	413ff71e 	bne	r8,r4,807d94 <__alt_mem_onchip_mem+0xff7ffd94>
  807db8:	63000044 	addi	r12,r12,1
  807dbc:	6018913a 	slli	r12,r12,4
  807dc0:	39c003cc 	andi	r7,r7,15
  807dc4:	010000c4 	movi	r4,3
  807dc8:	1b07883a 	add	r3,r3,r12
  807dcc:	21c00e2e 	bgeu	r4,r7,807e08 <memset+0x100>
  807dd0:	1813883a 	mov	r9,r3
  807dd4:	3811883a 	mov	r8,r7
  807dd8:	010000c4 	movi	r4,3
  807ddc:	49800015 	stw	r6,0(r9)
  807de0:	423fff04 	addi	r8,r8,-4
  807de4:	4a400104 	addi	r9,r9,4
  807de8:	223ffc36 	bltu	r4,r8,807ddc <__alt_mem_onchip_mem+0xff7ffddc>
  807dec:	393fff04 	addi	r4,r7,-4
  807df0:	2008d0ba 	srli	r4,r4,2
  807df4:	39c000cc 	andi	r7,r7,3
  807df8:	21000044 	addi	r4,r4,1
  807dfc:	2109883a 	add	r4,r4,r4
  807e00:	2109883a 	add	r4,r4,r4
  807e04:	1907883a 	add	r3,r3,r4
  807e08:	38000526 	beq	r7,zero,807e20 <memset+0x118>
  807e0c:	19cf883a 	add	r7,r3,r7
  807e10:	19400005 	stb	r5,0(r3)
  807e14:	18c00044 	addi	r3,r3,1
  807e18:	38fffd1e 	bne	r7,r3,807e10 <__alt_mem_onchip_mem+0xff7ffe10>
  807e1c:	f800283a 	ret
  807e20:	f800283a 	ret
  807e24:	2007883a 	mov	r3,r4
  807e28:	300f883a 	mov	r7,r6
  807e2c:	003fc706 	br	807d4c <__alt_mem_onchip_mem+0xff7ffd4c>

00807e30 <_realloc_r>:
  807e30:	defff604 	addi	sp,sp,-40
  807e34:	dc800215 	stw	r18,8(sp)
  807e38:	dfc00915 	stw	ra,36(sp)
  807e3c:	df000815 	stw	fp,32(sp)
  807e40:	ddc00715 	stw	r23,28(sp)
  807e44:	dd800615 	stw	r22,24(sp)
  807e48:	dd400515 	stw	r21,20(sp)
  807e4c:	dd000415 	stw	r20,16(sp)
  807e50:	dcc00315 	stw	r19,12(sp)
  807e54:	dc400115 	stw	r17,4(sp)
  807e58:	dc000015 	stw	r16,0(sp)
  807e5c:	3025883a 	mov	r18,r6
  807e60:	2800b726 	beq	r5,zero,808140 <_realloc_r+0x310>
  807e64:	282b883a 	mov	r21,r5
  807e68:	2029883a 	mov	r20,r4
  807e6c:	0809a940 	call	809a94 <__malloc_lock>
  807e70:	a8bfff17 	ldw	r2,-4(r21)
  807e74:	043fff04 	movi	r16,-4
  807e78:	90c002c4 	addi	r3,r18,11
  807e7c:	01000584 	movi	r4,22
  807e80:	acfffe04 	addi	r19,r21,-8
  807e84:	1420703a 	and	r16,r2,r16
  807e88:	20c0332e 	bgeu	r4,r3,807f58 <_realloc_r+0x128>
  807e8c:	047ffe04 	movi	r17,-8
  807e90:	1c62703a 	and	r17,r3,r17
  807e94:	8807883a 	mov	r3,r17
  807e98:	88005816 	blt	r17,zero,807ffc <_realloc_r+0x1cc>
  807e9c:	8c805736 	bltu	r17,r18,807ffc <_realloc_r+0x1cc>
  807ea0:	80c0300e 	bge	r16,r3,807f64 <_realloc_r+0x134>
  807ea4:	07002074 	movhi	fp,129
  807ea8:	e7374304 	addi	fp,fp,-8948
  807eac:	e1c00217 	ldw	r7,8(fp)
  807eb0:	9c09883a 	add	r4,r19,r16
  807eb4:	22000117 	ldw	r8,4(r4)
  807eb8:	21c06326 	beq	r4,r7,808048 <_realloc_r+0x218>
  807ebc:	017fff84 	movi	r5,-2
  807ec0:	414a703a 	and	r5,r8,r5
  807ec4:	214b883a 	add	r5,r4,r5
  807ec8:	29800117 	ldw	r6,4(r5)
  807ecc:	3180004c 	andi	r6,r6,1
  807ed0:	30003f26 	beq	r6,zero,807fd0 <_realloc_r+0x1a0>
  807ed4:	1080004c 	andi	r2,r2,1
  807ed8:	10008326 	beq	r2,zero,8080e8 <_realloc_r+0x2b8>
  807edc:	900b883a 	mov	r5,r18
  807ee0:	a009883a 	mov	r4,r20
  807ee4:	08071740 	call	807174 <_malloc_r>
  807ee8:	1025883a 	mov	r18,r2
  807eec:	10011e26 	beq	r2,zero,808368 <_realloc_r+0x538>
  807ef0:	a93fff17 	ldw	r4,-4(r21)
  807ef4:	10fffe04 	addi	r3,r2,-8
  807ef8:	00bfff84 	movi	r2,-2
  807efc:	2084703a 	and	r2,r4,r2
  807f00:	9885883a 	add	r2,r19,r2
  807f04:	1880ee26 	beq	r3,r2,8082c0 <_realloc_r+0x490>
  807f08:	81bfff04 	addi	r6,r16,-4
  807f0c:	00800904 	movi	r2,36
  807f10:	1180b836 	bltu	r2,r6,8081f4 <_realloc_r+0x3c4>
  807f14:	00c004c4 	movi	r3,19
  807f18:	19809636 	bltu	r3,r6,808174 <_realloc_r+0x344>
  807f1c:	9005883a 	mov	r2,r18
  807f20:	a807883a 	mov	r3,r21
  807f24:	19000017 	ldw	r4,0(r3)
  807f28:	11000015 	stw	r4,0(r2)
  807f2c:	19000117 	ldw	r4,4(r3)
  807f30:	11000115 	stw	r4,4(r2)
  807f34:	18c00217 	ldw	r3,8(r3)
  807f38:	10c00215 	stw	r3,8(r2)
  807f3c:	a80b883a 	mov	r5,r21
  807f40:	a009883a 	mov	r4,r20
  807f44:	0808bfc0 	call	808bfc <_free_r>
  807f48:	a009883a 	mov	r4,r20
  807f4c:	0809ab80 	call	809ab8 <__malloc_unlock>
  807f50:	9005883a 	mov	r2,r18
  807f54:	00001206 	br	807fa0 <_realloc_r+0x170>
  807f58:	00c00404 	movi	r3,16
  807f5c:	1823883a 	mov	r17,r3
  807f60:	003fce06 	br	807e9c <__alt_mem_onchip_mem+0xff7ffe9c>
  807f64:	a825883a 	mov	r18,r21
  807f68:	8445c83a 	sub	r2,r16,r17
  807f6c:	00c003c4 	movi	r3,15
  807f70:	18802636 	bltu	r3,r2,80800c <_realloc_r+0x1dc>
  807f74:	99800117 	ldw	r6,4(r19)
  807f78:	9c07883a 	add	r3,r19,r16
  807f7c:	3180004c 	andi	r6,r6,1
  807f80:	3420b03a 	or	r16,r6,r16
  807f84:	9c000115 	stw	r16,4(r19)
  807f88:	18800117 	ldw	r2,4(r3)
  807f8c:	10800054 	ori	r2,r2,1
  807f90:	18800115 	stw	r2,4(r3)
  807f94:	a009883a 	mov	r4,r20
  807f98:	0809ab80 	call	809ab8 <__malloc_unlock>
  807f9c:	9005883a 	mov	r2,r18
  807fa0:	dfc00917 	ldw	ra,36(sp)
  807fa4:	df000817 	ldw	fp,32(sp)
  807fa8:	ddc00717 	ldw	r23,28(sp)
  807fac:	dd800617 	ldw	r22,24(sp)
  807fb0:	dd400517 	ldw	r21,20(sp)
  807fb4:	dd000417 	ldw	r20,16(sp)
  807fb8:	dcc00317 	ldw	r19,12(sp)
  807fbc:	dc800217 	ldw	r18,8(sp)
  807fc0:	dc400117 	ldw	r17,4(sp)
  807fc4:	dc000017 	ldw	r16,0(sp)
  807fc8:	dec00a04 	addi	sp,sp,40
  807fcc:	f800283a 	ret
  807fd0:	017fff04 	movi	r5,-4
  807fd4:	414a703a 	and	r5,r8,r5
  807fd8:	814d883a 	add	r6,r16,r5
  807fdc:	30c01f16 	blt	r6,r3,80805c <_realloc_r+0x22c>
  807fe0:	20800317 	ldw	r2,12(r4)
  807fe4:	20c00217 	ldw	r3,8(r4)
  807fe8:	a825883a 	mov	r18,r21
  807fec:	3021883a 	mov	r16,r6
  807ff0:	18800315 	stw	r2,12(r3)
  807ff4:	10c00215 	stw	r3,8(r2)
  807ff8:	003fdb06 	br	807f68 <__alt_mem_onchip_mem+0xff7fff68>
  807ffc:	00800304 	movi	r2,12
  808000:	a0800015 	stw	r2,0(r20)
  808004:	0005883a 	mov	r2,zero
  808008:	003fe506 	br	807fa0 <__alt_mem_onchip_mem+0xff7fffa0>
  80800c:	98c00117 	ldw	r3,4(r19)
  808010:	9c4b883a 	add	r5,r19,r17
  808014:	11000054 	ori	r4,r2,1
  808018:	18c0004c 	andi	r3,r3,1
  80801c:	1c62b03a 	or	r17,r3,r17
  808020:	9c400115 	stw	r17,4(r19)
  808024:	29000115 	stw	r4,4(r5)
  808028:	2885883a 	add	r2,r5,r2
  80802c:	10c00117 	ldw	r3,4(r2)
  808030:	29400204 	addi	r5,r5,8
  808034:	a009883a 	mov	r4,r20
  808038:	18c00054 	ori	r3,r3,1
  80803c:	10c00115 	stw	r3,4(r2)
  808040:	0808bfc0 	call	808bfc <_free_r>
  808044:	003fd306 	br	807f94 <__alt_mem_onchip_mem+0xff7fff94>
  808048:	017fff04 	movi	r5,-4
  80804c:	414a703a 	and	r5,r8,r5
  808050:	89800404 	addi	r6,r17,16
  808054:	8151883a 	add	r8,r16,r5
  808058:	4180590e 	bge	r8,r6,8081c0 <_realloc_r+0x390>
  80805c:	1080004c 	andi	r2,r2,1
  808060:	103f9e1e 	bne	r2,zero,807edc <__alt_mem_onchip_mem+0xff7ffedc>
  808064:	adbffe17 	ldw	r22,-8(r21)
  808068:	00bfff04 	movi	r2,-4
  80806c:	9dadc83a 	sub	r22,r19,r22
  808070:	b1800117 	ldw	r6,4(r22)
  808074:	3084703a 	and	r2,r6,r2
  808078:	20002026 	beq	r4,zero,8080fc <_realloc_r+0x2cc>
  80807c:	80af883a 	add	r23,r16,r2
  808080:	b96f883a 	add	r23,r23,r5
  808084:	21c05f26 	beq	r4,r7,808204 <_realloc_r+0x3d4>
  808088:	b8c01c16 	blt	r23,r3,8080fc <_realloc_r+0x2cc>
  80808c:	20800317 	ldw	r2,12(r4)
  808090:	20c00217 	ldw	r3,8(r4)
  808094:	81bfff04 	addi	r6,r16,-4
  808098:	01000904 	movi	r4,36
  80809c:	18800315 	stw	r2,12(r3)
  8080a0:	10c00215 	stw	r3,8(r2)
  8080a4:	b0c00217 	ldw	r3,8(r22)
  8080a8:	b0800317 	ldw	r2,12(r22)
  8080ac:	b4800204 	addi	r18,r22,8
  8080b0:	18800315 	stw	r2,12(r3)
  8080b4:	10c00215 	stw	r3,8(r2)
  8080b8:	21801b36 	bltu	r4,r6,808128 <_realloc_r+0x2f8>
  8080bc:	008004c4 	movi	r2,19
  8080c0:	1180352e 	bgeu	r2,r6,808198 <_realloc_r+0x368>
  8080c4:	a8800017 	ldw	r2,0(r21)
  8080c8:	b0800215 	stw	r2,8(r22)
  8080cc:	a8800117 	ldw	r2,4(r21)
  8080d0:	b0800315 	stw	r2,12(r22)
  8080d4:	008006c4 	movi	r2,27
  8080d8:	11807f36 	bltu	r2,r6,8082d8 <_realloc_r+0x4a8>
  8080dc:	b0800404 	addi	r2,r22,16
  8080e0:	ad400204 	addi	r21,r21,8
  8080e4:	00002d06 	br	80819c <_realloc_r+0x36c>
  8080e8:	adbffe17 	ldw	r22,-8(r21)
  8080ec:	00bfff04 	movi	r2,-4
  8080f0:	9dadc83a 	sub	r22,r19,r22
  8080f4:	b1000117 	ldw	r4,4(r22)
  8080f8:	2084703a 	and	r2,r4,r2
  8080fc:	b03f7726 	beq	r22,zero,807edc <__alt_mem_onchip_mem+0xff7ffedc>
  808100:	80af883a 	add	r23,r16,r2
  808104:	b8ff7516 	blt	r23,r3,807edc <__alt_mem_onchip_mem+0xff7ffedc>
  808108:	b0800317 	ldw	r2,12(r22)
  80810c:	b0c00217 	ldw	r3,8(r22)
  808110:	81bfff04 	addi	r6,r16,-4
  808114:	01000904 	movi	r4,36
  808118:	18800315 	stw	r2,12(r3)
  80811c:	10c00215 	stw	r3,8(r2)
  808120:	b4800204 	addi	r18,r22,8
  808124:	21bfe52e 	bgeu	r4,r6,8080bc <__alt_mem_onchip_mem+0xff8000bc>
  808128:	a80b883a 	mov	r5,r21
  80812c:	9009883a 	mov	r4,r18
  808130:	0807bac0 	call	807bac <memmove>
  808134:	b821883a 	mov	r16,r23
  808138:	b027883a 	mov	r19,r22
  80813c:	003f8a06 	br	807f68 <__alt_mem_onchip_mem+0xff7fff68>
  808140:	300b883a 	mov	r5,r6
  808144:	dfc00917 	ldw	ra,36(sp)
  808148:	df000817 	ldw	fp,32(sp)
  80814c:	ddc00717 	ldw	r23,28(sp)
  808150:	dd800617 	ldw	r22,24(sp)
  808154:	dd400517 	ldw	r21,20(sp)
  808158:	dd000417 	ldw	r20,16(sp)
  80815c:	dcc00317 	ldw	r19,12(sp)
  808160:	dc800217 	ldw	r18,8(sp)
  808164:	dc400117 	ldw	r17,4(sp)
  808168:	dc000017 	ldw	r16,0(sp)
  80816c:	dec00a04 	addi	sp,sp,40
  808170:	08071741 	jmpi	807174 <_malloc_r>
  808174:	a8c00017 	ldw	r3,0(r21)
  808178:	90c00015 	stw	r3,0(r18)
  80817c:	a8c00117 	ldw	r3,4(r21)
  808180:	90c00115 	stw	r3,4(r18)
  808184:	00c006c4 	movi	r3,27
  808188:	19804536 	bltu	r3,r6,8082a0 <_realloc_r+0x470>
  80818c:	90800204 	addi	r2,r18,8
  808190:	a8c00204 	addi	r3,r21,8
  808194:	003f6306 	br	807f24 <__alt_mem_onchip_mem+0xff7fff24>
  808198:	9005883a 	mov	r2,r18
  80819c:	a8c00017 	ldw	r3,0(r21)
  8081a0:	b821883a 	mov	r16,r23
  8081a4:	b027883a 	mov	r19,r22
  8081a8:	10c00015 	stw	r3,0(r2)
  8081ac:	a8c00117 	ldw	r3,4(r21)
  8081b0:	10c00115 	stw	r3,4(r2)
  8081b4:	a8c00217 	ldw	r3,8(r21)
  8081b8:	10c00215 	stw	r3,8(r2)
  8081bc:	003f6a06 	br	807f68 <__alt_mem_onchip_mem+0xff7fff68>
  8081c0:	9c67883a 	add	r19,r19,r17
  8081c4:	4445c83a 	sub	r2,r8,r17
  8081c8:	e4c00215 	stw	r19,8(fp)
  8081cc:	10800054 	ori	r2,r2,1
  8081d0:	98800115 	stw	r2,4(r19)
  8081d4:	a8bfff17 	ldw	r2,-4(r21)
  8081d8:	a009883a 	mov	r4,r20
  8081dc:	1080004c 	andi	r2,r2,1
  8081e0:	1462b03a 	or	r17,r2,r17
  8081e4:	ac7fff15 	stw	r17,-4(r21)
  8081e8:	0809ab80 	call	809ab8 <__malloc_unlock>
  8081ec:	a805883a 	mov	r2,r21
  8081f0:	003f6b06 	br	807fa0 <__alt_mem_onchip_mem+0xff7fffa0>
  8081f4:	a80b883a 	mov	r5,r21
  8081f8:	9009883a 	mov	r4,r18
  8081fc:	0807bac0 	call	807bac <memmove>
  808200:	003f4e06 	br	807f3c <__alt_mem_onchip_mem+0xff7fff3c>
  808204:	89000404 	addi	r4,r17,16
  808208:	b93fbc16 	blt	r23,r4,8080fc <__alt_mem_onchip_mem+0xff8000fc>
  80820c:	b0800317 	ldw	r2,12(r22)
  808210:	b0c00217 	ldw	r3,8(r22)
  808214:	81bfff04 	addi	r6,r16,-4
  808218:	01000904 	movi	r4,36
  80821c:	18800315 	stw	r2,12(r3)
  808220:	10c00215 	stw	r3,8(r2)
  808224:	b4800204 	addi	r18,r22,8
  808228:	21804336 	bltu	r4,r6,808338 <_realloc_r+0x508>
  80822c:	008004c4 	movi	r2,19
  808230:	11803f2e 	bgeu	r2,r6,808330 <_realloc_r+0x500>
  808234:	a8800017 	ldw	r2,0(r21)
  808238:	b0800215 	stw	r2,8(r22)
  80823c:	a8800117 	ldw	r2,4(r21)
  808240:	b0800315 	stw	r2,12(r22)
  808244:	008006c4 	movi	r2,27
  808248:	11803f36 	bltu	r2,r6,808348 <_realloc_r+0x518>
  80824c:	b0800404 	addi	r2,r22,16
  808250:	ad400204 	addi	r21,r21,8
  808254:	a8c00017 	ldw	r3,0(r21)
  808258:	10c00015 	stw	r3,0(r2)
  80825c:	a8c00117 	ldw	r3,4(r21)
  808260:	10c00115 	stw	r3,4(r2)
  808264:	a8c00217 	ldw	r3,8(r21)
  808268:	10c00215 	stw	r3,8(r2)
  80826c:	b447883a 	add	r3,r22,r17
  808270:	bc45c83a 	sub	r2,r23,r17
  808274:	e0c00215 	stw	r3,8(fp)
  808278:	10800054 	ori	r2,r2,1
  80827c:	18800115 	stw	r2,4(r3)
  808280:	b0800117 	ldw	r2,4(r22)
  808284:	a009883a 	mov	r4,r20
  808288:	1080004c 	andi	r2,r2,1
  80828c:	1462b03a 	or	r17,r2,r17
  808290:	b4400115 	stw	r17,4(r22)
  808294:	0809ab80 	call	809ab8 <__malloc_unlock>
  808298:	9005883a 	mov	r2,r18
  80829c:	003f4006 	br	807fa0 <__alt_mem_onchip_mem+0xff7fffa0>
  8082a0:	a8c00217 	ldw	r3,8(r21)
  8082a4:	90c00215 	stw	r3,8(r18)
  8082a8:	a8c00317 	ldw	r3,12(r21)
  8082ac:	90c00315 	stw	r3,12(r18)
  8082b0:	30801126 	beq	r6,r2,8082f8 <_realloc_r+0x4c8>
  8082b4:	90800404 	addi	r2,r18,16
  8082b8:	a8c00404 	addi	r3,r21,16
  8082bc:	003f1906 	br	807f24 <__alt_mem_onchip_mem+0xff7fff24>
  8082c0:	90ffff17 	ldw	r3,-4(r18)
  8082c4:	00bfff04 	movi	r2,-4
  8082c8:	a825883a 	mov	r18,r21
  8082cc:	1884703a 	and	r2,r3,r2
  8082d0:	80a1883a 	add	r16,r16,r2
  8082d4:	003f2406 	br	807f68 <__alt_mem_onchip_mem+0xff7fff68>
  8082d8:	a8800217 	ldw	r2,8(r21)
  8082dc:	b0800415 	stw	r2,16(r22)
  8082e0:	a8800317 	ldw	r2,12(r21)
  8082e4:	b0800515 	stw	r2,20(r22)
  8082e8:	31000a26 	beq	r6,r4,808314 <_realloc_r+0x4e4>
  8082ec:	b0800604 	addi	r2,r22,24
  8082f0:	ad400404 	addi	r21,r21,16
  8082f4:	003fa906 	br	80819c <__alt_mem_onchip_mem+0xff80019c>
  8082f8:	a9000417 	ldw	r4,16(r21)
  8082fc:	90800604 	addi	r2,r18,24
  808300:	a8c00604 	addi	r3,r21,24
  808304:	91000415 	stw	r4,16(r18)
  808308:	a9000517 	ldw	r4,20(r21)
  80830c:	91000515 	stw	r4,20(r18)
  808310:	003f0406 	br	807f24 <__alt_mem_onchip_mem+0xff7fff24>
  808314:	a8c00417 	ldw	r3,16(r21)
  808318:	ad400604 	addi	r21,r21,24
  80831c:	b0800804 	addi	r2,r22,32
  808320:	b0c00615 	stw	r3,24(r22)
  808324:	a8ffff17 	ldw	r3,-4(r21)
  808328:	b0c00715 	stw	r3,28(r22)
  80832c:	003f9b06 	br	80819c <__alt_mem_onchip_mem+0xff80019c>
  808330:	9005883a 	mov	r2,r18
  808334:	003fc706 	br	808254 <__alt_mem_onchip_mem+0xff800254>
  808338:	a80b883a 	mov	r5,r21
  80833c:	9009883a 	mov	r4,r18
  808340:	0807bac0 	call	807bac <memmove>
  808344:	003fc906 	br	80826c <__alt_mem_onchip_mem+0xff80026c>
  808348:	a8800217 	ldw	r2,8(r21)
  80834c:	b0800415 	stw	r2,16(r22)
  808350:	a8800317 	ldw	r2,12(r21)
  808354:	b0800515 	stw	r2,20(r22)
  808358:	31000726 	beq	r6,r4,808378 <_realloc_r+0x548>
  80835c:	b0800604 	addi	r2,r22,24
  808360:	ad400404 	addi	r21,r21,16
  808364:	003fbb06 	br	808254 <__alt_mem_onchip_mem+0xff800254>
  808368:	a009883a 	mov	r4,r20
  80836c:	0809ab80 	call	809ab8 <__malloc_unlock>
  808370:	0005883a 	mov	r2,zero
  808374:	003f0a06 	br	807fa0 <__alt_mem_onchip_mem+0xff7fffa0>
  808378:	a8c00417 	ldw	r3,16(r21)
  80837c:	ad400604 	addi	r21,r21,24
  808380:	b0800804 	addi	r2,r22,32
  808384:	b0c00615 	stw	r3,24(r22)
  808388:	a8ffff17 	ldw	r3,-4(r21)
  80838c:	b0c00715 	stw	r3,28(r22)
  808390:	003fb006 	br	808254 <__alt_mem_onchip_mem+0xff800254>

00808394 <_sbrk_r>:
  808394:	defffd04 	addi	sp,sp,-12
  808398:	dc000015 	stw	r16,0(sp)
  80839c:	04002074 	movhi	r16,129
  8083a0:	dc400115 	stw	r17,4(sp)
  8083a4:	84046a04 	addi	r16,r16,4520
  8083a8:	2023883a 	mov	r17,r4
  8083ac:	2809883a 	mov	r4,r5
  8083b0:	dfc00215 	stw	ra,8(sp)
  8083b4:	80000015 	stw	zero,0(r16)
  8083b8:	0809c780 	call	809c78 <sbrk>
  8083bc:	00ffffc4 	movi	r3,-1
  8083c0:	10c00526 	beq	r2,r3,8083d8 <_sbrk_r+0x44>
  8083c4:	dfc00217 	ldw	ra,8(sp)
  8083c8:	dc400117 	ldw	r17,4(sp)
  8083cc:	dc000017 	ldw	r16,0(sp)
  8083d0:	dec00304 	addi	sp,sp,12
  8083d4:	f800283a 	ret
  8083d8:	80c00017 	ldw	r3,0(r16)
  8083dc:	183ff926 	beq	r3,zero,8083c4 <__alt_mem_onchip_mem+0xff8003c4>
  8083e0:	88c00015 	stw	r3,0(r17)
  8083e4:	003ff706 	br	8083c4 <__alt_mem_onchip_mem+0xff8003c4>

008083e8 <__sread>:
  8083e8:	defffe04 	addi	sp,sp,-8
  8083ec:	dc000015 	stw	r16,0(sp)
  8083f0:	2821883a 	mov	r16,r5
  8083f4:	2940038f 	ldh	r5,14(r5)
  8083f8:	dfc00115 	stw	ra,4(sp)
  8083fc:	08091280 	call	809128 <_read_r>
  808400:	10000716 	blt	r2,zero,808420 <__sread+0x38>
  808404:	80c01417 	ldw	r3,80(r16)
  808408:	1887883a 	add	r3,r3,r2
  80840c:	80c01415 	stw	r3,80(r16)
  808410:	dfc00117 	ldw	ra,4(sp)
  808414:	dc000017 	ldw	r16,0(sp)
  808418:	dec00204 	addi	sp,sp,8
  80841c:	f800283a 	ret
  808420:	80c0030b 	ldhu	r3,12(r16)
  808424:	18fbffcc 	andi	r3,r3,61439
  808428:	80c0030d 	sth	r3,12(r16)
  80842c:	dfc00117 	ldw	ra,4(sp)
  808430:	dc000017 	ldw	r16,0(sp)
  808434:	dec00204 	addi	sp,sp,8
  808438:	f800283a 	ret

0080843c <__seofread>:
  80843c:	0005883a 	mov	r2,zero
  808440:	f800283a 	ret

00808444 <__swrite>:
  808444:	2880030b 	ldhu	r2,12(r5)
  808448:	defffb04 	addi	sp,sp,-20
  80844c:	dcc00315 	stw	r19,12(sp)
  808450:	dc800215 	stw	r18,8(sp)
  808454:	dc400115 	stw	r17,4(sp)
  808458:	dc000015 	stw	r16,0(sp)
  80845c:	dfc00415 	stw	ra,16(sp)
  808460:	10c0400c 	andi	r3,r2,256
  808464:	2821883a 	mov	r16,r5
  808468:	2023883a 	mov	r17,r4
  80846c:	3025883a 	mov	r18,r6
  808470:	3827883a 	mov	r19,r7
  808474:	18000526 	beq	r3,zero,80848c <__swrite+0x48>
  808478:	2940038f 	ldh	r5,14(r5)
  80847c:	01c00084 	movi	r7,2
  808480:	000d883a 	mov	r6,zero
  808484:	0808f0c0 	call	808f0c <_lseek_r>
  808488:	8080030b 	ldhu	r2,12(r16)
  80848c:	8140038f 	ldh	r5,14(r16)
  808490:	10bbffcc 	andi	r2,r2,61439
  808494:	980f883a 	mov	r7,r19
  808498:	900d883a 	mov	r6,r18
  80849c:	8809883a 	mov	r4,r17
  8084a0:	8080030d 	sth	r2,12(r16)
  8084a4:	dfc00417 	ldw	ra,16(sp)
  8084a8:	dcc00317 	ldw	r19,12(sp)
  8084ac:	dc800217 	ldw	r18,8(sp)
  8084b0:	dc400117 	ldw	r17,4(sp)
  8084b4:	dc000017 	ldw	r16,0(sp)
  8084b8:	dec00504 	addi	sp,sp,20
  8084bc:	08085241 	jmpi	808524 <_write_r>

008084c0 <__sseek>:
  8084c0:	defffe04 	addi	sp,sp,-8
  8084c4:	dc000015 	stw	r16,0(sp)
  8084c8:	2821883a 	mov	r16,r5
  8084cc:	2940038f 	ldh	r5,14(r5)
  8084d0:	dfc00115 	stw	ra,4(sp)
  8084d4:	0808f0c0 	call	808f0c <_lseek_r>
  8084d8:	00ffffc4 	movi	r3,-1
  8084dc:	10c00826 	beq	r2,r3,808500 <__sseek+0x40>
  8084e0:	80c0030b 	ldhu	r3,12(r16)
  8084e4:	80801415 	stw	r2,80(r16)
  8084e8:	18c40014 	ori	r3,r3,4096
  8084ec:	80c0030d 	sth	r3,12(r16)
  8084f0:	dfc00117 	ldw	ra,4(sp)
  8084f4:	dc000017 	ldw	r16,0(sp)
  8084f8:	dec00204 	addi	sp,sp,8
  8084fc:	f800283a 	ret
  808500:	80c0030b 	ldhu	r3,12(r16)
  808504:	18fbffcc 	andi	r3,r3,61439
  808508:	80c0030d 	sth	r3,12(r16)
  80850c:	dfc00117 	ldw	ra,4(sp)
  808510:	dc000017 	ldw	r16,0(sp)
  808514:	dec00204 	addi	sp,sp,8
  808518:	f800283a 	ret

0080851c <__sclose>:
  80851c:	2940038f 	ldh	r5,14(r5)
  808520:	08086d81 	jmpi	8086d8 <_close_r>

00808524 <_write_r>:
  808524:	defffd04 	addi	sp,sp,-12
  808528:	2805883a 	mov	r2,r5
  80852c:	dc000015 	stw	r16,0(sp)
  808530:	04002074 	movhi	r16,129
  808534:	dc400115 	stw	r17,4(sp)
  808538:	300b883a 	mov	r5,r6
  80853c:	84046a04 	addi	r16,r16,4520
  808540:	2023883a 	mov	r17,r4
  808544:	380d883a 	mov	r6,r7
  808548:	1009883a 	mov	r4,r2
  80854c:	dfc00215 	stw	ra,8(sp)
  808550:	80000015 	stw	zero,0(r16)
  808554:	0809f080 	call	809f08 <write>
  808558:	00ffffc4 	movi	r3,-1
  80855c:	10c00526 	beq	r2,r3,808574 <_write_r+0x50>
  808560:	dfc00217 	ldw	ra,8(sp)
  808564:	dc400117 	ldw	r17,4(sp)
  808568:	dc000017 	ldw	r16,0(sp)
  80856c:	dec00304 	addi	sp,sp,12
  808570:	f800283a 	ret
  808574:	80c00017 	ldw	r3,0(r16)
  808578:	183ff926 	beq	r3,zero,808560 <__alt_mem_onchip_mem+0xff800560>
  80857c:	88c00015 	stw	r3,0(r17)
  808580:	003ff706 	br	808560 <__alt_mem_onchip_mem+0xff800560>

00808584 <__swsetup_r>:
  808584:	00802074 	movhi	r2,129
  808588:	defffd04 	addi	sp,sp,-12
  80858c:	10bd4104 	addi	r2,r2,-2812
  808590:	dc400115 	stw	r17,4(sp)
  808594:	2023883a 	mov	r17,r4
  808598:	11000017 	ldw	r4,0(r2)
  80859c:	dc000015 	stw	r16,0(sp)
  8085a0:	dfc00215 	stw	ra,8(sp)
  8085a4:	2821883a 	mov	r16,r5
  8085a8:	20000226 	beq	r4,zero,8085b4 <__swsetup_r+0x30>
  8085ac:	20800e17 	ldw	r2,56(r4)
  8085b0:	10003126 	beq	r2,zero,808678 <__swsetup_r+0xf4>
  8085b4:	8080030b 	ldhu	r2,12(r16)
  8085b8:	10c0020c 	andi	r3,r2,8
  8085bc:	1009883a 	mov	r4,r2
  8085c0:	18000f26 	beq	r3,zero,808600 <__swsetup_r+0x7c>
  8085c4:	80c00417 	ldw	r3,16(r16)
  8085c8:	18001526 	beq	r3,zero,808620 <__swsetup_r+0x9c>
  8085cc:	1100004c 	andi	r4,r2,1
  8085d0:	20001c1e 	bne	r4,zero,808644 <__swsetup_r+0xc0>
  8085d4:	1080008c 	andi	r2,r2,2
  8085d8:	1000291e 	bne	r2,zero,808680 <__swsetup_r+0xfc>
  8085dc:	80800517 	ldw	r2,20(r16)
  8085e0:	80800215 	stw	r2,8(r16)
  8085e4:	18001c26 	beq	r3,zero,808658 <__swsetup_r+0xd4>
  8085e8:	0005883a 	mov	r2,zero
  8085ec:	dfc00217 	ldw	ra,8(sp)
  8085f0:	dc400117 	ldw	r17,4(sp)
  8085f4:	dc000017 	ldw	r16,0(sp)
  8085f8:	dec00304 	addi	sp,sp,12
  8085fc:	f800283a 	ret
  808600:	2080040c 	andi	r2,r4,16
  808604:	10002e26 	beq	r2,zero,8086c0 <__swsetup_r+0x13c>
  808608:	2080010c 	andi	r2,r4,4
  80860c:	10001e1e 	bne	r2,zero,808688 <__swsetup_r+0x104>
  808610:	80c00417 	ldw	r3,16(r16)
  808614:	20800214 	ori	r2,r4,8
  808618:	8080030d 	sth	r2,12(r16)
  80861c:	183feb1e 	bne	r3,zero,8085cc <__alt_mem_onchip_mem+0xff8005cc>
  808620:	1100a00c 	andi	r4,r2,640
  808624:	01408004 	movi	r5,512
  808628:	217fe826 	beq	r4,r5,8085cc <__alt_mem_onchip_mem+0xff8005cc>
  80862c:	800b883a 	mov	r5,r16
  808630:	8809883a 	mov	r4,r17
  808634:	0808f6c0 	call	808f6c <__smakebuf_r>
  808638:	8080030b 	ldhu	r2,12(r16)
  80863c:	80c00417 	ldw	r3,16(r16)
  808640:	003fe206 	br	8085cc <__alt_mem_onchip_mem+0xff8005cc>
  808644:	80800517 	ldw	r2,20(r16)
  808648:	80000215 	stw	zero,8(r16)
  80864c:	0085c83a 	sub	r2,zero,r2
  808650:	80800615 	stw	r2,24(r16)
  808654:	183fe41e 	bne	r3,zero,8085e8 <__alt_mem_onchip_mem+0xff8005e8>
  808658:	80c0030b 	ldhu	r3,12(r16)
  80865c:	0005883a 	mov	r2,zero
  808660:	1900200c 	andi	r4,r3,128
  808664:	203fe126 	beq	r4,zero,8085ec <__alt_mem_onchip_mem+0xff8005ec>
  808668:	18c01014 	ori	r3,r3,64
  80866c:	80c0030d 	sth	r3,12(r16)
  808670:	00bfffc4 	movi	r2,-1
  808674:	003fdd06 	br	8085ec <__alt_mem_onchip_mem+0xff8005ec>
  808678:	0806ae00 	call	806ae0 <__sinit>
  80867c:	003fcd06 	br	8085b4 <__alt_mem_onchip_mem+0xff8005b4>
  808680:	0005883a 	mov	r2,zero
  808684:	003fd606 	br	8085e0 <__alt_mem_onchip_mem+0xff8005e0>
  808688:	81400c17 	ldw	r5,48(r16)
  80868c:	28000626 	beq	r5,zero,8086a8 <__swsetup_r+0x124>
  808690:	80801004 	addi	r2,r16,64
  808694:	28800326 	beq	r5,r2,8086a4 <__swsetup_r+0x120>
  808698:	8809883a 	mov	r4,r17
  80869c:	0808bfc0 	call	808bfc <_free_r>
  8086a0:	8100030b 	ldhu	r4,12(r16)
  8086a4:	80000c15 	stw	zero,48(r16)
  8086a8:	80c00417 	ldw	r3,16(r16)
  8086ac:	00bff6c4 	movi	r2,-37
  8086b0:	1108703a 	and	r4,r2,r4
  8086b4:	80000115 	stw	zero,4(r16)
  8086b8:	80c00015 	stw	r3,0(r16)
  8086bc:	003fd506 	br	808614 <__alt_mem_onchip_mem+0xff800614>
  8086c0:	00800244 	movi	r2,9
  8086c4:	88800015 	stw	r2,0(r17)
  8086c8:	20801014 	ori	r2,r4,64
  8086cc:	8080030d 	sth	r2,12(r16)
  8086d0:	00bfffc4 	movi	r2,-1
  8086d4:	003fc506 	br	8085ec <__alt_mem_onchip_mem+0xff8005ec>

008086d8 <_close_r>:
  8086d8:	defffd04 	addi	sp,sp,-12
  8086dc:	dc000015 	stw	r16,0(sp)
  8086e0:	04002074 	movhi	r16,129
  8086e4:	dc400115 	stw	r17,4(sp)
  8086e8:	84046a04 	addi	r16,r16,4520
  8086ec:	2023883a 	mov	r17,r4
  8086f0:	2809883a 	mov	r4,r5
  8086f4:	dfc00215 	stw	ra,8(sp)
  8086f8:	80000015 	stw	zero,0(r16)
  8086fc:	08095540 	call	809554 <close>
  808700:	00ffffc4 	movi	r3,-1
  808704:	10c00526 	beq	r2,r3,80871c <_close_r+0x44>
  808708:	dfc00217 	ldw	ra,8(sp)
  80870c:	dc400117 	ldw	r17,4(sp)
  808710:	dc000017 	ldw	r16,0(sp)
  808714:	dec00304 	addi	sp,sp,12
  808718:	f800283a 	ret
  80871c:	80c00017 	ldw	r3,0(r16)
  808720:	183ff926 	beq	r3,zero,808708 <__alt_mem_onchip_mem+0xff800708>
  808724:	88c00015 	stw	r3,0(r17)
  808728:	003ff706 	br	808708 <__alt_mem_onchip_mem+0xff800708>

0080872c <_fclose_r>:
  80872c:	28003926 	beq	r5,zero,808814 <_fclose_r+0xe8>
  808730:	defffc04 	addi	sp,sp,-16
  808734:	dc400115 	stw	r17,4(sp)
  808738:	dc000015 	stw	r16,0(sp)
  80873c:	dfc00315 	stw	ra,12(sp)
  808740:	dc800215 	stw	r18,8(sp)
  808744:	2023883a 	mov	r17,r4
  808748:	2821883a 	mov	r16,r5
  80874c:	20000226 	beq	r4,zero,808758 <_fclose_r+0x2c>
  808750:	20800e17 	ldw	r2,56(r4)
  808754:	10002726 	beq	r2,zero,8087f4 <_fclose_r+0xc8>
  808758:	8080030f 	ldh	r2,12(r16)
  80875c:	1000071e 	bne	r2,zero,80877c <_fclose_r+0x50>
  808760:	0005883a 	mov	r2,zero
  808764:	dfc00317 	ldw	ra,12(sp)
  808768:	dc800217 	ldw	r18,8(sp)
  80876c:	dc400117 	ldw	r17,4(sp)
  808770:	dc000017 	ldw	r16,0(sp)
  808774:	dec00404 	addi	sp,sp,16
  808778:	f800283a 	ret
  80877c:	800b883a 	mov	r5,r16
  808780:	8809883a 	mov	r4,r17
  808784:	08088300 	call	808830 <__sflush_r>
  808788:	1025883a 	mov	r18,r2
  80878c:	80800b17 	ldw	r2,44(r16)
  808790:	10000426 	beq	r2,zero,8087a4 <_fclose_r+0x78>
  808794:	81400717 	ldw	r5,28(r16)
  808798:	8809883a 	mov	r4,r17
  80879c:	103ee83a 	callr	r2
  8087a0:	10001616 	blt	r2,zero,8087fc <_fclose_r+0xd0>
  8087a4:	8080030b 	ldhu	r2,12(r16)
  8087a8:	1080200c 	andi	r2,r2,128
  8087ac:	1000151e 	bne	r2,zero,808804 <_fclose_r+0xd8>
  8087b0:	81400c17 	ldw	r5,48(r16)
  8087b4:	28000526 	beq	r5,zero,8087cc <_fclose_r+0xa0>
  8087b8:	80801004 	addi	r2,r16,64
  8087bc:	28800226 	beq	r5,r2,8087c8 <_fclose_r+0x9c>
  8087c0:	8809883a 	mov	r4,r17
  8087c4:	0808bfc0 	call	808bfc <_free_r>
  8087c8:	80000c15 	stw	zero,48(r16)
  8087cc:	81401117 	ldw	r5,68(r16)
  8087d0:	28000326 	beq	r5,zero,8087e0 <_fclose_r+0xb4>
  8087d4:	8809883a 	mov	r4,r17
  8087d8:	0808bfc0 	call	808bfc <_free_r>
  8087dc:	80001115 	stw	zero,68(r16)
  8087e0:	0806af00 	call	806af0 <__sfp_lock_acquire>
  8087e4:	8000030d 	sth	zero,12(r16)
  8087e8:	0806af40 	call	806af4 <__sfp_lock_release>
  8087ec:	9005883a 	mov	r2,r18
  8087f0:	003fdc06 	br	808764 <__alt_mem_onchip_mem+0xff800764>
  8087f4:	0806ae00 	call	806ae0 <__sinit>
  8087f8:	003fd706 	br	808758 <__alt_mem_onchip_mem+0xff800758>
  8087fc:	04bfffc4 	movi	r18,-1
  808800:	003fe806 	br	8087a4 <__alt_mem_onchip_mem+0xff8007a4>
  808804:	81400417 	ldw	r5,16(r16)
  808808:	8809883a 	mov	r4,r17
  80880c:	0808bfc0 	call	808bfc <_free_r>
  808810:	003fe706 	br	8087b0 <__alt_mem_onchip_mem+0xff8007b0>
  808814:	0005883a 	mov	r2,zero
  808818:	f800283a 	ret

0080881c <fclose>:
  80881c:	00802074 	movhi	r2,129
  808820:	10bd4104 	addi	r2,r2,-2812
  808824:	200b883a 	mov	r5,r4
  808828:	11000017 	ldw	r4,0(r2)
  80882c:	080872c1 	jmpi	80872c <_fclose_r>

00808830 <__sflush_r>:
  808830:	2880030b 	ldhu	r2,12(r5)
  808834:	defffb04 	addi	sp,sp,-20
  808838:	dcc00315 	stw	r19,12(sp)
  80883c:	dc400115 	stw	r17,4(sp)
  808840:	dfc00415 	stw	ra,16(sp)
  808844:	dc800215 	stw	r18,8(sp)
  808848:	dc000015 	stw	r16,0(sp)
  80884c:	10c0020c 	andi	r3,r2,8
  808850:	2823883a 	mov	r17,r5
  808854:	2027883a 	mov	r19,r4
  808858:	1800311e 	bne	r3,zero,808920 <__sflush_r+0xf0>
  80885c:	28c00117 	ldw	r3,4(r5)
  808860:	10820014 	ori	r2,r2,2048
  808864:	2880030d 	sth	r2,12(r5)
  808868:	00c04b0e 	bge	zero,r3,808998 <__sflush_r+0x168>
  80886c:	8a000a17 	ldw	r8,40(r17)
  808870:	40002326 	beq	r8,zero,808900 <__sflush_r+0xd0>
  808874:	9c000017 	ldw	r16,0(r19)
  808878:	10c4000c 	andi	r3,r2,4096
  80887c:	98000015 	stw	zero,0(r19)
  808880:	18004826 	beq	r3,zero,8089a4 <__sflush_r+0x174>
  808884:	89801417 	ldw	r6,80(r17)
  808888:	10c0010c 	andi	r3,r2,4
  80888c:	18000626 	beq	r3,zero,8088a8 <__sflush_r+0x78>
  808890:	88c00117 	ldw	r3,4(r17)
  808894:	88800c17 	ldw	r2,48(r17)
  808898:	30cdc83a 	sub	r6,r6,r3
  80889c:	10000226 	beq	r2,zero,8088a8 <__sflush_r+0x78>
  8088a0:	88800f17 	ldw	r2,60(r17)
  8088a4:	308dc83a 	sub	r6,r6,r2
  8088a8:	89400717 	ldw	r5,28(r17)
  8088ac:	000f883a 	mov	r7,zero
  8088b0:	9809883a 	mov	r4,r19
  8088b4:	403ee83a 	callr	r8
  8088b8:	00ffffc4 	movi	r3,-1
  8088bc:	10c04426 	beq	r2,r3,8089d0 <__sflush_r+0x1a0>
  8088c0:	88c0030b 	ldhu	r3,12(r17)
  8088c4:	89000417 	ldw	r4,16(r17)
  8088c8:	88000115 	stw	zero,4(r17)
  8088cc:	197dffcc 	andi	r5,r3,63487
  8088d0:	8940030d 	sth	r5,12(r17)
  8088d4:	89000015 	stw	r4,0(r17)
  8088d8:	18c4000c 	andi	r3,r3,4096
  8088dc:	18002c1e 	bne	r3,zero,808990 <__sflush_r+0x160>
  8088e0:	89400c17 	ldw	r5,48(r17)
  8088e4:	9c000015 	stw	r16,0(r19)
  8088e8:	28000526 	beq	r5,zero,808900 <__sflush_r+0xd0>
  8088ec:	88801004 	addi	r2,r17,64
  8088f0:	28800226 	beq	r5,r2,8088fc <__sflush_r+0xcc>
  8088f4:	9809883a 	mov	r4,r19
  8088f8:	0808bfc0 	call	808bfc <_free_r>
  8088fc:	88000c15 	stw	zero,48(r17)
  808900:	0005883a 	mov	r2,zero
  808904:	dfc00417 	ldw	ra,16(sp)
  808908:	dcc00317 	ldw	r19,12(sp)
  80890c:	dc800217 	ldw	r18,8(sp)
  808910:	dc400117 	ldw	r17,4(sp)
  808914:	dc000017 	ldw	r16,0(sp)
  808918:	dec00504 	addi	sp,sp,20
  80891c:	f800283a 	ret
  808920:	2c800417 	ldw	r18,16(r5)
  808924:	903ff626 	beq	r18,zero,808900 <__alt_mem_onchip_mem+0xff800900>
  808928:	2c000017 	ldw	r16,0(r5)
  80892c:	108000cc 	andi	r2,r2,3
  808930:	2c800015 	stw	r18,0(r5)
  808934:	84a1c83a 	sub	r16,r16,r18
  808938:	1000131e 	bne	r2,zero,808988 <__sflush_r+0x158>
  80893c:	28800517 	ldw	r2,20(r5)
  808940:	88800215 	stw	r2,8(r17)
  808944:	04000316 	blt	zero,r16,808954 <__sflush_r+0x124>
  808948:	003fed06 	br	808900 <__alt_mem_onchip_mem+0xff800900>
  80894c:	90a5883a 	add	r18,r18,r2
  808950:	043feb0e 	bge	zero,r16,808900 <__alt_mem_onchip_mem+0xff800900>
  808954:	88800917 	ldw	r2,36(r17)
  808958:	89400717 	ldw	r5,28(r17)
  80895c:	800f883a 	mov	r7,r16
  808960:	900d883a 	mov	r6,r18
  808964:	9809883a 	mov	r4,r19
  808968:	103ee83a 	callr	r2
  80896c:	80a1c83a 	sub	r16,r16,r2
  808970:	00bff616 	blt	zero,r2,80894c <__alt_mem_onchip_mem+0xff80094c>
  808974:	88c0030b 	ldhu	r3,12(r17)
  808978:	00bfffc4 	movi	r2,-1
  80897c:	18c01014 	ori	r3,r3,64
  808980:	88c0030d 	sth	r3,12(r17)
  808984:	003fdf06 	br	808904 <__alt_mem_onchip_mem+0xff800904>
  808988:	0005883a 	mov	r2,zero
  80898c:	003fec06 	br	808940 <__alt_mem_onchip_mem+0xff800940>
  808990:	88801415 	stw	r2,80(r17)
  808994:	003fd206 	br	8088e0 <__alt_mem_onchip_mem+0xff8008e0>
  808998:	28c00f17 	ldw	r3,60(r5)
  80899c:	00ffb316 	blt	zero,r3,80886c <__alt_mem_onchip_mem+0xff80086c>
  8089a0:	003fd706 	br	808900 <__alt_mem_onchip_mem+0xff800900>
  8089a4:	89400717 	ldw	r5,28(r17)
  8089a8:	000d883a 	mov	r6,zero
  8089ac:	01c00044 	movi	r7,1
  8089b0:	9809883a 	mov	r4,r19
  8089b4:	403ee83a 	callr	r8
  8089b8:	100d883a 	mov	r6,r2
  8089bc:	00bfffc4 	movi	r2,-1
  8089c0:	30801426 	beq	r6,r2,808a14 <__sflush_r+0x1e4>
  8089c4:	8880030b 	ldhu	r2,12(r17)
  8089c8:	8a000a17 	ldw	r8,40(r17)
  8089cc:	003fae06 	br	808888 <__alt_mem_onchip_mem+0xff800888>
  8089d0:	98c00017 	ldw	r3,0(r19)
  8089d4:	183fba26 	beq	r3,zero,8088c0 <__alt_mem_onchip_mem+0xff8008c0>
  8089d8:	01000744 	movi	r4,29
  8089dc:	19000626 	beq	r3,r4,8089f8 <__sflush_r+0x1c8>
  8089e0:	01000584 	movi	r4,22
  8089e4:	19000426 	beq	r3,r4,8089f8 <__sflush_r+0x1c8>
  8089e8:	88c0030b 	ldhu	r3,12(r17)
  8089ec:	18c01014 	ori	r3,r3,64
  8089f0:	88c0030d 	sth	r3,12(r17)
  8089f4:	003fc306 	br	808904 <__alt_mem_onchip_mem+0xff800904>
  8089f8:	8880030b 	ldhu	r2,12(r17)
  8089fc:	88c00417 	ldw	r3,16(r17)
  808a00:	88000115 	stw	zero,4(r17)
  808a04:	10bdffcc 	andi	r2,r2,63487
  808a08:	8880030d 	sth	r2,12(r17)
  808a0c:	88c00015 	stw	r3,0(r17)
  808a10:	003fb306 	br	8088e0 <__alt_mem_onchip_mem+0xff8008e0>
  808a14:	98800017 	ldw	r2,0(r19)
  808a18:	103fea26 	beq	r2,zero,8089c4 <__alt_mem_onchip_mem+0xff8009c4>
  808a1c:	00c00744 	movi	r3,29
  808a20:	10c00226 	beq	r2,r3,808a2c <__sflush_r+0x1fc>
  808a24:	00c00584 	movi	r3,22
  808a28:	10c0031e 	bne	r2,r3,808a38 <__sflush_r+0x208>
  808a2c:	9c000015 	stw	r16,0(r19)
  808a30:	0005883a 	mov	r2,zero
  808a34:	003fb306 	br	808904 <__alt_mem_onchip_mem+0xff800904>
  808a38:	88c0030b 	ldhu	r3,12(r17)
  808a3c:	3005883a 	mov	r2,r6
  808a40:	18c01014 	ori	r3,r3,64
  808a44:	88c0030d 	sth	r3,12(r17)
  808a48:	003fae06 	br	808904 <__alt_mem_onchip_mem+0xff800904>

00808a4c <_fflush_r>:
  808a4c:	defffd04 	addi	sp,sp,-12
  808a50:	dc000115 	stw	r16,4(sp)
  808a54:	dfc00215 	stw	ra,8(sp)
  808a58:	2021883a 	mov	r16,r4
  808a5c:	20000226 	beq	r4,zero,808a68 <_fflush_r+0x1c>
  808a60:	20800e17 	ldw	r2,56(r4)
  808a64:	10000c26 	beq	r2,zero,808a98 <_fflush_r+0x4c>
  808a68:	2880030f 	ldh	r2,12(r5)
  808a6c:	1000051e 	bne	r2,zero,808a84 <_fflush_r+0x38>
  808a70:	0005883a 	mov	r2,zero
  808a74:	dfc00217 	ldw	ra,8(sp)
  808a78:	dc000117 	ldw	r16,4(sp)
  808a7c:	dec00304 	addi	sp,sp,12
  808a80:	f800283a 	ret
  808a84:	8009883a 	mov	r4,r16
  808a88:	dfc00217 	ldw	ra,8(sp)
  808a8c:	dc000117 	ldw	r16,4(sp)
  808a90:	dec00304 	addi	sp,sp,12
  808a94:	08088301 	jmpi	808830 <__sflush_r>
  808a98:	d9400015 	stw	r5,0(sp)
  808a9c:	0806ae00 	call	806ae0 <__sinit>
  808aa0:	d9400017 	ldw	r5,0(sp)
  808aa4:	003ff006 	br	808a68 <__alt_mem_onchip_mem+0xff800a68>

00808aa8 <fflush>:
  808aa8:	20000526 	beq	r4,zero,808ac0 <fflush+0x18>
  808aac:	00802074 	movhi	r2,129
  808ab0:	10bd4104 	addi	r2,r2,-2812
  808ab4:	200b883a 	mov	r5,r4
  808ab8:	11000017 	ldw	r4,0(r2)
  808abc:	0808a4c1 	jmpi	808a4c <_fflush_r>
  808ac0:	00802074 	movhi	r2,129
  808ac4:	10bd4004 	addi	r2,r2,-2816
  808ac8:	11000017 	ldw	r4,0(r2)
  808acc:	01402074 	movhi	r5,129
  808ad0:	29629304 	addi	r5,r5,-30132
  808ad4:	08070b01 	jmpi	8070b0 <_fwalk_reent>

00808ad8 <_malloc_trim_r>:
  808ad8:	defffb04 	addi	sp,sp,-20
  808adc:	dcc00315 	stw	r19,12(sp)
  808ae0:	04c02074 	movhi	r19,129
  808ae4:	dc800215 	stw	r18,8(sp)
  808ae8:	dc400115 	stw	r17,4(sp)
  808aec:	dc000015 	stw	r16,0(sp)
  808af0:	dfc00415 	stw	ra,16(sp)
  808af4:	2821883a 	mov	r16,r5
  808af8:	9cf74304 	addi	r19,r19,-8948
  808afc:	2025883a 	mov	r18,r4
  808b00:	0809a940 	call	809a94 <__malloc_lock>
  808b04:	98800217 	ldw	r2,8(r19)
  808b08:	14400117 	ldw	r17,4(r2)
  808b0c:	00bfff04 	movi	r2,-4
  808b10:	88a2703a 	and	r17,r17,r2
  808b14:	8c21c83a 	sub	r16,r17,r16
  808b18:	8403fbc4 	addi	r16,r16,4079
  808b1c:	8020d33a 	srli	r16,r16,12
  808b20:	0083ffc4 	movi	r2,4095
  808b24:	843fffc4 	addi	r16,r16,-1
  808b28:	8020933a 	slli	r16,r16,12
  808b2c:	1400060e 	bge	r2,r16,808b48 <_malloc_trim_r+0x70>
  808b30:	000b883a 	mov	r5,zero
  808b34:	9009883a 	mov	r4,r18
  808b38:	08083940 	call	808394 <_sbrk_r>
  808b3c:	98c00217 	ldw	r3,8(r19)
  808b40:	1c47883a 	add	r3,r3,r17
  808b44:	10c00a26 	beq	r2,r3,808b70 <_malloc_trim_r+0x98>
  808b48:	9009883a 	mov	r4,r18
  808b4c:	0809ab80 	call	809ab8 <__malloc_unlock>
  808b50:	0005883a 	mov	r2,zero
  808b54:	dfc00417 	ldw	ra,16(sp)
  808b58:	dcc00317 	ldw	r19,12(sp)
  808b5c:	dc800217 	ldw	r18,8(sp)
  808b60:	dc400117 	ldw	r17,4(sp)
  808b64:	dc000017 	ldw	r16,0(sp)
  808b68:	dec00504 	addi	sp,sp,20
  808b6c:	f800283a 	ret
  808b70:	040bc83a 	sub	r5,zero,r16
  808b74:	9009883a 	mov	r4,r18
  808b78:	08083940 	call	808394 <_sbrk_r>
  808b7c:	00ffffc4 	movi	r3,-1
  808b80:	10c00d26 	beq	r2,r3,808bb8 <_malloc_trim_r+0xe0>
  808b84:	00c02074 	movhi	r3,129
  808b88:	18c47204 	addi	r3,r3,4552
  808b8c:	18800017 	ldw	r2,0(r3)
  808b90:	99000217 	ldw	r4,8(r19)
  808b94:	8c23c83a 	sub	r17,r17,r16
  808b98:	8c400054 	ori	r17,r17,1
  808b9c:	1421c83a 	sub	r16,r2,r16
  808ba0:	24400115 	stw	r17,4(r4)
  808ba4:	9009883a 	mov	r4,r18
  808ba8:	1c000015 	stw	r16,0(r3)
  808bac:	0809ab80 	call	809ab8 <__malloc_unlock>
  808bb0:	00800044 	movi	r2,1
  808bb4:	003fe706 	br	808b54 <__alt_mem_onchip_mem+0xff800b54>
  808bb8:	000b883a 	mov	r5,zero
  808bbc:	9009883a 	mov	r4,r18
  808bc0:	08083940 	call	808394 <_sbrk_r>
  808bc4:	99000217 	ldw	r4,8(r19)
  808bc8:	014003c4 	movi	r5,15
  808bcc:	1107c83a 	sub	r3,r2,r4
  808bd0:	28ffdd0e 	bge	r5,r3,808b48 <__alt_mem_onchip_mem+0xff800b48>
  808bd4:	01402074 	movhi	r5,129
  808bd8:	297d4204 	addi	r5,r5,-2808
  808bdc:	29400017 	ldw	r5,0(r5)
  808be0:	18c00054 	ori	r3,r3,1
  808be4:	20c00115 	stw	r3,4(r4)
  808be8:	00c02074 	movhi	r3,129
  808bec:	1145c83a 	sub	r2,r2,r5
  808bf0:	18c47204 	addi	r3,r3,4552
  808bf4:	18800015 	stw	r2,0(r3)
  808bf8:	003fd306 	br	808b48 <__alt_mem_onchip_mem+0xff800b48>

00808bfc <_free_r>:
  808bfc:	28004126 	beq	r5,zero,808d04 <_free_r+0x108>
  808c00:	defffd04 	addi	sp,sp,-12
  808c04:	dc400115 	stw	r17,4(sp)
  808c08:	dc000015 	stw	r16,0(sp)
  808c0c:	2023883a 	mov	r17,r4
  808c10:	2821883a 	mov	r16,r5
  808c14:	dfc00215 	stw	ra,8(sp)
  808c18:	0809a940 	call	809a94 <__malloc_lock>
  808c1c:	81ffff17 	ldw	r7,-4(r16)
  808c20:	00bfff84 	movi	r2,-2
  808c24:	01002074 	movhi	r4,129
  808c28:	81bffe04 	addi	r6,r16,-8
  808c2c:	3884703a 	and	r2,r7,r2
  808c30:	21374304 	addi	r4,r4,-8948
  808c34:	308b883a 	add	r5,r6,r2
  808c38:	2a400117 	ldw	r9,4(r5)
  808c3c:	22000217 	ldw	r8,8(r4)
  808c40:	00ffff04 	movi	r3,-4
  808c44:	48c6703a 	and	r3,r9,r3
  808c48:	2a005726 	beq	r5,r8,808da8 <_free_r+0x1ac>
  808c4c:	28c00115 	stw	r3,4(r5)
  808c50:	39c0004c 	andi	r7,r7,1
  808c54:	3800091e 	bne	r7,zero,808c7c <_free_r+0x80>
  808c58:	823ffe17 	ldw	r8,-8(r16)
  808c5c:	22400204 	addi	r9,r4,8
  808c60:	320dc83a 	sub	r6,r6,r8
  808c64:	31c00217 	ldw	r7,8(r6)
  808c68:	1205883a 	add	r2,r2,r8
  808c6c:	3a406526 	beq	r7,r9,808e04 <_free_r+0x208>
  808c70:	32000317 	ldw	r8,12(r6)
  808c74:	3a000315 	stw	r8,12(r7)
  808c78:	41c00215 	stw	r7,8(r8)
  808c7c:	28cf883a 	add	r7,r5,r3
  808c80:	39c00117 	ldw	r7,4(r7)
  808c84:	39c0004c 	andi	r7,r7,1
  808c88:	38003a26 	beq	r7,zero,808d74 <_free_r+0x178>
  808c8c:	10c00054 	ori	r3,r2,1
  808c90:	30c00115 	stw	r3,4(r6)
  808c94:	3087883a 	add	r3,r6,r2
  808c98:	18800015 	stw	r2,0(r3)
  808c9c:	00c07fc4 	movi	r3,511
  808ca0:	18801936 	bltu	r3,r2,808d08 <_free_r+0x10c>
  808ca4:	1004d0fa 	srli	r2,r2,3
  808ca8:	01c00044 	movi	r7,1
  808cac:	21400117 	ldw	r5,4(r4)
  808cb0:	10c00044 	addi	r3,r2,1
  808cb4:	18c7883a 	add	r3,r3,r3
  808cb8:	1005d0ba 	srai	r2,r2,2
  808cbc:	18c7883a 	add	r3,r3,r3
  808cc0:	18c7883a 	add	r3,r3,r3
  808cc4:	1907883a 	add	r3,r3,r4
  808cc8:	3884983a 	sll	r2,r7,r2
  808ccc:	19c00017 	ldw	r7,0(r3)
  808cd0:	1a3ffe04 	addi	r8,r3,-8
  808cd4:	1144b03a 	or	r2,r2,r5
  808cd8:	32000315 	stw	r8,12(r6)
  808cdc:	31c00215 	stw	r7,8(r6)
  808ce0:	20800115 	stw	r2,4(r4)
  808ce4:	19800015 	stw	r6,0(r3)
  808ce8:	39800315 	stw	r6,12(r7)
  808cec:	8809883a 	mov	r4,r17
  808cf0:	dfc00217 	ldw	ra,8(sp)
  808cf4:	dc400117 	ldw	r17,4(sp)
  808cf8:	dc000017 	ldw	r16,0(sp)
  808cfc:	dec00304 	addi	sp,sp,12
  808d00:	0809ab81 	jmpi	809ab8 <__malloc_unlock>
  808d04:	f800283a 	ret
  808d08:	100ad27a 	srli	r5,r2,9
  808d0c:	00c00104 	movi	r3,4
  808d10:	19404a36 	bltu	r3,r5,808e3c <_free_r+0x240>
  808d14:	100ad1ba 	srli	r5,r2,6
  808d18:	28c00e44 	addi	r3,r5,57
  808d1c:	18c7883a 	add	r3,r3,r3
  808d20:	29400e04 	addi	r5,r5,56
  808d24:	18c7883a 	add	r3,r3,r3
  808d28:	18c7883a 	add	r3,r3,r3
  808d2c:	1909883a 	add	r4,r3,r4
  808d30:	20c00017 	ldw	r3,0(r4)
  808d34:	01c02074 	movhi	r7,129
  808d38:	213ffe04 	addi	r4,r4,-8
  808d3c:	39f74304 	addi	r7,r7,-8948
  808d40:	20c04426 	beq	r4,r3,808e54 <_free_r+0x258>
  808d44:	01ffff04 	movi	r7,-4
  808d48:	19400117 	ldw	r5,4(r3)
  808d4c:	29ca703a 	and	r5,r5,r7
  808d50:	1140022e 	bgeu	r2,r5,808d5c <_free_r+0x160>
  808d54:	18c00217 	ldw	r3,8(r3)
  808d58:	20fffb1e 	bne	r4,r3,808d48 <__alt_mem_onchip_mem+0xff800d48>
  808d5c:	19000317 	ldw	r4,12(r3)
  808d60:	31000315 	stw	r4,12(r6)
  808d64:	30c00215 	stw	r3,8(r6)
  808d68:	21800215 	stw	r6,8(r4)
  808d6c:	19800315 	stw	r6,12(r3)
  808d70:	003fde06 	br	808cec <__alt_mem_onchip_mem+0xff800cec>
  808d74:	29c00217 	ldw	r7,8(r5)
  808d78:	10c5883a 	add	r2,r2,r3
  808d7c:	00c02074 	movhi	r3,129
  808d80:	18f74504 	addi	r3,r3,-8940
  808d84:	38c03b26 	beq	r7,r3,808e74 <_free_r+0x278>
  808d88:	2a000317 	ldw	r8,12(r5)
  808d8c:	11400054 	ori	r5,r2,1
  808d90:	3087883a 	add	r3,r6,r2
  808d94:	3a000315 	stw	r8,12(r7)
  808d98:	41c00215 	stw	r7,8(r8)
  808d9c:	31400115 	stw	r5,4(r6)
  808da0:	18800015 	stw	r2,0(r3)
  808da4:	003fbd06 	br	808c9c <__alt_mem_onchip_mem+0xff800c9c>
  808da8:	39c0004c 	andi	r7,r7,1
  808dac:	10c5883a 	add	r2,r2,r3
  808db0:	3800071e 	bne	r7,zero,808dd0 <_free_r+0x1d4>
  808db4:	81fffe17 	ldw	r7,-8(r16)
  808db8:	31cdc83a 	sub	r6,r6,r7
  808dbc:	30c00317 	ldw	r3,12(r6)
  808dc0:	31400217 	ldw	r5,8(r6)
  808dc4:	11c5883a 	add	r2,r2,r7
  808dc8:	28c00315 	stw	r3,12(r5)
  808dcc:	19400215 	stw	r5,8(r3)
  808dd0:	10c00054 	ori	r3,r2,1
  808dd4:	30c00115 	stw	r3,4(r6)
  808dd8:	00c02074 	movhi	r3,129
  808ddc:	18fd4304 	addi	r3,r3,-2804
  808de0:	18c00017 	ldw	r3,0(r3)
  808de4:	21800215 	stw	r6,8(r4)
  808de8:	10ffc036 	bltu	r2,r3,808cec <__alt_mem_onchip_mem+0xff800cec>
  808dec:	00802074 	movhi	r2,129
  808df0:	10846904 	addi	r2,r2,4516
  808df4:	11400017 	ldw	r5,0(r2)
  808df8:	8809883a 	mov	r4,r17
  808dfc:	0808ad80 	call	808ad8 <_malloc_trim_r>
  808e00:	003fba06 	br	808cec <__alt_mem_onchip_mem+0xff800cec>
  808e04:	28c9883a 	add	r4,r5,r3
  808e08:	21000117 	ldw	r4,4(r4)
  808e0c:	2100004c 	andi	r4,r4,1
  808e10:	2000391e 	bne	r4,zero,808ef8 <_free_r+0x2fc>
  808e14:	29c00217 	ldw	r7,8(r5)
  808e18:	29000317 	ldw	r4,12(r5)
  808e1c:	1885883a 	add	r2,r3,r2
  808e20:	10c00054 	ori	r3,r2,1
  808e24:	39000315 	stw	r4,12(r7)
  808e28:	21c00215 	stw	r7,8(r4)
  808e2c:	30c00115 	stw	r3,4(r6)
  808e30:	308d883a 	add	r6,r6,r2
  808e34:	30800015 	stw	r2,0(r6)
  808e38:	003fac06 	br	808cec <__alt_mem_onchip_mem+0xff800cec>
  808e3c:	00c00504 	movi	r3,20
  808e40:	19401536 	bltu	r3,r5,808e98 <_free_r+0x29c>
  808e44:	28c01704 	addi	r3,r5,92
  808e48:	18c7883a 	add	r3,r3,r3
  808e4c:	294016c4 	addi	r5,r5,91
  808e50:	003fb406 	br	808d24 <__alt_mem_onchip_mem+0xff800d24>
  808e54:	280bd0ba 	srai	r5,r5,2
  808e58:	00c00044 	movi	r3,1
  808e5c:	38800117 	ldw	r2,4(r7)
  808e60:	194a983a 	sll	r5,r3,r5
  808e64:	2007883a 	mov	r3,r4
  808e68:	2884b03a 	or	r2,r5,r2
  808e6c:	38800115 	stw	r2,4(r7)
  808e70:	003fbb06 	br	808d60 <__alt_mem_onchip_mem+0xff800d60>
  808e74:	21800515 	stw	r6,20(r4)
  808e78:	21800415 	stw	r6,16(r4)
  808e7c:	10c00054 	ori	r3,r2,1
  808e80:	31c00315 	stw	r7,12(r6)
  808e84:	31c00215 	stw	r7,8(r6)
  808e88:	30c00115 	stw	r3,4(r6)
  808e8c:	308d883a 	add	r6,r6,r2
  808e90:	30800015 	stw	r2,0(r6)
  808e94:	003f9506 	br	808cec <__alt_mem_onchip_mem+0xff800cec>
  808e98:	00c01504 	movi	r3,84
  808e9c:	19400536 	bltu	r3,r5,808eb4 <_free_r+0x2b8>
  808ea0:	100ad33a 	srli	r5,r2,12
  808ea4:	28c01bc4 	addi	r3,r5,111
  808ea8:	18c7883a 	add	r3,r3,r3
  808eac:	29401b84 	addi	r5,r5,110
  808eb0:	003f9c06 	br	808d24 <__alt_mem_onchip_mem+0xff800d24>
  808eb4:	00c05504 	movi	r3,340
  808eb8:	19400536 	bltu	r3,r5,808ed0 <_free_r+0x2d4>
  808ebc:	100ad3fa 	srli	r5,r2,15
  808ec0:	28c01e04 	addi	r3,r5,120
  808ec4:	18c7883a 	add	r3,r3,r3
  808ec8:	29401dc4 	addi	r5,r5,119
  808ecc:	003f9506 	br	808d24 <__alt_mem_onchip_mem+0xff800d24>
  808ed0:	00c15504 	movi	r3,1364
  808ed4:	19400536 	bltu	r3,r5,808eec <_free_r+0x2f0>
  808ed8:	100ad4ba 	srli	r5,r2,18
  808edc:	28c01f44 	addi	r3,r5,125
  808ee0:	18c7883a 	add	r3,r3,r3
  808ee4:	29401f04 	addi	r5,r5,124
  808ee8:	003f8e06 	br	808d24 <__alt_mem_onchip_mem+0xff800d24>
  808eec:	00c03f84 	movi	r3,254
  808ef0:	01401f84 	movi	r5,126
  808ef4:	003f8b06 	br	808d24 <__alt_mem_onchip_mem+0xff800d24>
  808ef8:	10c00054 	ori	r3,r2,1
  808efc:	30c00115 	stw	r3,4(r6)
  808f00:	308d883a 	add	r6,r6,r2
  808f04:	30800015 	stw	r2,0(r6)
  808f08:	003f7806 	br	808cec <__alt_mem_onchip_mem+0xff800cec>

00808f0c <_lseek_r>:
  808f0c:	defffd04 	addi	sp,sp,-12
  808f10:	2805883a 	mov	r2,r5
  808f14:	dc000015 	stw	r16,0(sp)
  808f18:	04002074 	movhi	r16,129
  808f1c:	dc400115 	stw	r17,4(sp)
  808f20:	300b883a 	mov	r5,r6
  808f24:	84046a04 	addi	r16,r16,4520
  808f28:	2023883a 	mov	r17,r4
  808f2c:	380d883a 	mov	r6,r7
  808f30:	1009883a 	mov	r4,r2
  808f34:	dfc00215 	stw	ra,8(sp)
  808f38:	80000015 	stw	zero,0(r16)
  808f3c:	08099440 	call	809944 <lseek>
  808f40:	00ffffc4 	movi	r3,-1
  808f44:	10c00526 	beq	r2,r3,808f5c <_lseek_r+0x50>
  808f48:	dfc00217 	ldw	ra,8(sp)
  808f4c:	dc400117 	ldw	r17,4(sp)
  808f50:	dc000017 	ldw	r16,0(sp)
  808f54:	dec00304 	addi	sp,sp,12
  808f58:	f800283a 	ret
  808f5c:	80c00017 	ldw	r3,0(r16)
  808f60:	183ff926 	beq	r3,zero,808f48 <__alt_mem_onchip_mem+0xff800f48>
  808f64:	88c00015 	stw	r3,0(r17)
  808f68:	003ff706 	br	808f48 <__alt_mem_onchip_mem+0xff800f48>

00808f6c <__smakebuf_r>:
  808f6c:	2880030b 	ldhu	r2,12(r5)
  808f70:	10c0008c 	andi	r3,r2,2
  808f74:	1800411e 	bne	r3,zero,80907c <__smakebuf_r+0x110>
  808f78:	deffec04 	addi	sp,sp,-80
  808f7c:	dc000f15 	stw	r16,60(sp)
  808f80:	2821883a 	mov	r16,r5
  808f84:	2940038f 	ldh	r5,14(r5)
  808f88:	dc401015 	stw	r17,64(sp)
  808f8c:	dfc01315 	stw	ra,76(sp)
  808f90:	dcc01215 	stw	r19,72(sp)
  808f94:	dc801115 	stw	r18,68(sp)
  808f98:	2023883a 	mov	r17,r4
  808f9c:	28001c16 	blt	r5,zero,809010 <__smakebuf_r+0xa4>
  808fa0:	d80d883a 	mov	r6,sp
  808fa4:	08091880 	call	809188 <_fstat_r>
  808fa8:	10001816 	blt	r2,zero,80900c <__smakebuf_r+0xa0>
  808fac:	d8800117 	ldw	r2,4(sp)
  808fb0:	00e00014 	movui	r3,32768
  808fb4:	10bc000c 	andi	r2,r2,61440
  808fb8:	14c80020 	cmpeqi	r19,r2,8192
  808fbc:	10c03726 	beq	r2,r3,80909c <__smakebuf_r+0x130>
  808fc0:	80c0030b 	ldhu	r3,12(r16)
  808fc4:	18c20014 	ori	r3,r3,2048
  808fc8:	80c0030d 	sth	r3,12(r16)
  808fcc:	00c80004 	movi	r3,8192
  808fd0:	10c0521e 	bne	r2,r3,80911c <__smakebuf_r+0x1b0>
  808fd4:	8140038f 	ldh	r5,14(r16)
  808fd8:	8809883a 	mov	r4,r17
  808fdc:	08091e40 	call	8091e4 <_isatty_r>
  808fe0:	10004c26 	beq	r2,zero,809114 <__smakebuf_r+0x1a8>
  808fe4:	8080030b 	ldhu	r2,12(r16)
  808fe8:	80c010c4 	addi	r3,r16,67
  808fec:	80c00015 	stw	r3,0(r16)
  808ff0:	10800054 	ori	r2,r2,1
  808ff4:	8080030d 	sth	r2,12(r16)
  808ff8:	00800044 	movi	r2,1
  808ffc:	80c00415 	stw	r3,16(r16)
  809000:	80800515 	stw	r2,20(r16)
  809004:	04810004 	movi	r18,1024
  809008:	00000706 	br	809028 <__smakebuf_r+0xbc>
  80900c:	8080030b 	ldhu	r2,12(r16)
  809010:	10c0200c 	andi	r3,r2,128
  809014:	18001f1e 	bne	r3,zero,809094 <__smakebuf_r+0x128>
  809018:	04810004 	movi	r18,1024
  80901c:	10820014 	ori	r2,r2,2048
  809020:	8080030d 	sth	r2,12(r16)
  809024:	0027883a 	mov	r19,zero
  809028:	900b883a 	mov	r5,r18
  80902c:	8809883a 	mov	r4,r17
  809030:	08071740 	call	807174 <_malloc_r>
  809034:	10002c26 	beq	r2,zero,8090e8 <__smakebuf_r+0x17c>
  809038:	80c0030b 	ldhu	r3,12(r16)
  80903c:	01002034 	movhi	r4,128
  809040:	2119e604 	addi	r4,r4,26520
  809044:	89000f15 	stw	r4,60(r17)
  809048:	18c02014 	ori	r3,r3,128
  80904c:	80c0030d 	sth	r3,12(r16)
  809050:	80800015 	stw	r2,0(r16)
  809054:	80800415 	stw	r2,16(r16)
  809058:	84800515 	stw	r18,20(r16)
  80905c:	98001a1e 	bne	r19,zero,8090c8 <__smakebuf_r+0x15c>
  809060:	dfc01317 	ldw	ra,76(sp)
  809064:	dcc01217 	ldw	r19,72(sp)
  809068:	dc801117 	ldw	r18,68(sp)
  80906c:	dc401017 	ldw	r17,64(sp)
  809070:	dc000f17 	ldw	r16,60(sp)
  809074:	dec01404 	addi	sp,sp,80
  809078:	f800283a 	ret
  80907c:	288010c4 	addi	r2,r5,67
  809080:	28800015 	stw	r2,0(r5)
  809084:	28800415 	stw	r2,16(r5)
  809088:	00800044 	movi	r2,1
  80908c:	28800515 	stw	r2,20(r5)
  809090:	f800283a 	ret
  809094:	04801004 	movi	r18,64
  809098:	003fe006 	br	80901c <__alt_mem_onchip_mem+0xff80101c>
  80909c:	81000a17 	ldw	r4,40(r16)
  8090a0:	00c02074 	movhi	r3,129
  8090a4:	18e13004 	addi	r3,r3,-31552
  8090a8:	20ffc51e 	bne	r4,r3,808fc0 <__alt_mem_onchip_mem+0xff800fc0>
  8090ac:	8080030b 	ldhu	r2,12(r16)
  8090b0:	04810004 	movi	r18,1024
  8090b4:	84801315 	stw	r18,76(r16)
  8090b8:	1484b03a 	or	r2,r2,r18
  8090bc:	8080030d 	sth	r2,12(r16)
  8090c0:	0027883a 	mov	r19,zero
  8090c4:	003fd806 	br	809028 <__alt_mem_onchip_mem+0xff801028>
  8090c8:	8140038f 	ldh	r5,14(r16)
  8090cc:	8809883a 	mov	r4,r17
  8090d0:	08091e40 	call	8091e4 <_isatty_r>
  8090d4:	103fe226 	beq	r2,zero,809060 <__alt_mem_onchip_mem+0xff801060>
  8090d8:	8080030b 	ldhu	r2,12(r16)
  8090dc:	10800054 	ori	r2,r2,1
  8090e0:	8080030d 	sth	r2,12(r16)
  8090e4:	003fde06 	br	809060 <__alt_mem_onchip_mem+0xff801060>
  8090e8:	8080030b 	ldhu	r2,12(r16)
  8090ec:	10c0800c 	andi	r3,r2,512
  8090f0:	183fdb1e 	bne	r3,zero,809060 <__alt_mem_onchip_mem+0xff801060>
  8090f4:	10800094 	ori	r2,r2,2
  8090f8:	80c010c4 	addi	r3,r16,67
  8090fc:	8080030d 	sth	r2,12(r16)
  809100:	00800044 	movi	r2,1
  809104:	80c00015 	stw	r3,0(r16)
  809108:	80c00415 	stw	r3,16(r16)
  80910c:	80800515 	stw	r2,20(r16)
  809110:	003fd306 	br	809060 <__alt_mem_onchip_mem+0xff801060>
  809114:	04810004 	movi	r18,1024
  809118:	003fc306 	br	809028 <__alt_mem_onchip_mem+0xff801028>
  80911c:	0027883a 	mov	r19,zero
  809120:	04810004 	movi	r18,1024
  809124:	003fc006 	br	809028 <__alt_mem_onchip_mem+0xff801028>

00809128 <_read_r>:
  809128:	defffd04 	addi	sp,sp,-12
  80912c:	2805883a 	mov	r2,r5
  809130:	dc000015 	stw	r16,0(sp)
  809134:	04002074 	movhi	r16,129
  809138:	dc400115 	stw	r17,4(sp)
  80913c:	300b883a 	mov	r5,r6
  809140:	84046a04 	addi	r16,r16,4520
  809144:	2023883a 	mov	r17,r4
  809148:	380d883a 	mov	r6,r7
  80914c:	1009883a 	mov	r4,r2
  809150:	dfc00215 	stw	ra,8(sp)
  809154:	80000015 	stw	zero,0(r16)
  809158:	0809b180 	call	809b18 <read>
  80915c:	00ffffc4 	movi	r3,-1
  809160:	10c00526 	beq	r2,r3,809178 <_read_r+0x50>
  809164:	dfc00217 	ldw	ra,8(sp)
  809168:	dc400117 	ldw	r17,4(sp)
  80916c:	dc000017 	ldw	r16,0(sp)
  809170:	dec00304 	addi	sp,sp,12
  809174:	f800283a 	ret
  809178:	80c00017 	ldw	r3,0(r16)
  80917c:	183ff926 	beq	r3,zero,809164 <__alt_mem_onchip_mem+0xff801164>
  809180:	88c00015 	stw	r3,0(r17)
  809184:	003ff706 	br	809164 <__alt_mem_onchip_mem+0xff801164>

00809188 <_fstat_r>:
  809188:	defffd04 	addi	sp,sp,-12
  80918c:	2805883a 	mov	r2,r5
  809190:	dc000015 	stw	r16,0(sp)
  809194:	04002074 	movhi	r16,129
  809198:	dc400115 	stw	r17,4(sp)
  80919c:	84046a04 	addi	r16,r16,4520
  8091a0:	2023883a 	mov	r17,r4
  8091a4:	300b883a 	mov	r5,r6
  8091a8:	1009883a 	mov	r4,r2
  8091ac:	dfc00215 	stw	ra,8(sp)
  8091b0:	80000015 	stw	zero,0(r16)
  8091b4:	080968c0 	call	80968c <fstat>
  8091b8:	00ffffc4 	movi	r3,-1
  8091bc:	10c00526 	beq	r2,r3,8091d4 <_fstat_r+0x4c>
  8091c0:	dfc00217 	ldw	ra,8(sp)
  8091c4:	dc400117 	ldw	r17,4(sp)
  8091c8:	dc000017 	ldw	r16,0(sp)
  8091cc:	dec00304 	addi	sp,sp,12
  8091d0:	f800283a 	ret
  8091d4:	80c00017 	ldw	r3,0(r16)
  8091d8:	183ff926 	beq	r3,zero,8091c0 <__alt_mem_onchip_mem+0xff8011c0>
  8091dc:	88c00015 	stw	r3,0(r17)
  8091e0:	003ff706 	br	8091c0 <__alt_mem_onchip_mem+0xff8011c0>

008091e4 <_isatty_r>:
  8091e4:	defffd04 	addi	sp,sp,-12
  8091e8:	dc000015 	stw	r16,0(sp)
  8091ec:	04002074 	movhi	r16,129
  8091f0:	dc400115 	stw	r17,4(sp)
  8091f4:	84046a04 	addi	r16,r16,4520
  8091f8:	2023883a 	mov	r17,r4
  8091fc:	2809883a 	mov	r4,r5
  809200:	dfc00215 	stw	ra,8(sp)
  809204:	80000015 	stw	zero,0(r16)
  809208:	08097780 	call	809778 <isatty>
  80920c:	00ffffc4 	movi	r3,-1
  809210:	10c00526 	beq	r2,r3,809228 <_isatty_r+0x44>
  809214:	dfc00217 	ldw	ra,8(sp)
  809218:	dc400117 	ldw	r17,4(sp)
  80921c:	dc000017 	ldw	r16,0(sp)
  809220:	dec00304 	addi	sp,sp,12
  809224:	f800283a 	ret
  809228:	80c00017 	ldw	r3,0(r16)
  80922c:	183ff926 	beq	r3,zero,809214 <__alt_mem_onchip_mem+0xff801214>
  809230:	88c00015 	stw	r3,0(r17)
  809234:	003ff706 	br	809214 <__alt_mem_onchip_mem+0xff801214>

00809238 <__divsi3>:
  809238:	20001b16 	blt	r4,zero,8092a8 <__divsi3+0x70>
  80923c:	000f883a 	mov	r7,zero
  809240:	28001616 	blt	r5,zero,80929c <__divsi3+0x64>
  809244:	200d883a 	mov	r6,r4
  809248:	29001a2e 	bgeu	r5,r4,8092b4 <__divsi3+0x7c>
  80924c:	00800804 	movi	r2,32
  809250:	00c00044 	movi	r3,1
  809254:	00000106 	br	80925c <__divsi3+0x24>
  809258:	10000d26 	beq	r2,zero,809290 <__divsi3+0x58>
  80925c:	294b883a 	add	r5,r5,r5
  809260:	10bfffc4 	addi	r2,r2,-1
  809264:	18c7883a 	add	r3,r3,r3
  809268:	293ffb36 	bltu	r5,r4,809258 <__alt_mem_onchip_mem+0xff801258>
  80926c:	0005883a 	mov	r2,zero
  809270:	18000726 	beq	r3,zero,809290 <__divsi3+0x58>
  809274:	0005883a 	mov	r2,zero
  809278:	31400236 	bltu	r6,r5,809284 <__divsi3+0x4c>
  80927c:	314dc83a 	sub	r6,r6,r5
  809280:	10c4b03a 	or	r2,r2,r3
  809284:	1806d07a 	srli	r3,r3,1
  809288:	280ad07a 	srli	r5,r5,1
  80928c:	183ffa1e 	bne	r3,zero,809278 <__alt_mem_onchip_mem+0xff801278>
  809290:	38000126 	beq	r7,zero,809298 <__divsi3+0x60>
  809294:	0085c83a 	sub	r2,zero,r2
  809298:	f800283a 	ret
  80929c:	014bc83a 	sub	r5,zero,r5
  8092a0:	39c0005c 	xori	r7,r7,1
  8092a4:	003fe706 	br	809244 <__alt_mem_onchip_mem+0xff801244>
  8092a8:	0109c83a 	sub	r4,zero,r4
  8092ac:	01c00044 	movi	r7,1
  8092b0:	003fe306 	br	809240 <__alt_mem_onchip_mem+0xff801240>
  8092b4:	00c00044 	movi	r3,1
  8092b8:	003fee06 	br	809274 <__alt_mem_onchip_mem+0xff801274>

008092bc <__modsi3>:
  8092bc:	20001716 	blt	r4,zero,80931c <__modsi3+0x60>
  8092c0:	000f883a 	mov	r7,zero
  8092c4:	2005883a 	mov	r2,r4
  8092c8:	28001216 	blt	r5,zero,809314 <__modsi3+0x58>
  8092cc:	2900162e 	bgeu	r5,r4,809328 <__modsi3+0x6c>
  8092d0:	01800804 	movi	r6,32
  8092d4:	00c00044 	movi	r3,1
  8092d8:	00000106 	br	8092e0 <__modsi3+0x24>
  8092dc:	30000a26 	beq	r6,zero,809308 <__modsi3+0x4c>
  8092e0:	294b883a 	add	r5,r5,r5
  8092e4:	31bfffc4 	addi	r6,r6,-1
  8092e8:	18c7883a 	add	r3,r3,r3
  8092ec:	293ffb36 	bltu	r5,r4,8092dc <__alt_mem_onchip_mem+0xff8012dc>
  8092f0:	18000526 	beq	r3,zero,809308 <__modsi3+0x4c>
  8092f4:	1806d07a 	srli	r3,r3,1
  8092f8:	11400136 	bltu	r2,r5,809300 <__modsi3+0x44>
  8092fc:	1145c83a 	sub	r2,r2,r5
  809300:	280ad07a 	srli	r5,r5,1
  809304:	183ffb1e 	bne	r3,zero,8092f4 <__alt_mem_onchip_mem+0xff8012f4>
  809308:	38000126 	beq	r7,zero,809310 <__modsi3+0x54>
  80930c:	0085c83a 	sub	r2,zero,r2
  809310:	f800283a 	ret
  809314:	014bc83a 	sub	r5,zero,r5
  809318:	003fec06 	br	8092cc <__alt_mem_onchip_mem+0xff8012cc>
  80931c:	0109c83a 	sub	r4,zero,r4
  809320:	01c00044 	movi	r7,1
  809324:	003fe706 	br	8092c4 <__alt_mem_onchip_mem+0xff8012c4>
  809328:	00c00044 	movi	r3,1
  80932c:	003ff106 	br	8092f4 <__alt_mem_onchip_mem+0xff8012f4>

00809330 <__udivsi3>:
  809330:	200d883a 	mov	r6,r4
  809334:	2900152e 	bgeu	r5,r4,80938c <__udivsi3+0x5c>
  809338:	28001416 	blt	r5,zero,80938c <__udivsi3+0x5c>
  80933c:	00800804 	movi	r2,32
  809340:	00c00044 	movi	r3,1
  809344:	00000206 	br	809350 <__udivsi3+0x20>
  809348:	10000e26 	beq	r2,zero,809384 <__udivsi3+0x54>
  80934c:	28000516 	blt	r5,zero,809364 <__udivsi3+0x34>
  809350:	294b883a 	add	r5,r5,r5
  809354:	10bfffc4 	addi	r2,r2,-1
  809358:	18c7883a 	add	r3,r3,r3
  80935c:	293ffa36 	bltu	r5,r4,809348 <__alt_mem_onchip_mem+0xff801348>
  809360:	18000826 	beq	r3,zero,809384 <__udivsi3+0x54>
  809364:	0005883a 	mov	r2,zero
  809368:	31400236 	bltu	r6,r5,809374 <__udivsi3+0x44>
  80936c:	314dc83a 	sub	r6,r6,r5
  809370:	10c4b03a 	or	r2,r2,r3
  809374:	1806d07a 	srli	r3,r3,1
  809378:	280ad07a 	srli	r5,r5,1
  80937c:	183ffa1e 	bne	r3,zero,809368 <__alt_mem_onchip_mem+0xff801368>
  809380:	f800283a 	ret
  809384:	0005883a 	mov	r2,zero
  809388:	f800283a 	ret
  80938c:	00c00044 	movi	r3,1
  809390:	003ff406 	br	809364 <__alt_mem_onchip_mem+0xff801364>

00809394 <__umodsi3>:
  809394:	2005883a 	mov	r2,r4
  809398:	2900122e 	bgeu	r5,r4,8093e4 <__umodsi3+0x50>
  80939c:	28001116 	blt	r5,zero,8093e4 <__umodsi3+0x50>
  8093a0:	01800804 	movi	r6,32
  8093a4:	00c00044 	movi	r3,1
  8093a8:	00000206 	br	8093b4 <__umodsi3+0x20>
  8093ac:	30000c26 	beq	r6,zero,8093e0 <__umodsi3+0x4c>
  8093b0:	28000516 	blt	r5,zero,8093c8 <__umodsi3+0x34>
  8093b4:	294b883a 	add	r5,r5,r5
  8093b8:	31bfffc4 	addi	r6,r6,-1
  8093bc:	18c7883a 	add	r3,r3,r3
  8093c0:	293ffa36 	bltu	r5,r4,8093ac <__alt_mem_onchip_mem+0xff8013ac>
  8093c4:	18000626 	beq	r3,zero,8093e0 <__umodsi3+0x4c>
  8093c8:	1806d07a 	srli	r3,r3,1
  8093cc:	11400136 	bltu	r2,r5,8093d4 <__umodsi3+0x40>
  8093d0:	1145c83a 	sub	r2,r2,r5
  8093d4:	280ad07a 	srli	r5,r5,1
  8093d8:	183ffb1e 	bne	r3,zero,8093c8 <__alt_mem_onchip_mem+0xff8013c8>
  8093dc:	f800283a 	ret
  8093e0:	f800283a 	ret
  8093e4:	00c00044 	movi	r3,1
  8093e8:	003ff706 	br	8093c8 <__alt_mem_onchip_mem+0xff8013c8>

008093ec <alt_alarm_start>:
 */ 

int alt_alarm_start (alt_alarm* alarm, alt_u32 nticks,
                     alt_u32 (*callback) (void* context),
                     void* context)
{
  8093ec:	defff504 	addi	sp,sp,-44
  8093f0:	df000a15 	stw	fp,40(sp)
  8093f4:	df000a04 	addi	fp,sp,40
  8093f8:	e13ffc15 	stw	r4,-16(fp)
  8093fc:	e17ffd15 	stw	r5,-12(fp)
  809400:	e1bffe15 	stw	r6,-8(fp)
  809404:	e1ffff15 	stw	r7,-4(fp)
  alt_irq_context irq_context;
  alt_u32 current_nticks = 0;
  809408:	e03ff615 	stw	zero,-40(fp)
 * Obtain the system clock rate in ticks/s. 
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_ticks_per_second (void)
{
  return _alt_tick_rate;
  80940c:	d0a72e17 	ldw	r2,-25416(gp)
  
  if (alt_ticks_per_second ())
  809410:	10003c26 	beq	r2,zero,809504 <alt_alarm_start+0x118>
  {
    if (alarm)
  809414:	e0bffc17 	ldw	r2,-16(fp)
  809418:	10003826 	beq	r2,zero,8094fc <alt_alarm_start+0x110>
    {
      alarm->callback = callback;
  80941c:	e0bffc17 	ldw	r2,-16(fp)
  809420:	e0fffe17 	ldw	r3,-8(fp)
  809424:	10c00315 	stw	r3,12(r2)
      alarm->context  = context;
  809428:	e0bffc17 	ldw	r2,-16(fp)
  80942c:	e0ffff17 	ldw	r3,-4(fp)
  809430:	10c00515 	stw	r3,20(r2)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  809434:	0005303a 	rdctl	r2,status
  809438:	e0bff915 	stw	r2,-28(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  80943c:	e0fff917 	ldw	r3,-28(fp)
  809440:	00bfff84 	movi	r2,-2
  809444:	1884703a 	and	r2,r3,r2
  809448:	1001703a 	wrctl	status,r2
  
  return context;
  80944c:	e0bff917 	ldw	r2,-28(fp)
 
      irq_context = alt_irq_disable_all ();
  809450:	e0bff815 	stw	r2,-32(fp)
 * alt_nticks() returns the elapsed number of system clock ticks since reset.
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_nticks (void)
{
  return _alt_nticks;
  809454:	d0a72f17 	ldw	r2,-25412(gp)
      
      current_nticks = alt_nticks();
  809458:	e0bff615 	stw	r2,-40(fp)
      
      alarm->time = nticks + current_nticks + 1; 
  80945c:	e0fffd17 	ldw	r3,-12(fp)
  809460:	e0bff617 	ldw	r2,-40(fp)
  809464:	1885883a 	add	r2,r3,r2
  809468:	10c00044 	addi	r3,r2,1
  80946c:	e0bffc17 	ldw	r2,-16(fp)
  809470:	10c00215 	stw	r3,8(r2)
      /* 
       * If the desired alarm time causes a roll-over, set the rollover
       * flag. This will prevent the subsequent tick event from causing
       * an alarm too early.
       */
      if(alarm->time < current_nticks)
  809474:	e0bffc17 	ldw	r2,-16(fp)
  809478:	10c00217 	ldw	r3,8(r2)
  80947c:	e0bff617 	ldw	r2,-40(fp)
  809480:	1880042e 	bgeu	r3,r2,809494 <alt_alarm_start+0xa8>
      {
        alarm->rollover = 1;
  809484:	e0bffc17 	ldw	r2,-16(fp)
  809488:	00c00044 	movi	r3,1
  80948c:	10c00405 	stb	r3,16(r2)
  809490:	00000206 	br	80949c <alt_alarm_start+0xb0>
      }
      else
      {
        alarm->rollover = 0;
  809494:	e0bffc17 	ldw	r2,-16(fp)
  809498:	10000405 	stb	zero,16(r2)
      }
    
      alt_llist_insert (&alt_alarm_list, &alarm->llist);
  80949c:	e0bffc17 	ldw	r2,-16(fp)
  8094a0:	d0e00b04 	addi	r3,gp,-32724
  8094a4:	e0fffa15 	stw	r3,-24(fp)
  8094a8:	e0bffb15 	stw	r2,-20(fp)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
  8094ac:	e0bffb17 	ldw	r2,-20(fp)
  8094b0:	e0fffa17 	ldw	r3,-24(fp)
  8094b4:	10c00115 	stw	r3,4(r2)
  entry->next     = list->next;
  8094b8:	e0bffa17 	ldw	r2,-24(fp)
  8094bc:	10c00017 	ldw	r3,0(r2)
  8094c0:	e0bffb17 	ldw	r2,-20(fp)
  8094c4:	10c00015 	stw	r3,0(r2)

  list->next->previous = entry;
  8094c8:	e0bffa17 	ldw	r2,-24(fp)
  8094cc:	10800017 	ldw	r2,0(r2)
  8094d0:	e0fffb17 	ldw	r3,-20(fp)
  8094d4:	10c00115 	stw	r3,4(r2)
  list->next           = entry;
  8094d8:	e0bffa17 	ldw	r2,-24(fp)
  8094dc:	e0fffb17 	ldw	r3,-20(fp)
  8094e0:	10c00015 	stw	r3,0(r2)
  8094e4:	e0bff817 	ldw	r2,-32(fp)
  8094e8:	e0bff715 	stw	r2,-36(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  8094ec:	e0bff717 	ldw	r2,-36(fp)
  8094f0:	1001703a 	wrctl	status,r2
      alt_irq_enable_all (irq_context);

      return 0;
  8094f4:	0005883a 	mov	r2,zero
  8094f8:	00000306 	br	809508 <alt_alarm_start+0x11c>
    }
    else
    {
      return -EINVAL;
  8094fc:	00bffa84 	movi	r2,-22
  809500:	00000106 	br	809508 <alt_alarm_start+0x11c>
    }
  }
  else
  {
    return -ENOTSUP;
  809504:	00bfde84 	movi	r2,-134
  }
}
  809508:	e037883a 	mov	sp,fp
  80950c:	df000017 	ldw	fp,0(sp)
  809510:	dec00104 	addi	sp,sp,4
  809514:	f800283a 	ret

00809518 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
  809518:	defffe04 	addi	sp,sp,-8
  80951c:	dfc00115 	stw	ra,4(sp)
  809520:	df000015 	stw	fp,0(sp)
  809524:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
  809528:	d0a00917 	ldw	r2,-32732(gp)
  80952c:	10000326 	beq	r2,zero,80953c <alt_get_errno+0x24>
  809530:	d0a00917 	ldw	r2,-32732(gp)
  809534:	103ee83a 	callr	r2
  809538:	00000106 	br	809540 <alt_get_errno+0x28>
  80953c:	d0a72a04 	addi	r2,gp,-25432
}
  809540:	e037883a 	mov	sp,fp
  809544:	dfc00117 	ldw	ra,4(sp)
  809548:	df000017 	ldw	fp,0(sp)
  80954c:	dec00204 	addi	sp,sp,8
  809550:	f800283a 	ret

00809554 <close>:
 *
 * ALT_CLOSE is mapped onto the close() system call in alt_syscall.h
 */
 
int ALT_CLOSE (int fildes)
{
  809554:	defffb04 	addi	sp,sp,-20
  809558:	dfc00415 	stw	ra,16(sp)
  80955c:	df000315 	stw	fp,12(sp)
  809560:	df000304 	addi	fp,sp,12
  809564:	e13fff15 	stw	r4,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (fildes < 0) ? NULL : &alt_fd_list[fildes];
  809568:	e0bfff17 	ldw	r2,-4(fp)
  80956c:	10000616 	blt	r2,zero,809588 <close+0x34>
  809570:	e0bfff17 	ldw	r2,-4(fp)
  809574:	10c00324 	muli	r3,r2,12
  809578:	00802074 	movhi	r2,129
  80957c:	10b84f04 	addi	r2,r2,-7876
  809580:	1885883a 	add	r2,r3,r2
  809584:	00000106 	br	80958c <close+0x38>
  809588:	0005883a 	mov	r2,zero
  80958c:	e0bffd15 	stw	r2,-12(fp)

  if (fd)
  809590:	e0bffd17 	ldw	r2,-12(fp)
  809594:	10001926 	beq	r2,zero,8095fc <close+0xa8>
    /*
     * If the associated file system/device has a close function, call it so 
     * that any necessary cleanup code can run.
     */

    rval = (fd->dev->close) ? fd->dev->close(fd) : 0;
  809598:	e0bffd17 	ldw	r2,-12(fp)
  80959c:	10800017 	ldw	r2,0(r2)
  8095a0:	10800417 	ldw	r2,16(r2)
  8095a4:	10000626 	beq	r2,zero,8095c0 <close+0x6c>
  8095a8:	e0bffd17 	ldw	r2,-12(fp)
  8095ac:	10800017 	ldw	r2,0(r2)
  8095b0:	10800417 	ldw	r2,16(r2)
  8095b4:	e13ffd17 	ldw	r4,-12(fp)
  8095b8:	103ee83a 	callr	r2
  8095bc:	00000106 	br	8095c4 <close+0x70>
  8095c0:	0005883a 	mov	r2,zero
  8095c4:	e0bffe15 	stw	r2,-8(fp)

    /* Free the file descriptor structure and return. */

    alt_release_fd (fildes);
  8095c8:	e13fff17 	ldw	r4,-4(fp)
  8095cc:	0809c140 	call	809c14 <alt_release_fd>
    if (rval < 0)
  8095d0:	e0bffe17 	ldw	r2,-8(fp)
  8095d4:	1000070e 	bge	r2,zero,8095f4 <close+0xa0>
    {
      ALT_ERRNO = -rval;
  8095d8:	08095180 	call	809518 <alt_get_errno>
  8095dc:	1007883a 	mov	r3,r2
  8095e0:	e0bffe17 	ldw	r2,-8(fp)
  8095e4:	0085c83a 	sub	r2,zero,r2
  8095e8:	18800015 	stw	r2,0(r3)
      return -1;
  8095ec:	00bfffc4 	movi	r2,-1
  8095f0:	00000706 	br	809610 <close+0xbc>
    }
    return 0;
  8095f4:	0005883a 	mov	r2,zero
  8095f8:	00000506 	br	809610 <close+0xbc>
  }
  else
  {
    ALT_ERRNO = EBADFD;
  8095fc:	08095180 	call	809518 <alt_get_errno>
  809600:	1007883a 	mov	r3,r2
  809604:	00801444 	movi	r2,81
  809608:	18800015 	stw	r2,0(r3)
    return -1;
  80960c:	00bfffc4 	movi	r2,-1
  }
}
  809610:	e037883a 	mov	sp,fp
  809614:	dfc00117 	ldw	ra,4(sp)
  809618:	df000017 	ldw	fp,0(sp)
  80961c:	dec00204 	addi	sp,sp,8
  809620:	f800283a 	ret

00809624 <alt_dev_null_write>:
 * by the alt_dev_null device. It simple discards all data passed to it, and
 * indicates that the data has been successfully transmitted.
 */

static int alt_dev_null_write (alt_fd* fd, const char* ptr, int len)
{
  809624:	defffc04 	addi	sp,sp,-16
  809628:	df000315 	stw	fp,12(sp)
  80962c:	df000304 	addi	fp,sp,12
  809630:	e13ffd15 	stw	r4,-12(fp)
  809634:	e17ffe15 	stw	r5,-8(fp)
  809638:	e1bfff15 	stw	r6,-4(fp)
  return len;
  80963c:	e0bfff17 	ldw	r2,-4(fp)
}
  809640:	e037883a 	mov	sp,fp
  809644:	df000017 	ldw	fp,0(sp)
  809648:	dec00104 	addi	sp,sp,4
  80964c:	f800283a 	ret

00809650 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
  809650:	defffe04 	addi	sp,sp,-8
  809654:	dfc00115 	stw	ra,4(sp)
  809658:	df000015 	stw	fp,0(sp)
  80965c:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
  809660:	d0a00917 	ldw	r2,-32732(gp)
  809664:	10000326 	beq	r2,zero,809674 <alt_get_errno+0x24>
  809668:	d0a00917 	ldw	r2,-32732(gp)
  80966c:	103ee83a 	callr	r2
  809670:	00000106 	br	809678 <alt_get_errno+0x28>
  809674:	d0a72a04 	addi	r2,gp,-25432
}
  809678:	e037883a 	mov	sp,fp
  80967c:	dfc00117 	ldw	ra,4(sp)
  809680:	df000017 	ldw	fp,0(sp)
  809684:	dec00204 	addi	sp,sp,8
  809688:	f800283a 	ret

0080968c <fstat>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_FSTAT (int file, struct stat *st)
{
  80968c:	defffb04 	addi	sp,sp,-20
  809690:	dfc00415 	stw	ra,16(sp)
  809694:	df000315 	stw	fp,12(sp)
  809698:	df000304 	addi	fp,sp,12
  80969c:	e13ffe15 	stw	r4,-8(fp)
  8096a0:	e17fff15 	stw	r5,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
  8096a4:	e0bffe17 	ldw	r2,-8(fp)
  8096a8:	10000616 	blt	r2,zero,8096c4 <fstat+0x38>
  8096ac:	e0bffe17 	ldw	r2,-8(fp)
  8096b0:	10c00324 	muli	r3,r2,12
  8096b4:	00802074 	movhi	r2,129
  8096b8:	10b84f04 	addi	r2,r2,-7876
  8096bc:	1885883a 	add	r2,r3,r2
  8096c0:	00000106 	br	8096c8 <fstat+0x3c>
  8096c4:	0005883a 	mov	r2,zero
  8096c8:	e0bffd15 	stw	r2,-12(fp)
  
  if (fd)
  8096cc:	e0bffd17 	ldw	r2,-12(fp)
  8096d0:	10001026 	beq	r2,zero,809714 <fstat+0x88>
  {
    /* Call the drivers fstat() function to fill out the "st" structure. */

    if (fd->dev->fstat)
  8096d4:	e0bffd17 	ldw	r2,-12(fp)
  8096d8:	10800017 	ldw	r2,0(r2)
  8096dc:	10800817 	ldw	r2,32(r2)
  8096e0:	10000726 	beq	r2,zero,809700 <fstat+0x74>
    {
      return fd->dev->fstat(fd, st);
  8096e4:	e0bffd17 	ldw	r2,-12(fp)
  8096e8:	10800017 	ldw	r2,0(r2)
  8096ec:	10800817 	ldw	r2,32(r2)
  8096f0:	e17fff17 	ldw	r5,-4(fp)
  8096f4:	e13ffd17 	ldw	r4,-12(fp)
  8096f8:	103ee83a 	callr	r2
  8096fc:	00000a06 	br	809728 <fstat+0x9c>
     * device.
     */
 
    else
    {
      st->st_mode = _IFCHR;
  809700:	e0bfff17 	ldw	r2,-4(fp)
  809704:	00c80004 	movi	r3,8192
  809708:	10c00115 	stw	r3,4(r2)
      return 0;
  80970c:	0005883a 	mov	r2,zero
  809710:	00000506 	br	809728 <fstat+0x9c>
    }
  }
  else
  {
    ALT_ERRNO = EBADFD;
  809714:	08096500 	call	809650 <alt_get_errno>
  809718:	1007883a 	mov	r3,r2
  80971c:	00801444 	movi	r2,81
  809720:	18800015 	stw	r2,0(r3)
    return -1;
  809724:	00bfffc4 	movi	r2,-1
  }
}
  809728:	e037883a 	mov	sp,fp
  80972c:	dfc00117 	ldw	ra,4(sp)
  809730:	df000017 	ldw	fp,0(sp)
  809734:	dec00204 	addi	sp,sp,8
  809738:	f800283a 	ret

0080973c <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
  80973c:	defffe04 	addi	sp,sp,-8
  809740:	dfc00115 	stw	ra,4(sp)
  809744:	df000015 	stw	fp,0(sp)
  809748:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
  80974c:	d0a00917 	ldw	r2,-32732(gp)
  809750:	10000326 	beq	r2,zero,809760 <alt_get_errno+0x24>
  809754:	d0a00917 	ldw	r2,-32732(gp)
  809758:	103ee83a 	callr	r2
  80975c:	00000106 	br	809764 <alt_get_errno+0x28>
  809760:	d0a72a04 	addi	r2,gp,-25432
}
  809764:	e037883a 	mov	sp,fp
  809768:	dfc00117 	ldw	ra,4(sp)
  80976c:	df000017 	ldw	fp,0(sp)
  809770:	dec00204 	addi	sp,sp,8
  809774:	f800283a 	ret

00809778 <isatty>:
 *
 * ALT_ISATTY is mapped onto the isatty() system call in alt_syscall.h
 */
 
int ALT_ISATTY (int file)
{
  809778:	deffed04 	addi	sp,sp,-76
  80977c:	dfc01215 	stw	ra,72(sp)
  809780:	df001115 	stw	fp,68(sp)
  809784:	df001104 	addi	fp,sp,68
  809788:	e13fff15 	stw	r4,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
  80978c:	e0bfff17 	ldw	r2,-4(fp)
  809790:	10000616 	blt	r2,zero,8097ac <isatty+0x34>
  809794:	e0bfff17 	ldw	r2,-4(fp)
  809798:	10c00324 	muli	r3,r2,12
  80979c:	00802074 	movhi	r2,129
  8097a0:	10b84f04 	addi	r2,r2,-7876
  8097a4:	1885883a 	add	r2,r3,r2
  8097a8:	00000106 	br	8097b0 <isatty+0x38>
  8097ac:	0005883a 	mov	r2,zero
  8097b0:	e0bfef15 	stw	r2,-68(fp)
  
  if (fd)
  8097b4:	e0bfef17 	ldw	r2,-68(fp)
  8097b8:	10000e26 	beq	r2,zero,8097f4 <isatty+0x7c>
    /*
     * If a device driver does not provide an fstat() function, then it is 
     * treated as a terminal device by default.
     */

    if (!fd->dev->fstat)
  8097bc:	e0bfef17 	ldw	r2,-68(fp)
  8097c0:	10800017 	ldw	r2,0(r2)
  8097c4:	10800817 	ldw	r2,32(r2)
  8097c8:	1000021e 	bne	r2,zero,8097d4 <isatty+0x5c>
    {
      return 1;
  8097cc:	00800044 	movi	r2,1
  8097d0:	00000d06 	br	809808 <isatty+0x90>
     * this is called so that the device can identify itself.
     */ 

    else
    {
      fstat (file, &stat);
  8097d4:	e0bff004 	addi	r2,fp,-64
  8097d8:	100b883a 	mov	r5,r2
  8097dc:	e13fff17 	ldw	r4,-4(fp)
  8097e0:	080968c0 	call	80968c <fstat>
      return (stat.st_mode == _IFCHR) ? 1 : 0;
  8097e4:	e0bff117 	ldw	r2,-60(fp)
  8097e8:	10880020 	cmpeqi	r2,r2,8192
  8097ec:	10803fcc 	andi	r2,r2,255
  8097f0:	00000506 	br	809808 <isatty+0x90>
    }
  }
  else
  {
    ALT_ERRNO = EBADFD;
  8097f4:	080973c0 	call	80973c <alt_get_errno>
  8097f8:	1007883a 	mov	r3,r2
  8097fc:	00801444 	movi	r2,81
  809800:	18800015 	stw	r2,0(r3)
    return 0;
  809804:	0005883a 	mov	r2,zero
  }
}
  809808:	e037883a 	mov	sp,fp
  80980c:	dfc00117 	ldw	ra,4(sp)
  809810:	df000017 	ldw	fp,0(sp)
  809814:	dec00204 	addi	sp,sp,8
  809818:	f800283a 	ret

0080981c <alt_load_section>:
 */

static void ALT_INLINE alt_load_section (alt_u32* from, 
                                         alt_u32* to, 
                                         alt_u32* end)
{
  80981c:	defffc04 	addi	sp,sp,-16
  809820:	df000315 	stw	fp,12(sp)
  809824:	df000304 	addi	fp,sp,12
  809828:	e13ffd15 	stw	r4,-12(fp)
  80982c:	e17ffe15 	stw	r5,-8(fp)
  809830:	e1bfff15 	stw	r6,-4(fp)
  if (to != from)
  809834:	e0fffe17 	ldw	r3,-8(fp)
  809838:	e0bffd17 	ldw	r2,-12(fp)
  80983c:	18800c26 	beq	r3,r2,809870 <alt_load_section+0x54>
  {
    while( to != end )
  809840:	00000806 	br	809864 <alt_load_section+0x48>
    {
      *to++ = *from++;
  809844:	e0bffe17 	ldw	r2,-8(fp)
  809848:	10c00104 	addi	r3,r2,4
  80984c:	e0fffe15 	stw	r3,-8(fp)
  809850:	e0fffd17 	ldw	r3,-12(fp)
  809854:	19000104 	addi	r4,r3,4
  809858:	e13ffd15 	stw	r4,-12(fp)
  80985c:	18c00017 	ldw	r3,0(r3)
  809860:	10c00015 	stw	r3,0(r2)
                                         alt_u32* to, 
                                         alt_u32* end)
{
  if (to != from)
  {
    while( to != end )
  809864:	e0fffe17 	ldw	r3,-8(fp)
  809868:	e0bfff17 	ldw	r2,-4(fp)
  80986c:	18bff51e 	bne	r3,r2,809844 <__alt_mem_onchip_mem+0xff801844>
    {
      *to++ = *from++;
    }
  }
}
  809870:	0001883a 	nop
  809874:	e037883a 	mov	sp,fp
  809878:	df000017 	ldw	fp,0(sp)
  80987c:	dec00104 	addi	sp,sp,4
  809880:	f800283a 	ret

00809884 <alt_load>:
 * there is no bootloader, so this application is responsible for loading to
 * RAM any sections that are required.
 */  

void alt_load (void)
{
  809884:	defffe04 	addi	sp,sp,-8
  809888:	dfc00115 	stw	ra,4(sp)
  80988c:	df000015 	stw	fp,0(sp)
  809890:	d839883a 	mov	fp,sp
  /* 
   * Copy the .rwdata section. 
   */

  alt_load_section (&__flash_rwdata_start, 
  809894:	01802074 	movhi	r6,129
  809898:	31bd5004 	addi	r6,r6,-2752
  80989c:	01402074 	movhi	r5,129
  8098a0:	29763a04 	addi	r5,r5,-10008
  8098a4:	01002074 	movhi	r4,129
  8098a8:	213d5004 	addi	r4,r4,-2752
  8098ac:	080981c0 	call	80981c <alt_load_section>

  /*
   * Copy the exception handler.
   */

  alt_load_section (&__flash_exceptions_start, 
  8098b0:	01802034 	movhi	r6,128
  8098b4:	31809104 	addi	r6,r6,580
  8098b8:	01402034 	movhi	r5,128
  8098bc:	29400804 	addi	r5,r5,32
  8098c0:	01002034 	movhi	r4,128
  8098c4:	21000804 	addi	r4,r4,32
  8098c8:	080981c0 	call	80981c <alt_load_section>

  /*
   * Copy the .rodata section.
   */

  alt_load_section (&__flash_rodata_start, 
  8098cc:	01802074 	movhi	r6,129
  8098d0:	31b63a04 	addi	r6,r6,-10008
  8098d4:	01402074 	movhi	r5,129
  8098d8:	29754304 	addi	r5,r5,-10996
  8098dc:	01002074 	movhi	r4,129
  8098e0:	21354304 	addi	r4,r4,-10996
  8098e4:	080981c0 	call	80981c <alt_load_section>
  
  /*
   * Now ensure that the caches are in synch.
   */
  
  alt_dcache_flush_all();
  8098e8:	080c4140 	call	80c414 <alt_dcache_flush_all>
  alt_icache_flush_all();
  8098ec:	080c5fc0 	call	80c5fc <alt_icache_flush_all>
}
  8098f0:	0001883a 	nop
  8098f4:	e037883a 	mov	sp,fp
  8098f8:	dfc00117 	ldw	ra,4(sp)
  8098fc:	df000017 	ldw	fp,0(sp)
  809900:	dec00204 	addi	sp,sp,8
  809904:	f800283a 	ret

00809908 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
  809908:	defffe04 	addi	sp,sp,-8
  80990c:	dfc00115 	stw	ra,4(sp)
  809910:	df000015 	stw	fp,0(sp)
  809914:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
  809918:	d0a00917 	ldw	r2,-32732(gp)
  80991c:	10000326 	beq	r2,zero,80992c <alt_get_errno+0x24>
  809920:	d0a00917 	ldw	r2,-32732(gp)
  809924:	103ee83a 	callr	r2
  809928:	00000106 	br	809930 <alt_get_errno+0x28>
  80992c:	d0a72a04 	addi	r2,gp,-25432
}
  809930:	e037883a 	mov	sp,fp
  809934:	dfc00117 	ldw	ra,4(sp)
  809938:	df000017 	ldw	fp,0(sp)
  80993c:	dec00204 	addi	sp,sp,8
  809940:	f800283a 	ret

00809944 <lseek>:
 * ALT_LSEEK is mapped onto the lseek() system call in alt_syscall.h
 *
 */

off_t ALT_LSEEK (int file, off_t ptr, int dir)
{
  809944:	defff904 	addi	sp,sp,-28
  809948:	dfc00615 	stw	ra,24(sp)
  80994c:	df000515 	stw	fp,20(sp)
  809950:	df000504 	addi	fp,sp,20
  809954:	e13ffd15 	stw	r4,-12(fp)
  809958:	e17ffe15 	stw	r5,-8(fp)
  80995c:	e1bfff15 	stw	r6,-4(fp)
  alt_fd* fd;
  off_t   rc = 0; 
  809960:	e03ffb15 	stw	zero,-20(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
  809964:	e0bffd17 	ldw	r2,-12(fp)
  809968:	10000616 	blt	r2,zero,809984 <lseek+0x40>
  80996c:	e0bffd17 	ldw	r2,-12(fp)
  809970:	10c00324 	muli	r3,r2,12
  809974:	00802074 	movhi	r2,129
  809978:	10b84f04 	addi	r2,r2,-7876
  80997c:	1885883a 	add	r2,r3,r2
  809980:	00000106 	br	809988 <lseek+0x44>
  809984:	0005883a 	mov	r2,zero
  809988:	e0bffc15 	stw	r2,-16(fp)
  
  if (fd) 
  80998c:	e0bffc17 	ldw	r2,-16(fp)
  809990:	10001026 	beq	r2,zero,8099d4 <lseek+0x90>
    /*
     * If the device driver provides an implementation of the lseek() function,
     * then call that to process the request.
     */
 
    if (fd->dev->lseek)
  809994:	e0bffc17 	ldw	r2,-16(fp)
  809998:	10800017 	ldw	r2,0(r2)
  80999c:	10800717 	ldw	r2,28(r2)
  8099a0:	10000926 	beq	r2,zero,8099c8 <lseek+0x84>
    {
      rc = fd->dev->lseek(fd, ptr, dir);
  8099a4:	e0bffc17 	ldw	r2,-16(fp)
  8099a8:	10800017 	ldw	r2,0(r2)
  8099ac:	10800717 	ldw	r2,28(r2)
  8099b0:	e1bfff17 	ldw	r6,-4(fp)
  8099b4:	e17ffe17 	ldw	r5,-8(fp)
  8099b8:	e13ffc17 	ldw	r4,-16(fp)
  8099bc:	103ee83a 	callr	r2
  8099c0:	e0bffb15 	stw	r2,-20(fp)
  8099c4:	00000506 	br	8099dc <lseek+0x98>
     * Otherwise return an error.
     */

    else
    {
      rc = -ENOTSUP;
  8099c8:	00bfde84 	movi	r2,-134
  8099cc:	e0bffb15 	stw	r2,-20(fp)
  8099d0:	00000206 	br	8099dc <lseek+0x98>
    }
  }
  else  
  {
    rc = -EBADFD;
  8099d4:	00bfebc4 	movi	r2,-81
  8099d8:	e0bffb15 	stw	r2,-20(fp)
  }

  if (rc < 0)
  8099dc:	e0bffb17 	ldw	r2,-20(fp)
  8099e0:	1000070e 	bge	r2,zero,809a00 <lseek+0xbc>
  {
    ALT_ERRNO = -rc;
  8099e4:	08099080 	call	809908 <alt_get_errno>
  8099e8:	1007883a 	mov	r3,r2
  8099ec:	e0bffb17 	ldw	r2,-20(fp)
  8099f0:	0085c83a 	sub	r2,zero,r2
  8099f4:	18800015 	stw	r2,0(r3)
    rc = -1;
  8099f8:	00bfffc4 	movi	r2,-1
  8099fc:	e0bffb15 	stw	r2,-20(fp)
  }

  return rc;
  809a00:	e0bffb17 	ldw	r2,-20(fp)
}
  809a04:	e037883a 	mov	sp,fp
  809a08:	dfc00117 	ldw	ra,4(sp)
  809a0c:	df000017 	ldw	fp,0(sp)
  809a10:	dec00204 	addi	sp,sp,8
  809a14:	f800283a 	ret

00809a18 <alt_main>:
 * devices/filesystems/components in the system; and call the entry point for
 * the users application, i.e. main().
 */

void alt_main (void)
{
  809a18:	defffd04 	addi	sp,sp,-12
  809a1c:	dfc00215 	stw	ra,8(sp)
  809a20:	df000115 	stw	fp,4(sp)
  809a24:	df000104 	addi	fp,sp,4
#endif

  /* ALT LOG - please see HAL/sys/alt_log_printf.h for details */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Entering alt_main, calling alt_irq_init.\r\n");
  /* Initialize the interrupt controller. */
  alt_irq_init (NULL);
  809a28:	0009883a 	mov	r4,zero
  809a2c:	080a0340 	call	80a034 <alt_irq_init>

  /* Initialize the operating system */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done alt_irq_init, calling alt_os_init.\r\n");
  ALT_OS_INIT();
  809a30:	0001883a 	nop
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done OS Init, calling alt_sem_create.\r\n");
  ALT_SEM_CREATE (&alt_fd_list_lock, 1);

  /* Initialize the device drivers/software components. */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling alt_sys_init.\r\n");
  alt_sys_init();
  809a34:	080a06c0 	call	80a06c <alt_sys_init>
   * devices be present (not equal to /dev/null) and if direct drivers
   * aren't being used.
   */

    ALT_LOG_PRINT_BOOT("[alt_main.c] Redirecting IO.\r\n");
    alt_io_redirect(ALT_STDOUT, ALT_STDIN, ALT_STDERR);
  809a38:	01802074 	movhi	r6,129
  809a3c:	31b58c04 	addi	r6,r6,-10704
  809a40:	01402074 	movhi	r5,129
  809a44:	29758c04 	addi	r5,r5,-10704
  809a48:	01002074 	movhi	r4,129
  809a4c:	21358c04 	addi	r4,r4,-10704
  809a50:	080c9940 	call	80c994 <alt_io_redirect>
  /* 
   * Call the C++ constructors 
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling C++ constructors.\r\n");
  _do_ctors ();
  809a54:	080c53c0 	call	80c53c <_do_ctors>
   * redefined as _exit()). This is in the interest of reducing code footprint,
   * in that the atexit() overhead is removed when it's not needed.
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling atexit.\r\n");
  atexit (_do_dtors);
  809a58:	01002074 	movhi	r4,129
  809a5c:	21316704 	addi	r4,r4,-14948
  809a60:	080d1780 	call	80d178 <atexit>
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling main.\r\n");

#ifdef ALT_NO_EXIT
  main (alt_argc, alt_argv, alt_envp);
#else
  result = main (alt_argc, alt_argv, alt_envp);
  809a64:	d0a72b17 	ldw	r2,-25428(gp)
  809a68:	d0e72c17 	ldw	r3,-25424(gp)
  809a6c:	d1272d17 	ldw	r4,-25420(gp)
  809a70:	200d883a 	mov	r6,r4
  809a74:	180b883a 	mov	r5,r3
  809a78:	1009883a 	mov	r4,r2
  809a7c:	08002bc0 	call	8002bc <main>
  809a80:	e0bfff15 	stw	r2,-4(fp)
  close(STDOUT_FILENO);
  809a84:	01000044 	movi	r4,1
  809a88:	08095540 	call	809554 <close>
  exit (result);
  809a8c:	e13fff17 	ldw	r4,-4(fp)
  809a90:	080d18c0 	call	80d18c <exit>

00809a94 <__malloc_lock>:
 * configuration is single threaded, so there is nothing to do here. Note that 
 * this requires that malloc is never called by an interrupt service routine.
 */

void __malloc_lock ( struct _reent *_r )
{
  809a94:	defffe04 	addi	sp,sp,-8
  809a98:	df000115 	stw	fp,4(sp)
  809a9c:	df000104 	addi	fp,sp,4
  809aa0:	e13fff15 	stw	r4,-4(fp)
}
  809aa4:	0001883a 	nop
  809aa8:	e037883a 	mov	sp,fp
  809aac:	df000017 	ldw	fp,0(sp)
  809ab0:	dec00104 	addi	sp,sp,4
  809ab4:	f800283a 	ret

00809ab8 <__malloc_unlock>:
/*
 *
 */

void __malloc_unlock ( struct _reent *_r )
{
  809ab8:	defffe04 	addi	sp,sp,-8
  809abc:	df000115 	stw	fp,4(sp)
  809ac0:	df000104 	addi	fp,sp,4
  809ac4:	e13fff15 	stw	r4,-4(fp)
}
  809ac8:	0001883a 	nop
  809acc:	e037883a 	mov	sp,fp
  809ad0:	df000017 	ldw	fp,0(sp)
  809ad4:	dec00104 	addi	sp,sp,4
  809ad8:	f800283a 	ret

00809adc <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
  809adc:	defffe04 	addi	sp,sp,-8
  809ae0:	dfc00115 	stw	ra,4(sp)
  809ae4:	df000015 	stw	fp,0(sp)
  809ae8:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
  809aec:	d0a00917 	ldw	r2,-32732(gp)
  809af0:	10000326 	beq	r2,zero,809b00 <alt_get_errno+0x24>
  809af4:	d0a00917 	ldw	r2,-32732(gp)
  809af8:	103ee83a 	callr	r2
  809afc:	00000106 	br	809b04 <alt_get_errno+0x28>
  809b00:	d0a72a04 	addi	r2,gp,-25432
}
  809b04:	e037883a 	mov	sp,fp
  809b08:	dfc00117 	ldw	ra,4(sp)
  809b0c:	df000017 	ldw	fp,0(sp)
  809b10:	dec00204 	addi	sp,sp,8
  809b14:	f800283a 	ret

00809b18 <read>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_READ (int file, void *ptr, size_t len)
{
  809b18:	defff904 	addi	sp,sp,-28
  809b1c:	dfc00615 	stw	ra,24(sp)
  809b20:	df000515 	stw	fp,20(sp)
  809b24:	df000504 	addi	fp,sp,20
  809b28:	e13ffd15 	stw	r4,-12(fp)
  809b2c:	e17ffe15 	stw	r5,-8(fp)
  809b30:	e1bfff15 	stw	r6,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
  809b34:	e0bffd17 	ldw	r2,-12(fp)
  809b38:	10000616 	blt	r2,zero,809b54 <read+0x3c>
  809b3c:	e0bffd17 	ldw	r2,-12(fp)
  809b40:	10c00324 	muli	r3,r2,12
  809b44:	00802074 	movhi	r2,129
  809b48:	10b84f04 	addi	r2,r2,-7876
  809b4c:	1885883a 	add	r2,r3,r2
  809b50:	00000106 	br	809b58 <read+0x40>
  809b54:	0005883a 	mov	r2,zero
  809b58:	e0bffb15 	stw	r2,-20(fp)
  
  if (fd)
  809b5c:	e0bffb17 	ldw	r2,-20(fp)
  809b60:	10002226 	beq	r2,zero,809bec <read+0xd4>
     * If the file has not been opened with read access, or if the driver does
     * not provide an implementation of read(), generate an error. Otherwise
     * call the drivers read() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_WRONLY) && 
  809b64:	e0bffb17 	ldw	r2,-20(fp)
  809b68:	10800217 	ldw	r2,8(r2)
  809b6c:	108000cc 	andi	r2,r2,3
  809b70:	10800060 	cmpeqi	r2,r2,1
  809b74:	1000181e 	bne	r2,zero,809bd8 <read+0xc0>
        (fd->dev->read))
  809b78:	e0bffb17 	ldw	r2,-20(fp)
  809b7c:	10800017 	ldw	r2,0(r2)
  809b80:	10800517 	ldw	r2,20(r2)
     * If the file has not been opened with read access, or if the driver does
     * not provide an implementation of read(), generate an error. Otherwise
     * call the drivers read() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_WRONLY) && 
  809b84:	10001426 	beq	r2,zero,809bd8 <read+0xc0>
        (fd->dev->read))
      {
        if ((rval = fd->dev->read(fd, ptr, len)) < 0)
  809b88:	e0bffb17 	ldw	r2,-20(fp)
  809b8c:	10800017 	ldw	r2,0(r2)
  809b90:	10800517 	ldw	r2,20(r2)
  809b94:	e0ffff17 	ldw	r3,-4(fp)
  809b98:	180d883a 	mov	r6,r3
  809b9c:	e17ffe17 	ldw	r5,-8(fp)
  809ba0:	e13ffb17 	ldw	r4,-20(fp)
  809ba4:	103ee83a 	callr	r2
  809ba8:	e0bffc15 	stw	r2,-16(fp)
  809bac:	e0bffc17 	ldw	r2,-16(fp)
  809bb0:	1000070e 	bge	r2,zero,809bd0 <read+0xb8>
        {
          ALT_ERRNO = -rval;
  809bb4:	0809adc0 	call	809adc <alt_get_errno>
  809bb8:	1007883a 	mov	r3,r2
  809bbc:	e0bffc17 	ldw	r2,-16(fp)
  809bc0:	0085c83a 	sub	r2,zero,r2
  809bc4:	18800015 	stw	r2,0(r3)
          return -1;
  809bc8:	00bfffc4 	movi	r2,-1
  809bcc:	00000c06 	br	809c00 <read+0xe8>
        }
        return rval;
  809bd0:	e0bffc17 	ldw	r2,-16(fp)
  809bd4:	00000a06 	br	809c00 <read+0xe8>
      }
      else
      {
        ALT_ERRNO = EACCES;
  809bd8:	0809adc0 	call	809adc <alt_get_errno>
  809bdc:	1007883a 	mov	r3,r2
  809be0:	00800344 	movi	r2,13
  809be4:	18800015 	stw	r2,0(r3)
  809be8:	00000406 	br	809bfc <read+0xe4>
      }
    }
  else
  {
    ALT_ERRNO = EBADFD;
  809bec:	0809adc0 	call	809adc <alt_get_errno>
  809bf0:	1007883a 	mov	r3,r2
  809bf4:	00801444 	movi	r2,81
  809bf8:	18800015 	stw	r2,0(r3)
  }
  return -1;
  809bfc:	00bfffc4 	movi	r2,-1
}
  809c00:	e037883a 	mov	sp,fp
  809c04:	dfc00117 	ldw	ra,4(sp)
  809c08:	df000017 	ldw	fp,0(sp)
  809c0c:	dec00204 	addi	sp,sp,8
  809c10:	f800283a 	ret

00809c14 <alt_release_fd>:
 * File descriptors correcponding to standard in, standard out and standard 
 * error cannont be released backed to the pool. They are always reserved.
 */

void alt_release_fd (int fd)
{
  809c14:	defffe04 	addi	sp,sp,-8
  809c18:	df000115 	stw	fp,4(sp)
  809c1c:	df000104 	addi	fp,sp,4
  809c20:	e13fff15 	stw	r4,-4(fp)
  if (fd > 2)
  809c24:	e0bfff17 	ldw	r2,-4(fp)
  809c28:	108000d0 	cmplti	r2,r2,3
  809c2c:	10000d1e 	bne	r2,zero,809c64 <alt_release_fd+0x50>
  {
    alt_fd_list[fd].fd_flags = 0;
  809c30:	00802074 	movhi	r2,129
  809c34:	10b84f04 	addi	r2,r2,-7876
  809c38:	e0ffff17 	ldw	r3,-4(fp)
  809c3c:	18c00324 	muli	r3,r3,12
  809c40:	10c5883a 	add	r2,r2,r3
  809c44:	10800204 	addi	r2,r2,8
  809c48:	10000015 	stw	zero,0(r2)
    alt_fd_list[fd].dev      = 0;
  809c4c:	00802074 	movhi	r2,129
  809c50:	10b84f04 	addi	r2,r2,-7876
  809c54:	e0ffff17 	ldw	r3,-4(fp)
  809c58:	18c00324 	muli	r3,r3,12
  809c5c:	10c5883a 	add	r2,r2,r3
  809c60:	10000015 	stw	zero,0(r2)
  }
}
  809c64:	0001883a 	nop
  809c68:	e037883a 	mov	sp,fp
  809c6c:	df000017 	ldw	fp,0(sp)
  809c70:	dec00104 	addi	sp,sp,4
  809c74:	f800283a 	ret

00809c78 <sbrk>:
#endif
 
caddr_t ALT_SBRK (int incr) __attribute__ ((no_instrument_function ));

caddr_t ALT_SBRK (int incr)
{ 
  809c78:	defff904 	addi	sp,sp,-28
  809c7c:	df000615 	stw	fp,24(sp)
  809c80:	df000604 	addi	fp,sp,24
  809c84:	e13fff15 	stw	r4,-4(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  809c88:	0005303a 	rdctl	r2,status
  809c8c:	e0bffe15 	stw	r2,-8(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  809c90:	e0fffe17 	ldw	r3,-8(fp)
  809c94:	00bfff84 	movi	r2,-2
  809c98:	1884703a 	and	r2,r3,r2
  809c9c:	1001703a 	wrctl	status,r2
  
  return context;
  809ca0:	e0bffe17 	ldw	r2,-8(fp)
  alt_irq_context context;
  char *prev_heap_end; 

  context = alt_irq_disable_all();
  809ca4:	e0bffb15 	stw	r2,-20(fp)

  /* Always return data aligned on a word boundary */
  heap_end = (char *)(((unsigned int)heap_end + 3) & ~3);
  809ca8:	d0a00a17 	ldw	r2,-32728(gp)
  809cac:	10c000c4 	addi	r3,r2,3
  809cb0:	00bfff04 	movi	r2,-4
  809cb4:	1884703a 	and	r2,r3,r2
  809cb8:	d0a00a15 	stw	r2,-32728(gp)
  if (((heap_end + incr) - __alt_heap_start) > ALT_MAX_HEAP_BYTES) {
    alt_irq_enable_all(context);
    return (caddr_t)-1;
  }
#else
  if ((heap_end + incr) > __alt_heap_limit) {
  809cbc:	d0e00a17 	ldw	r3,-32728(gp)
  809cc0:	e0bfff17 	ldw	r2,-4(fp)
  809cc4:	1887883a 	add	r3,r3,r2
  809cc8:	00804034 	movhi	r2,256
  809ccc:	10800004 	addi	r2,r2,0
  809cd0:	10c0062e 	bgeu	r2,r3,809cec <sbrk+0x74>
  809cd4:	e0bffb17 	ldw	r2,-20(fp)
  809cd8:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  809cdc:	e0bffa17 	ldw	r2,-24(fp)
  809ce0:	1001703a 	wrctl	status,r2
    alt_irq_enable_all(context);
    return (caddr_t)-1;
  809ce4:	00bfffc4 	movi	r2,-1
  809ce8:	00000b06 	br	809d18 <sbrk+0xa0>
  }
#endif

  prev_heap_end = heap_end; 
  809cec:	d0a00a17 	ldw	r2,-32728(gp)
  809cf0:	e0bffd15 	stw	r2,-12(fp)
  heap_end += incr; 
  809cf4:	d0e00a17 	ldw	r3,-32728(gp)
  809cf8:	e0bfff17 	ldw	r2,-4(fp)
  809cfc:	1885883a 	add	r2,r3,r2
  809d00:	d0a00a15 	stw	r2,-32728(gp)
  809d04:	e0bffb17 	ldw	r2,-20(fp)
  809d08:	e0bffc15 	stw	r2,-16(fp)
  809d0c:	e0bffc17 	ldw	r2,-16(fp)
  809d10:	1001703a 	wrctl	status,r2

#endif

  alt_irq_enable_all(context);

  return (caddr_t) prev_heap_end; 
  809d14:	e0bffd17 	ldw	r2,-12(fp)
} 
  809d18:	e037883a 	mov	sp,fp
  809d1c:	df000017 	ldw	fp,0(sp)
  809d20:	dec00104 	addi	sp,sp,4
  809d24:	f800283a 	ret

00809d28 <alt_alarm_stop>:
 * alarms. Alternatively an alarm can unregister itself by returning zero when 
 * the alarm executes.
 */

void alt_alarm_stop (alt_alarm* alarm)
{
  809d28:	defffa04 	addi	sp,sp,-24
  809d2c:	df000515 	stw	fp,20(sp)
  809d30:	df000504 	addi	fp,sp,20
  809d34:	e13fff15 	stw	r4,-4(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  809d38:	0005303a 	rdctl	r2,status
  809d3c:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  809d40:	e0fffc17 	ldw	r3,-16(fp)
  809d44:	00bfff84 	movi	r2,-2
  809d48:	1884703a 	and	r2,r3,r2
  809d4c:	1001703a 	wrctl	status,r2
  
  return context;
  809d50:	e0bffc17 	ldw	r2,-16(fp)
  alt_irq_context irq_context;

  irq_context = alt_irq_disable_all();
  809d54:	e0bffb15 	stw	r2,-20(fp)
  alt_llist_remove (&alarm->llist);
  809d58:	e0bfff17 	ldw	r2,-4(fp)
  809d5c:	e0bffd15 	stw	r2,-12(fp)
 * input argument is the element to remove.
 */
     
static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_remove(alt_llist* entry)
{
  entry->next->previous = entry->previous;
  809d60:	e0bffd17 	ldw	r2,-12(fp)
  809d64:	10800017 	ldw	r2,0(r2)
  809d68:	e0fffd17 	ldw	r3,-12(fp)
  809d6c:	18c00117 	ldw	r3,4(r3)
  809d70:	10c00115 	stw	r3,4(r2)
  entry->previous->next = entry->next;
  809d74:	e0bffd17 	ldw	r2,-12(fp)
  809d78:	10800117 	ldw	r2,4(r2)
  809d7c:	e0fffd17 	ldw	r3,-12(fp)
  809d80:	18c00017 	ldw	r3,0(r3)
  809d84:	10c00015 	stw	r3,0(r2)
  /* 
   * Set the entry to point to itself, so that any further calls to
   * alt_llist_remove() are harmless.
   */

  entry->previous = entry;
  809d88:	e0bffd17 	ldw	r2,-12(fp)
  809d8c:	e0fffd17 	ldw	r3,-12(fp)
  809d90:	10c00115 	stw	r3,4(r2)
  entry->next     = entry;
  809d94:	e0bffd17 	ldw	r2,-12(fp)
  809d98:	e0fffd17 	ldw	r3,-12(fp)
  809d9c:	10c00015 	stw	r3,0(r2)
  809da0:	e0bffb17 	ldw	r2,-20(fp)
  809da4:	e0bffe15 	stw	r2,-8(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  809da8:	e0bffe17 	ldw	r2,-8(fp)
  809dac:	1001703a 	wrctl	status,r2
  alt_irq_enable_all (irq_context);
}
  809db0:	0001883a 	nop
  809db4:	e037883a 	mov	sp,fp
  809db8:	df000017 	ldw	fp,0(sp)
  809dbc:	dec00104 	addi	sp,sp,4
  809dc0:	f800283a 	ret

00809dc4 <alt_tick>:
 * 
 * alt_tick() is expected to run at interrupt level.
 */

void alt_tick (void)
{
  809dc4:	defffb04 	addi	sp,sp,-20
  809dc8:	dfc00415 	stw	ra,16(sp)
  809dcc:	df000315 	stw	fp,12(sp)
  809dd0:	df000304 	addi	fp,sp,12
  alt_alarm* next;
  alt_alarm* alarm = (alt_alarm*) alt_alarm_list.next;
  809dd4:	d0a00b17 	ldw	r2,-32724(gp)
  809dd8:	e0bffd15 	stw	r2,-12(fp)

  alt_u32    next_callback;

  /* update the tick counter */

  _alt_nticks++;
  809ddc:	d0a72f17 	ldw	r2,-25412(gp)
  809de0:	10800044 	addi	r2,r2,1
  809de4:	d0a72f15 	stw	r2,-25412(gp)

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
  809de8:	00002e06 	br	809ea4 <alt_tick+0xe0>
  {
    next = (alt_alarm*) alarm->llist.next;
  809dec:	e0bffd17 	ldw	r2,-12(fp)
  809df0:	10800017 	ldw	r2,0(r2)
  809df4:	e0bffe15 	stw	r2,-8(fp)
    /* 
     * Upon the tick-counter rolling over it is safe to clear the 
     * roll-over flag; once the flag is cleared this (or subsequnt)
     * tick events are enabled to generate an alarm event. 
     */
    if ((alarm->rollover) && (_alt_nticks == 0))
  809df8:	e0bffd17 	ldw	r2,-12(fp)
  809dfc:	10800403 	ldbu	r2,16(r2)
  809e00:	10803fcc 	andi	r2,r2,255
  809e04:	10000426 	beq	r2,zero,809e18 <alt_tick+0x54>
  809e08:	d0a72f17 	ldw	r2,-25412(gp)
  809e0c:	1000021e 	bne	r2,zero,809e18 <alt_tick+0x54>
    {
      alarm->rollover = 0;
  809e10:	e0bffd17 	ldw	r2,-12(fp)
  809e14:	10000405 	stb	zero,16(r2)
    }
    
    /* if the alarm period has expired, make the callback */    
    if ((alarm->time <= _alt_nticks) && (alarm->rollover == 0))
  809e18:	e0bffd17 	ldw	r2,-12(fp)
  809e1c:	10800217 	ldw	r2,8(r2)
  809e20:	d0e72f17 	ldw	r3,-25412(gp)
  809e24:	18801d36 	bltu	r3,r2,809e9c <alt_tick+0xd8>
  809e28:	e0bffd17 	ldw	r2,-12(fp)
  809e2c:	10800403 	ldbu	r2,16(r2)
  809e30:	10803fcc 	andi	r2,r2,255
  809e34:	1000191e 	bne	r2,zero,809e9c <alt_tick+0xd8>
    {
      next_callback = alarm->callback (alarm->context);
  809e38:	e0bffd17 	ldw	r2,-12(fp)
  809e3c:	10800317 	ldw	r2,12(r2)
  809e40:	e0fffd17 	ldw	r3,-12(fp)
  809e44:	18c00517 	ldw	r3,20(r3)
  809e48:	1809883a 	mov	r4,r3
  809e4c:	103ee83a 	callr	r2
  809e50:	e0bfff15 	stw	r2,-4(fp)

      /* deactivate the alarm if the return value is zero */

      if (next_callback == 0)
  809e54:	e0bfff17 	ldw	r2,-4(fp)
  809e58:	1000031e 	bne	r2,zero,809e68 <alt_tick+0xa4>
      {
        alt_alarm_stop (alarm);
  809e5c:	e13ffd17 	ldw	r4,-12(fp)
  809e60:	0809d280 	call	809d28 <alt_alarm_stop>
  809e64:	00000d06 	br	809e9c <alt_tick+0xd8>
      }
      else
      {
        alarm->time += next_callback;
  809e68:	e0bffd17 	ldw	r2,-12(fp)
  809e6c:	10c00217 	ldw	r3,8(r2)
  809e70:	e0bfff17 	ldw	r2,-4(fp)
  809e74:	1887883a 	add	r3,r3,r2
  809e78:	e0bffd17 	ldw	r2,-12(fp)
  809e7c:	10c00215 	stw	r3,8(r2)
        /* 
         * If the desired alarm time causes a roll-over, set the rollover
         * flag. This will prevent the subsequent tick event from causing
         * an alarm too early.
         */
        if(alarm->time < _alt_nticks)
  809e80:	e0bffd17 	ldw	r2,-12(fp)
  809e84:	10c00217 	ldw	r3,8(r2)
  809e88:	d0a72f17 	ldw	r2,-25412(gp)
  809e8c:	1880032e 	bgeu	r3,r2,809e9c <alt_tick+0xd8>
        {
          alarm->rollover = 1;
  809e90:	e0bffd17 	ldw	r2,-12(fp)
  809e94:	00c00044 	movi	r3,1
  809e98:	10c00405 	stb	r3,16(r2)
        }
      }
    }
    alarm = next;
  809e9c:	e0bffe17 	ldw	r2,-8(fp)
  809ea0:	e0bffd15 	stw	r2,-12(fp)

  _alt_nticks++;

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
  809ea4:	e0fffd17 	ldw	r3,-12(fp)
  809ea8:	d0a00b04 	addi	r2,gp,-32724
  809eac:	18bfcf1e 	bne	r3,r2,809dec <__alt_mem_onchip_mem+0xff801dec>

  /* 
   * Update the operating system specific timer facilities.
   */

  ALT_OS_TIME_TICK();
  809eb0:	0001883a 	nop
}
  809eb4:	0001883a 	nop
  809eb8:	e037883a 	mov	sp,fp
  809ebc:	dfc00117 	ldw	ra,4(sp)
  809ec0:	df000017 	ldw	fp,0(sp)
  809ec4:	dec00204 	addi	sp,sp,8
  809ec8:	f800283a 	ret

00809ecc <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
  809ecc:	defffe04 	addi	sp,sp,-8
  809ed0:	dfc00115 	stw	ra,4(sp)
  809ed4:	df000015 	stw	fp,0(sp)
  809ed8:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
  809edc:	d0a00917 	ldw	r2,-32732(gp)
  809ee0:	10000326 	beq	r2,zero,809ef0 <alt_get_errno+0x24>
  809ee4:	d0a00917 	ldw	r2,-32732(gp)
  809ee8:	103ee83a 	callr	r2
  809eec:	00000106 	br	809ef4 <alt_get_errno+0x28>
  809ef0:	d0a72a04 	addi	r2,gp,-25432
}
  809ef4:	e037883a 	mov	sp,fp
  809ef8:	dfc00117 	ldw	ra,4(sp)
  809efc:	df000017 	ldw	fp,0(sp)
  809f00:	dec00204 	addi	sp,sp,8
  809f04:	f800283a 	ret

00809f08 <write>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_WRITE (int file, const void *ptr, size_t len)
{
  809f08:	defff904 	addi	sp,sp,-28
  809f0c:	dfc00615 	stw	ra,24(sp)
  809f10:	df000515 	stw	fp,20(sp)
  809f14:	df000504 	addi	fp,sp,20
  809f18:	e13ffd15 	stw	r4,-12(fp)
  809f1c:	e17ffe15 	stw	r5,-8(fp)
  809f20:	e1bfff15 	stw	r6,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
  809f24:	e0bffd17 	ldw	r2,-12(fp)
  809f28:	10000616 	blt	r2,zero,809f44 <write+0x3c>
  809f2c:	e0bffd17 	ldw	r2,-12(fp)
  809f30:	10c00324 	muli	r3,r2,12
  809f34:	00802074 	movhi	r2,129
  809f38:	10b84f04 	addi	r2,r2,-7876
  809f3c:	1885883a 	add	r2,r3,r2
  809f40:	00000106 	br	809f48 <write+0x40>
  809f44:	0005883a 	mov	r2,zero
  809f48:	e0bffb15 	stw	r2,-20(fp)
  
  if (fd)
  809f4c:	e0bffb17 	ldw	r2,-20(fp)
  809f50:	10002126 	beq	r2,zero,809fd8 <write+0xd0>
     * If the file has not been opened with write access, or if the driver does
     * not provide an implementation of write(), generate an error. Otherwise
     * call the drivers write() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_RDONLY) && fd->dev->write)
  809f54:	e0bffb17 	ldw	r2,-20(fp)
  809f58:	10800217 	ldw	r2,8(r2)
  809f5c:	108000cc 	andi	r2,r2,3
  809f60:	10001826 	beq	r2,zero,809fc4 <write+0xbc>
  809f64:	e0bffb17 	ldw	r2,-20(fp)
  809f68:	10800017 	ldw	r2,0(r2)
  809f6c:	10800617 	ldw	r2,24(r2)
  809f70:	10001426 	beq	r2,zero,809fc4 <write+0xbc>
    {
      
      /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */
      ALT_LOG_WRITE_FUNCTION(ptr,len);

      if ((rval = fd->dev->write(fd, ptr, len)) < 0)
  809f74:	e0bffb17 	ldw	r2,-20(fp)
  809f78:	10800017 	ldw	r2,0(r2)
  809f7c:	10800617 	ldw	r2,24(r2)
  809f80:	e0ffff17 	ldw	r3,-4(fp)
  809f84:	180d883a 	mov	r6,r3
  809f88:	e17ffe17 	ldw	r5,-8(fp)
  809f8c:	e13ffb17 	ldw	r4,-20(fp)
  809f90:	103ee83a 	callr	r2
  809f94:	e0bffc15 	stw	r2,-16(fp)
  809f98:	e0bffc17 	ldw	r2,-16(fp)
  809f9c:	1000070e 	bge	r2,zero,809fbc <write+0xb4>
      {
        ALT_ERRNO = -rval;
  809fa0:	0809ecc0 	call	809ecc <alt_get_errno>
  809fa4:	1007883a 	mov	r3,r2
  809fa8:	e0bffc17 	ldw	r2,-16(fp)
  809fac:	0085c83a 	sub	r2,zero,r2
  809fb0:	18800015 	stw	r2,0(r3)
        return -1;
  809fb4:	00bfffc4 	movi	r2,-1
  809fb8:	00000c06 	br	809fec <write+0xe4>
      }
      return rval;
  809fbc:	e0bffc17 	ldw	r2,-16(fp)
  809fc0:	00000a06 	br	809fec <write+0xe4>
    }
    else
    {
      ALT_ERRNO = EACCES;
  809fc4:	0809ecc0 	call	809ecc <alt_get_errno>
  809fc8:	1007883a 	mov	r3,r2
  809fcc:	00800344 	movi	r2,13
  809fd0:	18800015 	stw	r2,0(r3)
  809fd4:	00000406 	br	809fe8 <write+0xe0>
    }
  }
  else  
  {
    ALT_ERRNO = EBADFD;
  809fd8:	0809ecc0 	call	809ecc <alt_get_errno>
  809fdc:	1007883a 	mov	r3,r2
  809fe0:	00801444 	movi	r2,81
  809fe4:	18800015 	stw	r2,0(r3)
  }
  return -1;
  809fe8:	00bfffc4 	movi	r2,-1
}
  809fec:	e037883a 	mov	sp,fp
  809ff0:	dfc00117 	ldw	ra,4(sp)
  809ff4:	df000017 	ldw	fp,0(sp)
  809ff8:	dec00204 	addi	sp,sp,8
  809ffc:	f800283a 	ret

0080a000 <alt_dev_reg>:
 */

extern int alt_fs_reg  (alt_dev* dev); 

static ALT_INLINE int alt_dev_reg (alt_dev* dev)
{
  80a000:	defffd04 	addi	sp,sp,-12
  80a004:	dfc00215 	stw	ra,8(sp)
  80a008:	df000115 	stw	fp,4(sp)
  80a00c:	df000104 	addi	fp,sp,4
  80a010:	e13fff15 	stw	r4,-4(fp)
  extern alt_llist alt_dev_list;

  return alt_dev_llist_insert ((alt_dev_llist*) dev, &alt_dev_list);
  80a014:	d1600604 	addi	r5,gp,-32744
  80a018:	e13fff17 	ldw	r4,-4(fp)
  80a01c:	080c4980 	call	80c498 <alt_dev_llist_insert>
}
  80a020:	e037883a 	mov	sp,fp
  80a024:	dfc00117 	ldw	ra,4(sp)
  80a028:	df000017 	ldw	fp,0(sp)
  80a02c:	dec00204 	addi	sp,sp,8
  80a030:	f800283a 	ret

0080a034 <alt_irq_init>:
 * The "base" parameter is ignored and only
 * present for backwards-compatibility.
 */

void alt_irq_init ( const void* base )
{
  80a034:	defffd04 	addi	sp,sp,-12
  80a038:	dfc00215 	stw	ra,8(sp)
  80a03c:	df000115 	stw	fp,4(sp)
  80a040:	df000104 	addi	fp,sp,4
  80a044:	e13fff15 	stw	r4,-4(fp)
    ALTERA_NIOS2_GEN2_IRQ_INIT ( CPU, cpu);
  80a048:	080cc940 	call	80cc94 <altera_nios2_gen2_irq_init>
 * alt_irq_cpu_enable_interrupts() enables the CPU to start taking interrupts.
 */
static ALT_INLINE void ALT_ALWAYS_INLINE 
       alt_irq_cpu_enable_interrupts (void)
{
    NIOS2_WRITE_STATUS(NIOS2_STATUS_PIE_MSK
  80a04c:	00800044 	movi	r2,1
  80a050:	1001703a 	wrctl	status,r2
    alt_irq_cpu_enable_interrupts();
}
  80a054:	0001883a 	nop
  80a058:	e037883a 	mov	sp,fp
  80a05c:	dfc00117 	ldw	ra,4(sp)
  80a060:	df000017 	ldw	fp,0(sp)
  80a064:	dec00204 	addi	sp,sp,8
  80a068:	f800283a 	ret

0080a06c <alt_sys_init>:
 * Initialize the non-interrupt controller devices.
 * Called after alt_irq_init().
 */

void alt_sys_init( void )
{
  80a06c:	defffe04 	addi	sp,sp,-8
  80a070:	dfc00115 	stw	ra,4(sp)
  80a074:	df000015 	stw	fp,0(sp)
  80a078:	d839883a 	mov	fp,sp
    ALTERA_AVALON_TIMER_INIT ( TIMER_0, timer_0);
  80a07c:	01c0fa04 	movi	r7,1000
  80a080:	01800084 	movi	r6,2
  80a084:	000b883a 	mov	r5,zero
  80a088:	01004074 	movhi	r4,257
  80a08c:	21040804 	addi	r4,r4,4128
  80a090:	080bac00 	call	80bac0 <alt_avalon_timer_sc_init>
    ALTERA_AVALON_TIMER_INIT ( TIMER_1, timer_1);
    ALTERA_AVALON_JTAG_UART_INIT ( JTAG_UART, jtag_uart);
  80a094:	01800044 	movi	r6,1
  80a098:	000b883a 	mov	r5,zero
  80a09c:	01002074 	movhi	r4,129
  80a0a0:	2138b904 	addi	r4,r4,-7452
  80a0a4:	080a2680 	call	80a268 <altera_avalon_jtag_uart_init>
  80a0a8:	01002074 	movhi	r4,129
  80a0ac:	2138af04 	addi	r4,r4,-7492
  80a0b0:	080a0000 	call	80a000 <alt_dev_reg>
    ALTERA_AVALON_LCD_16207_INIT ( LCD, lcd);
  80a0b4:	01002074 	movhi	r4,129
  80a0b8:	213cd104 	addi	r4,r4,-3260
  80a0bc:	080b8b40 	call	80b8b4 <altera_avalon_lcd_16207_init>
  80a0c0:	01002074 	movhi	r4,129
  80a0c4:	213cc704 	addi	r4,r4,-3300
  80a0c8:	080a0000 	call	80a000 <alt_dev_reg>
    ALTERA_AVALON_UART_INIT ( UART, uart);
  80a0cc:	000d883a 	mov	r6,zero
  80a0d0:	000b883a 	mov	r5,zero
  80a0d4:	01002074 	movhi	r4,129
  80a0d8:	213d1904 	addi	r4,r4,-2972
  80a0dc:	080bc4c0 	call	80bc4c <altera_avalon_uart_init>
  80a0e0:	01002074 	movhi	r4,129
  80a0e4:	213d0f04 	addi	r4,r4,-3012
  80a0e8:	080a0000 	call	80a000 <alt_dev_reg>
}
  80a0ec:	0001883a 	nop
  80a0f0:	e037883a 	mov	sp,fp
  80a0f4:	dfc00117 	ldw	ra,4(sp)
  80a0f8:	df000017 	ldw	fp,0(sp)
  80a0fc:	dec00204 	addi	sp,sp,8
  80a100:	f800283a 	ret

0080a104 <altera_avalon_jtag_uart_read_fd>:
 *
 */

int 
altera_avalon_jtag_uart_read_fd(alt_fd* fd, char* buffer, int space)
{
  80a104:	defffa04 	addi	sp,sp,-24
  80a108:	dfc00515 	stw	ra,20(sp)
  80a10c:	df000415 	stw	fp,16(sp)
  80a110:	df000404 	addi	fp,sp,16
  80a114:	e13ffd15 	stw	r4,-12(fp)
  80a118:	e17ffe15 	stw	r5,-8(fp)
  80a11c:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
  80a120:	e0bffd17 	ldw	r2,-12(fp)
  80a124:	10800017 	ldw	r2,0(r2)
  80a128:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_read(&dev->state, buffer, space,
  80a12c:	e0bffc17 	ldw	r2,-16(fp)
  80a130:	10c00a04 	addi	r3,r2,40
  80a134:	e0bffd17 	ldw	r2,-12(fp)
  80a138:	10800217 	ldw	r2,8(r2)
  80a13c:	100f883a 	mov	r7,r2
  80a140:	e1bfff17 	ldw	r6,-4(fp)
  80a144:	e17ffe17 	ldw	r5,-8(fp)
  80a148:	1809883a 	mov	r4,r3
  80a14c:	080a72c0 	call	80a72c <altera_avalon_jtag_uart_read>
      fd->fd_flags);
}
  80a150:	e037883a 	mov	sp,fp
  80a154:	dfc00117 	ldw	ra,4(sp)
  80a158:	df000017 	ldw	fp,0(sp)
  80a15c:	dec00204 	addi	sp,sp,8
  80a160:	f800283a 	ret

0080a164 <altera_avalon_jtag_uart_write_fd>:

int 
altera_avalon_jtag_uart_write_fd(alt_fd* fd, const char* buffer, int space)
{
  80a164:	defffa04 	addi	sp,sp,-24
  80a168:	dfc00515 	stw	ra,20(sp)
  80a16c:	df000415 	stw	fp,16(sp)
  80a170:	df000404 	addi	fp,sp,16
  80a174:	e13ffd15 	stw	r4,-12(fp)
  80a178:	e17ffe15 	stw	r5,-8(fp)
  80a17c:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
  80a180:	e0bffd17 	ldw	r2,-12(fp)
  80a184:	10800017 	ldw	r2,0(r2)
  80a188:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_write(&dev->state, buffer, space,
  80a18c:	e0bffc17 	ldw	r2,-16(fp)
  80a190:	10c00a04 	addi	r3,r2,40
  80a194:	e0bffd17 	ldw	r2,-12(fp)
  80a198:	10800217 	ldw	r2,8(r2)
  80a19c:	100f883a 	mov	r7,r2
  80a1a0:	e1bfff17 	ldw	r6,-4(fp)
  80a1a4:	e17ffe17 	ldw	r5,-8(fp)
  80a1a8:	1809883a 	mov	r4,r3
  80a1ac:	080a9480 	call	80a948 <altera_avalon_jtag_uart_write>
      fd->fd_flags);
}
  80a1b0:	e037883a 	mov	sp,fp
  80a1b4:	dfc00117 	ldw	ra,4(sp)
  80a1b8:	df000017 	ldw	fp,0(sp)
  80a1bc:	dec00204 	addi	sp,sp,8
  80a1c0:	f800283a 	ret

0080a1c4 <altera_avalon_jtag_uart_close_fd>:

#ifndef ALTERA_AVALON_JTAG_UART_SMALL

int 
altera_avalon_jtag_uart_close_fd(alt_fd* fd)
{
  80a1c4:	defffc04 	addi	sp,sp,-16
  80a1c8:	dfc00315 	stw	ra,12(sp)
  80a1cc:	df000215 	stw	fp,8(sp)
  80a1d0:	df000204 	addi	fp,sp,8
  80a1d4:	e13fff15 	stw	r4,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
  80a1d8:	e0bfff17 	ldw	r2,-4(fp)
  80a1dc:	10800017 	ldw	r2,0(r2)
  80a1e0:	e0bffe15 	stw	r2,-8(fp)

    return altera_avalon_jtag_uart_close(&dev->state, fd->fd_flags);
  80a1e4:	e0bffe17 	ldw	r2,-8(fp)
  80a1e8:	10c00a04 	addi	r3,r2,40
  80a1ec:	e0bfff17 	ldw	r2,-4(fp)
  80a1f0:	10800217 	ldw	r2,8(r2)
  80a1f4:	100b883a 	mov	r5,r2
  80a1f8:	1809883a 	mov	r4,r3
  80a1fc:	080a5d40 	call	80a5d4 <altera_avalon_jtag_uart_close>
}
  80a200:	e037883a 	mov	sp,fp
  80a204:	dfc00117 	ldw	ra,4(sp)
  80a208:	df000017 	ldw	fp,0(sp)
  80a20c:	dec00204 	addi	sp,sp,8
  80a210:	f800283a 	ret

0080a214 <altera_avalon_jtag_uart_ioctl_fd>:

int 
altera_avalon_jtag_uart_ioctl_fd(alt_fd* fd, int req, void* arg)
{
  80a214:	defffa04 	addi	sp,sp,-24
  80a218:	dfc00515 	stw	ra,20(sp)
  80a21c:	df000415 	stw	fp,16(sp)
  80a220:	df000404 	addi	fp,sp,16
  80a224:	e13ffd15 	stw	r4,-12(fp)
  80a228:	e17ffe15 	stw	r5,-8(fp)
  80a22c:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev;
  80a230:	e0bffd17 	ldw	r2,-12(fp)
  80a234:	10800017 	ldw	r2,0(r2)
  80a238:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_ioctl(&dev->state, req, arg);
  80a23c:	e0bffc17 	ldw	r2,-16(fp)
  80a240:	10800a04 	addi	r2,r2,40
  80a244:	e1bfff17 	ldw	r6,-4(fp)
  80a248:	e17ffe17 	ldw	r5,-8(fp)
  80a24c:	1009883a 	mov	r4,r2
  80a250:	080a63c0 	call	80a63c <altera_avalon_jtag_uart_ioctl>
}
  80a254:	e037883a 	mov	sp,fp
  80a258:	dfc00117 	ldw	ra,4(sp)
  80a25c:	df000017 	ldw	fp,0(sp)
  80a260:	dec00204 	addi	sp,sp,8
  80a264:	f800283a 	ret

0080a268 <altera_avalon_jtag_uart_init>:
 * Return 1 on sucessful IRQ register and 0 on failure.
 */

void altera_avalon_jtag_uart_init(altera_avalon_jtag_uart_state* sp, 
                                  int irq_controller_id, int irq)
{
  80a268:	defffa04 	addi	sp,sp,-24
  80a26c:	dfc00515 	stw	ra,20(sp)
  80a270:	df000415 	stw	fp,16(sp)
  80a274:	df000404 	addi	fp,sp,16
  80a278:	e13ffd15 	stw	r4,-12(fp)
  80a27c:	e17ffe15 	stw	r5,-8(fp)
  80a280:	e1bfff15 	stw	r6,-4(fp)
  ALT_FLAG_CREATE(&sp->events, 0);
  ALT_SEM_CREATE(&sp->read_lock, 1);
  ALT_SEM_CREATE(&sp->write_lock, 1);

  /* enable read interrupts at the device */
  sp->irq_enable = ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
  80a284:	e0bffd17 	ldw	r2,-12(fp)
  80a288:	00c00044 	movi	r3,1
  80a28c:	10c00815 	stw	r3,32(r2)

  IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable); 
  80a290:	e0bffd17 	ldw	r2,-12(fp)
  80a294:	10800017 	ldw	r2,0(r2)
  80a298:	10800104 	addi	r2,r2,4
  80a29c:	1007883a 	mov	r3,r2
  80a2a0:	e0bffd17 	ldw	r2,-12(fp)
  80a2a4:	10800817 	ldw	r2,32(r2)
  80a2a8:	18800035 	stwio	r2,0(r3)
  
  /* register the interrupt handler */
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
  alt_ic_isr_register(irq_controller_id, irq, altera_avalon_jtag_uart_irq, 
  80a2ac:	e0bffe17 	ldw	r2,-8(fp)
  80a2b0:	e0ffff17 	ldw	r3,-4(fp)
  80a2b4:	d8000015 	stw	zero,0(sp)
  80a2b8:	e1fffd17 	ldw	r7,-12(fp)
  80a2bc:	01802074 	movhi	r6,129
  80a2c0:	31a8ca04 	addi	r6,r6,-23768
  80a2c4:	180b883a 	mov	r5,r3
  80a2c8:	1009883a 	mov	r4,r2
  80a2cc:	080c6300 	call	80c630 <alt_ic_isr_register>
#else
  alt_irq_register(irq, sp, altera_avalon_jtag_uart_irq);
#endif  

  /* Register an alarm to go off every second to check for presence of host */
  sp->host_inactive = 0;
  80a2d0:	e0bffd17 	ldw	r2,-12(fp)
  80a2d4:	10000915 	stw	zero,36(r2)

  if (alt_alarm_start(&sp->alarm, alt_ticks_per_second(), 
  80a2d8:	e0bffd17 	ldw	r2,-12(fp)
  80a2dc:	10800204 	addi	r2,r2,8
 * Obtain the system clock rate in ticks/s. 
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_ticks_per_second (void)
{
  return _alt_tick_rate;
  80a2e0:	d0e72e17 	ldw	r3,-25416(gp)
  80a2e4:	e1fffd17 	ldw	r7,-12(fp)
  80a2e8:	01802074 	movhi	r6,129
  80a2ec:	31a94d04 	addi	r6,r6,-23244
  80a2f0:	180b883a 	mov	r5,r3
  80a2f4:	1009883a 	mov	r4,r2
  80a2f8:	08093ec0 	call	8093ec <alt_alarm_start>
  80a2fc:	1000040e 	bge	r2,zero,80a310 <altera_avalon_jtag_uart_init+0xa8>
    &altera_avalon_jtag_uart_timeout, sp) < 0)
  {
    /* If we can't set the alarm then record "don't know if host present" 
     * and behave as though the host is present.
     */
    sp->timeout = INT_MAX;
  80a300:	e0fffd17 	ldw	r3,-12(fp)
  80a304:	00a00034 	movhi	r2,32768
  80a308:	10bfffc4 	addi	r2,r2,-1
  80a30c:	18800115 	stw	r2,4(r3)
  }

  /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */ 
  ALT_LOG_JTAG_UART_ALARM_REGISTER(sp, sp->base);
}
  80a310:	0001883a 	nop
  80a314:	e037883a 	mov	sp,fp
  80a318:	dfc00117 	ldw	ra,4(sp)
  80a31c:	df000017 	ldw	fp,0(sp)
  80a320:	dec00204 	addi	sp,sp,8
  80a324:	f800283a 	ret

0080a328 <altera_avalon_jtag_uart_irq>:
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
static void altera_avalon_jtag_uart_irq(void* context)
#else
static void altera_avalon_jtag_uart_irq(void* context, alt_u32 id)
#endif
{
  80a328:	defff804 	addi	sp,sp,-32
  80a32c:	df000715 	stw	fp,28(sp)
  80a330:	df000704 	addi	fp,sp,28
  80a334:	e13fff15 	stw	r4,-4(fp)
  altera_avalon_jtag_uart_state* sp = (altera_avalon_jtag_uart_state*) context;
  80a338:	e0bfff17 	ldw	r2,-4(fp)
  80a33c:	e0bffb15 	stw	r2,-20(fp)
  unsigned int base = sp->base;
  80a340:	e0bffb17 	ldw	r2,-20(fp)
  80a344:	10800017 	ldw	r2,0(r2)
  80a348:	e0bffc15 	stw	r2,-16(fp)
  /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */ 
  ALT_LOG_JTAG_UART_ISR_FUNCTION(base, sp);

  for ( ; ; )
  {
    unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
  80a34c:	e0bffc17 	ldw	r2,-16(fp)
  80a350:	10800104 	addi	r2,r2,4
  80a354:	10800037 	ldwio	r2,0(r2)
  80a358:	e0bffd15 	stw	r2,-12(fp)

    /* Return once nothing more to do */
    if ((control & (ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK | ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)) == 0)
  80a35c:	e0bffd17 	ldw	r2,-12(fp)
  80a360:	1080c00c 	andi	r2,r2,768
  80a364:	10006d26 	beq	r2,zero,80a51c <altera_avalon_jtag_uart_irq+0x1f4>
      break;

    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK)
  80a368:	e0bffd17 	ldw	r2,-12(fp)
  80a36c:	1080400c 	andi	r2,r2,256
  80a370:	10003526 	beq	r2,zero,80a448 <altera_avalon_jtag_uart_irq+0x120>
    {
      /* process a read irq.  Start by assuming that there is data in the
       * receive FIFO (otherwise why would we have been interrupted?)
       */
      unsigned int data = 1 << ALTERA_AVALON_JTAG_UART_DATA_RAVAIL_OFST;
  80a374:	00800074 	movhi	r2,1
  80a378:	e0bff915 	stw	r2,-28(fp)
      for ( ; ; )
      {
        /* Check whether there is space in the buffer.  If not then we must not
         * read any characters from the buffer as they will be lost.
         */
        unsigned int next = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
  80a37c:	e0bffb17 	ldw	r2,-20(fp)
  80a380:	10800a17 	ldw	r2,40(r2)
  80a384:	10800044 	addi	r2,r2,1
  80a388:	1081ffcc 	andi	r2,r2,2047
  80a38c:	e0bffe15 	stw	r2,-8(fp)
        if (next == sp->rx_out)
  80a390:	e0bffb17 	ldw	r2,-20(fp)
  80a394:	10c00b17 	ldw	r3,44(r2)
  80a398:	e0bffe17 	ldw	r2,-8(fp)
  80a39c:	18801526 	beq	r3,r2,80a3f4 <altera_avalon_jtag_uart_irq+0xcc>
          break;

        /* Try to remove a character from the FIFO and find out whether there
         * are any more characters remaining.
         */
        data = IORD_ALTERA_AVALON_JTAG_UART_DATA(base);
  80a3a0:	e0bffc17 	ldw	r2,-16(fp)
  80a3a4:	10800037 	ldwio	r2,0(r2)
  80a3a8:	e0bff915 	stw	r2,-28(fp)
        
        if ((data & ALTERA_AVALON_JTAG_UART_DATA_RVALID_MSK) == 0)
  80a3ac:	e0bff917 	ldw	r2,-28(fp)
  80a3b0:	10a0000c 	andi	r2,r2,32768
  80a3b4:	10001126 	beq	r2,zero,80a3fc <altera_avalon_jtag_uart_irq+0xd4>
          break;

        sp->rx_buf[sp->rx_in] = (data & ALTERA_AVALON_JTAG_UART_DATA_DATA_MSK) >> ALTERA_AVALON_JTAG_UART_DATA_DATA_OFST;
  80a3b8:	e0bffb17 	ldw	r2,-20(fp)
  80a3bc:	10800a17 	ldw	r2,40(r2)
  80a3c0:	e0fff917 	ldw	r3,-28(fp)
  80a3c4:	1809883a 	mov	r4,r3
  80a3c8:	e0fffb17 	ldw	r3,-20(fp)
  80a3cc:	1885883a 	add	r2,r3,r2
  80a3d0:	10800e04 	addi	r2,r2,56
  80a3d4:	11000005 	stb	r4,0(r2)
        sp->rx_in = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
  80a3d8:	e0bffb17 	ldw	r2,-20(fp)
  80a3dc:	10800a17 	ldw	r2,40(r2)
  80a3e0:	10800044 	addi	r2,r2,1
  80a3e4:	10c1ffcc 	andi	r3,r2,2047
  80a3e8:	e0bffb17 	ldw	r2,-20(fp)
  80a3ec:	10c00a15 	stw	r3,40(r2)

        /* Post an event to notify jtag_uart_read that a character has been read */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_READ_RDY, OS_FLAG_SET);
      }
  80a3f0:	003fe206 	br	80a37c <__alt_mem_onchip_mem+0xff80237c>
        /* Check whether there is space in the buffer.  If not then we must not
         * read any characters from the buffer as they will be lost.
         */
        unsigned int next = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
        if (next == sp->rx_out)
          break;
  80a3f4:	0001883a 	nop
  80a3f8:	00000106 	br	80a400 <altera_avalon_jtag_uart_irq+0xd8>
         * are any more characters remaining.
         */
        data = IORD_ALTERA_AVALON_JTAG_UART_DATA(base);
        
        if ((data & ALTERA_AVALON_JTAG_UART_DATA_RVALID_MSK) == 0)
          break;
  80a3fc:	0001883a 	nop

        /* Post an event to notify jtag_uart_read that a character has been read */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_READ_RDY, OS_FLAG_SET);
      }

      if (data & ALTERA_AVALON_JTAG_UART_DATA_RAVAIL_MSK)
  80a400:	e0bff917 	ldw	r2,-28(fp)
  80a404:	10bfffec 	andhi	r2,r2,65535
  80a408:	10000f26 	beq	r2,zero,80a448 <altera_avalon_jtag_uart_irq+0x120>
      {
        /* If there is still data available here then the buffer is full 
         * so turn off receive interrupts until some space becomes available.
         */
        sp->irq_enable &= ~ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
  80a40c:	e0bffb17 	ldw	r2,-20(fp)
  80a410:	10c00817 	ldw	r3,32(r2)
  80a414:	00bfff84 	movi	r2,-2
  80a418:	1886703a 	and	r3,r3,r2
  80a41c:	e0bffb17 	ldw	r2,-20(fp)
  80a420:	10c00815 	stw	r3,32(r2)
        IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(base, sp->irq_enable);
  80a424:	e0bffc17 	ldw	r2,-16(fp)
  80a428:	10800104 	addi	r2,r2,4
  80a42c:	1007883a 	mov	r3,r2
  80a430:	e0bffb17 	ldw	r2,-20(fp)
  80a434:	10800817 	ldw	r2,32(r2)
  80a438:	18800035 	stwio	r2,0(r3)
        
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
  80a43c:	e0bffc17 	ldw	r2,-16(fp)
  80a440:	10800104 	addi	r2,r2,4
  80a444:	10800037 	ldwio	r2,0(r2)
      }
    }

    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)
  80a448:	e0bffd17 	ldw	r2,-12(fp)
  80a44c:	1080800c 	andi	r2,r2,512
  80a450:	103fbe26 	beq	r2,zero,80a34c <__alt_mem_onchip_mem+0xff80234c>
    {
      /* process a write irq */
      unsigned int space = (control & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) >> ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_OFST;
  80a454:	e0bffd17 	ldw	r2,-12(fp)
  80a458:	1004d43a 	srli	r2,r2,16
  80a45c:	e0bffa15 	stw	r2,-24(fp)

      while (space > 0 && sp->tx_out != sp->tx_in)
  80a460:	00001406 	br	80a4b4 <altera_avalon_jtag_uart_irq+0x18c>
      {
        IOWR_ALTERA_AVALON_JTAG_UART_DATA(base, sp->tx_buf[sp->tx_out]);
  80a464:	e0bffc17 	ldw	r2,-16(fp)
  80a468:	e0fffb17 	ldw	r3,-20(fp)
  80a46c:	18c00d17 	ldw	r3,52(r3)
  80a470:	e13ffb17 	ldw	r4,-20(fp)
  80a474:	20c7883a 	add	r3,r4,r3
  80a478:	18c20e04 	addi	r3,r3,2104
  80a47c:	18c00003 	ldbu	r3,0(r3)
  80a480:	18c03fcc 	andi	r3,r3,255
  80a484:	18c0201c 	xori	r3,r3,128
  80a488:	18ffe004 	addi	r3,r3,-128
  80a48c:	10c00035 	stwio	r3,0(r2)

        sp->tx_out = (sp->tx_out + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
  80a490:	e0bffb17 	ldw	r2,-20(fp)
  80a494:	10800d17 	ldw	r2,52(r2)
  80a498:	10800044 	addi	r2,r2,1
  80a49c:	10c1ffcc 	andi	r3,r2,2047
  80a4a0:	e0bffb17 	ldw	r2,-20(fp)
  80a4a4:	10c00d15 	stw	r3,52(r2)

        /* Post an event to notify jtag_uart_write that a character has been written */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_WRITE_RDY, OS_FLAG_SET);

        space--;
  80a4a8:	e0bffa17 	ldw	r2,-24(fp)
  80a4ac:	10bfffc4 	addi	r2,r2,-1
  80a4b0:	e0bffa15 	stw	r2,-24(fp)
    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)
    {
      /* process a write irq */
      unsigned int space = (control & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) >> ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_OFST;

      while (space > 0 && sp->tx_out != sp->tx_in)
  80a4b4:	e0bffa17 	ldw	r2,-24(fp)
  80a4b8:	10000526 	beq	r2,zero,80a4d0 <altera_avalon_jtag_uart_irq+0x1a8>
  80a4bc:	e0bffb17 	ldw	r2,-20(fp)
  80a4c0:	10c00d17 	ldw	r3,52(r2)
  80a4c4:	e0bffb17 	ldw	r2,-20(fp)
  80a4c8:	10800c17 	ldw	r2,48(r2)
  80a4cc:	18bfe51e 	bne	r3,r2,80a464 <__alt_mem_onchip_mem+0xff802464>
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_WRITE_RDY, OS_FLAG_SET);

        space--;
      }

      if (space > 0)
  80a4d0:	e0bffa17 	ldw	r2,-24(fp)
  80a4d4:	103f9d26 	beq	r2,zero,80a34c <__alt_mem_onchip_mem+0xff80234c>
      {
        /* If we don't have any more data available then turn off the TX interrupt */
        sp->irq_enable &= ~ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
  80a4d8:	e0bffb17 	ldw	r2,-20(fp)
  80a4dc:	10c00817 	ldw	r3,32(r2)
  80a4e0:	00bfff44 	movi	r2,-3
  80a4e4:	1886703a 	and	r3,r3,r2
  80a4e8:	e0bffb17 	ldw	r2,-20(fp)
  80a4ec:	10c00815 	stw	r3,32(r2)
        IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
  80a4f0:	e0bffb17 	ldw	r2,-20(fp)
  80a4f4:	10800017 	ldw	r2,0(r2)
  80a4f8:	10800104 	addi	r2,r2,4
  80a4fc:	1007883a 	mov	r3,r2
  80a500:	e0bffb17 	ldw	r2,-20(fp)
  80a504:	10800817 	ldw	r2,32(r2)
  80a508:	18800035 	stwio	r2,0(r3)
        
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
  80a50c:	e0bffc17 	ldw	r2,-16(fp)
  80a510:	10800104 	addi	r2,r2,4
  80a514:	10800037 	ldwio	r2,0(r2)
      }
    }
  }
  80a518:	003f8c06 	br	80a34c <__alt_mem_onchip_mem+0xff80234c>
  {
    unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);

    /* Return once nothing more to do */
    if ((control & (ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK | ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)) == 0)
      break;
  80a51c:	0001883a 	nop
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
      }
    }
  }
}
  80a520:	0001883a 	nop
  80a524:	e037883a 	mov	sp,fp
  80a528:	df000017 	ldw	fp,0(sp)
  80a52c:	dec00104 	addi	sp,sp,4
  80a530:	f800283a 	ret

0080a534 <altera_avalon_jtag_uart_timeout>:
 * Timeout routine is called every second
 */

static alt_u32 
altera_avalon_jtag_uart_timeout(void* context) 
{
  80a534:	defff804 	addi	sp,sp,-32
  80a538:	df000715 	stw	fp,28(sp)
  80a53c:	df000704 	addi	fp,sp,28
  80a540:	e13ffb15 	stw	r4,-20(fp)
  altera_avalon_jtag_uart_state* sp = (altera_avalon_jtag_uart_state *) context;
  80a544:	e0bffb17 	ldw	r2,-20(fp)
  80a548:	e0bff915 	stw	r2,-28(fp)

  unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base);
  80a54c:	e0bff917 	ldw	r2,-28(fp)
  80a550:	10800017 	ldw	r2,0(r2)
  80a554:	10800104 	addi	r2,r2,4
  80a558:	10800037 	ldwio	r2,0(r2)
  80a55c:	e0bffa15 	stw	r2,-24(fp)

  if (control & ALTERA_AVALON_JTAG_UART_CONTROL_AC_MSK)
  80a560:	e0bffa17 	ldw	r2,-24(fp)
  80a564:	1081000c 	andi	r2,r2,1024
  80a568:	10000b26 	beq	r2,zero,80a598 <altera_avalon_jtag_uart_timeout+0x64>
  {
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable | ALTERA_AVALON_JTAG_UART_CONTROL_AC_MSK);
  80a56c:	e0bff917 	ldw	r2,-28(fp)
  80a570:	10800017 	ldw	r2,0(r2)
  80a574:	10800104 	addi	r2,r2,4
  80a578:	1007883a 	mov	r3,r2
  80a57c:	e0bff917 	ldw	r2,-28(fp)
  80a580:	10800817 	ldw	r2,32(r2)
  80a584:	10810014 	ori	r2,r2,1024
  80a588:	18800035 	stwio	r2,0(r3)
    sp->host_inactive = 0;
  80a58c:	e0bff917 	ldw	r2,-28(fp)
  80a590:	10000915 	stw	zero,36(r2)
  80a594:	00000a06 	br	80a5c0 <altera_avalon_jtag_uart_timeout+0x8c>
  }
  else if (sp->host_inactive < INT_MAX - 2) {
  80a598:	e0bff917 	ldw	r2,-28(fp)
  80a59c:	10c00917 	ldw	r3,36(r2)
  80a5a0:	00a00034 	movhi	r2,32768
  80a5a4:	10bfff04 	addi	r2,r2,-4
  80a5a8:	10c00536 	bltu	r2,r3,80a5c0 <altera_avalon_jtag_uart_timeout+0x8c>
    sp->host_inactive++;
  80a5ac:	e0bff917 	ldw	r2,-28(fp)
  80a5b0:	10800917 	ldw	r2,36(r2)
  80a5b4:	10c00044 	addi	r3,r2,1
  80a5b8:	e0bff917 	ldw	r2,-28(fp)
  80a5bc:	10c00915 	stw	r3,36(r2)
  80a5c0:	d0a72e17 	ldw	r2,-25416(gp)
      ALT_FLAG_POST (sp->events, ALT_JTAG_UART_TIMEOUT, OS_FLAG_SET);
    }
  }

  return alt_ticks_per_second();
}
  80a5c4:	e037883a 	mov	sp,fp
  80a5c8:	df000017 	ldw	fp,0(sp)
  80a5cc:	dec00104 	addi	sp,sp,4
  80a5d0:	f800283a 	ret

0080a5d4 <altera_avalon_jtag_uart_close>:
 * The close routine is not implemented for the small driver; instead it will
 * map to null. This is because the small driver simply waits while characters
 * are transmitted; there is no interrupt-serviced buffer to empty 
 */
int altera_avalon_jtag_uart_close(altera_avalon_jtag_uart_state* sp, int flags)
{
  80a5d4:	defffd04 	addi	sp,sp,-12
  80a5d8:	df000215 	stw	fp,8(sp)
  80a5dc:	df000204 	addi	fp,sp,8
  80a5e0:	e13ffe15 	stw	r4,-8(fp)
  80a5e4:	e17fff15 	stw	r5,-4(fp)
  /* 
   * Wait for all transmit data to be emptied by the JTAG UART ISR, or
   * for a host-inactivity timeout, in which case transmit data will be lost
   */
  while ( (sp->tx_out != sp->tx_in) && (sp->host_inactive < sp->timeout) ) {
  80a5e8:	00000506 	br	80a600 <altera_avalon_jtag_uart_close+0x2c>
    if (flags & O_NONBLOCK) {
  80a5ec:	e0bfff17 	ldw	r2,-4(fp)
  80a5f0:	1090000c 	andi	r2,r2,16384
  80a5f4:	10000226 	beq	r2,zero,80a600 <altera_avalon_jtag_uart_close+0x2c>
      return -EWOULDBLOCK; 
  80a5f8:	00bffd44 	movi	r2,-11
  80a5fc:	00000b06 	br	80a62c <altera_avalon_jtag_uart_close+0x58>
{
  /* 
   * Wait for all transmit data to be emptied by the JTAG UART ISR, or
   * for a host-inactivity timeout, in which case transmit data will be lost
   */
  while ( (sp->tx_out != sp->tx_in) && (sp->host_inactive < sp->timeout) ) {
  80a600:	e0bffe17 	ldw	r2,-8(fp)
  80a604:	10c00d17 	ldw	r3,52(r2)
  80a608:	e0bffe17 	ldw	r2,-8(fp)
  80a60c:	10800c17 	ldw	r2,48(r2)
  80a610:	18800526 	beq	r3,r2,80a628 <altera_avalon_jtag_uart_close+0x54>
  80a614:	e0bffe17 	ldw	r2,-8(fp)
  80a618:	10c00917 	ldw	r3,36(r2)
  80a61c:	e0bffe17 	ldw	r2,-8(fp)
  80a620:	10800117 	ldw	r2,4(r2)
  80a624:	18bff136 	bltu	r3,r2,80a5ec <__alt_mem_onchip_mem+0xff8025ec>
    if (flags & O_NONBLOCK) {
      return -EWOULDBLOCK; 
    }
  }

  return 0;
  80a628:	0005883a 	mov	r2,zero
}
  80a62c:	e037883a 	mov	sp,fp
  80a630:	df000017 	ldw	fp,0(sp)
  80a634:	dec00104 	addi	sp,sp,4
  80a638:	f800283a 	ret

0080a63c <altera_avalon_jtag_uart_ioctl>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_ioctl(altera_avalon_jtag_uart_state* sp, int req,
  void* arg)
{
  80a63c:	defffa04 	addi	sp,sp,-24
  80a640:	df000515 	stw	fp,20(sp)
  80a644:	df000504 	addi	fp,sp,20
  80a648:	e13ffd15 	stw	r4,-12(fp)
  80a64c:	e17ffe15 	stw	r5,-8(fp)
  80a650:	e1bfff15 	stw	r6,-4(fp)
  int rc = -ENOTTY;
  80a654:	00bff9c4 	movi	r2,-25
  80a658:	e0bffb15 	stw	r2,-20(fp)

  switch (req)
  80a65c:	e0bffe17 	ldw	r2,-8(fp)
  80a660:	10da8060 	cmpeqi	r3,r2,27137
  80a664:	1800031e 	bne	r3,zero,80a674 <altera_avalon_jtag_uart_ioctl+0x38>
  80a668:	109a80a0 	cmpeqi	r2,r2,27138
  80a66c:	1000181e 	bne	r2,zero,80a6d0 <altera_avalon_jtag_uart_ioctl+0x94>
      rc = 0;
    }
    break;

  default:
    break;
  80a670:	00002906 	br	80a718 <altera_avalon_jtag_uart_ioctl+0xdc>

  switch (req)
  {
  case TIOCSTIMEOUT:
    /* Set the time to wait until assuming host is not connected */
    if (sp->timeout != INT_MAX)
  80a674:	e0bffd17 	ldw	r2,-12(fp)
  80a678:	10c00117 	ldw	r3,4(r2)
  80a67c:	00a00034 	movhi	r2,32768
  80a680:	10bfffc4 	addi	r2,r2,-1
  80a684:	18802126 	beq	r3,r2,80a70c <altera_avalon_jtag_uart_ioctl+0xd0>
    {
      int timeout = *((int *)arg);
  80a688:	e0bfff17 	ldw	r2,-4(fp)
  80a68c:	10800017 	ldw	r2,0(r2)
  80a690:	e0bffc15 	stw	r2,-16(fp)
      sp->timeout = (timeout >= 2 && timeout < INT_MAX) ? timeout : INT_MAX - 1;
  80a694:	e0bffc17 	ldw	r2,-16(fp)
  80a698:	10800090 	cmplti	r2,r2,2
  80a69c:	1000061e 	bne	r2,zero,80a6b8 <altera_avalon_jtag_uart_ioctl+0x7c>
  80a6a0:	e0fffc17 	ldw	r3,-16(fp)
  80a6a4:	00a00034 	movhi	r2,32768
  80a6a8:	10bfffc4 	addi	r2,r2,-1
  80a6ac:	18800226 	beq	r3,r2,80a6b8 <altera_avalon_jtag_uart_ioctl+0x7c>
  80a6b0:	e0bffc17 	ldw	r2,-16(fp)
  80a6b4:	00000206 	br	80a6c0 <altera_avalon_jtag_uart_ioctl+0x84>
  80a6b8:	00a00034 	movhi	r2,32768
  80a6bc:	10bfff84 	addi	r2,r2,-2
  80a6c0:	e0fffd17 	ldw	r3,-12(fp)
  80a6c4:	18800115 	stw	r2,4(r3)
      rc = 0;
  80a6c8:	e03ffb15 	stw	zero,-20(fp)
    }
    break;
  80a6cc:	00000f06 	br	80a70c <altera_avalon_jtag_uart_ioctl+0xd0>

  case TIOCGCONNECTED:
    /* Find out whether host is connected */
    if (sp->timeout != INT_MAX)
  80a6d0:	e0bffd17 	ldw	r2,-12(fp)
  80a6d4:	10c00117 	ldw	r3,4(r2)
  80a6d8:	00a00034 	movhi	r2,32768
  80a6dc:	10bfffc4 	addi	r2,r2,-1
  80a6e0:	18800c26 	beq	r3,r2,80a714 <altera_avalon_jtag_uart_ioctl+0xd8>
    {
      *((int *)arg) = (sp->host_inactive < sp->timeout) ? 1 : 0;
  80a6e4:	e0bffd17 	ldw	r2,-12(fp)
  80a6e8:	10c00917 	ldw	r3,36(r2)
  80a6ec:	e0bffd17 	ldw	r2,-12(fp)
  80a6f0:	10800117 	ldw	r2,4(r2)
  80a6f4:	1885803a 	cmpltu	r2,r3,r2
  80a6f8:	10c03fcc 	andi	r3,r2,255
  80a6fc:	e0bfff17 	ldw	r2,-4(fp)
  80a700:	10c00015 	stw	r3,0(r2)
      rc = 0;
  80a704:	e03ffb15 	stw	zero,-20(fp)
    }
    break;
  80a708:	00000206 	br	80a714 <altera_avalon_jtag_uart_ioctl+0xd8>
    {
      int timeout = *((int *)arg);
      sp->timeout = (timeout >= 2 && timeout < INT_MAX) ? timeout : INT_MAX - 1;
      rc = 0;
    }
    break;
  80a70c:	0001883a 	nop
  80a710:	00000106 	br	80a718 <altera_avalon_jtag_uart_ioctl+0xdc>
    if (sp->timeout != INT_MAX)
    {
      *((int *)arg) = (sp->host_inactive < sp->timeout) ? 1 : 0;
      rc = 0;
    }
    break;
  80a714:	0001883a 	nop

  default:
    break;
  }

  return rc;
  80a718:	e0bffb17 	ldw	r2,-20(fp)
}
  80a71c:	e037883a 	mov	sp,fp
  80a720:	df000017 	ldw	fp,0(sp)
  80a724:	dec00104 	addi	sp,sp,4
  80a728:	f800283a 	ret

0080a72c <altera_avalon_jtag_uart_read>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_read(altera_avalon_jtag_uart_state* sp, 
  char * buffer, int space, int flags)
{
  80a72c:	defff304 	addi	sp,sp,-52
  80a730:	dfc00c15 	stw	ra,48(sp)
  80a734:	df000b15 	stw	fp,44(sp)
  80a738:	df000b04 	addi	fp,sp,44
  80a73c:	e13ffc15 	stw	r4,-16(fp)
  80a740:	e17ffd15 	stw	r5,-12(fp)
  80a744:	e1bffe15 	stw	r6,-8(fp)
  80a748:	e1ffff15 	stw	r7,-4(fp)
  char * ptr = buffer;
  80a74c:	e0bffd17 	ldw	r2,-12(fp)
  80a750:	e0bff515 	stw	r2,-44(fp)
   * When running in a multi threaded environment, obtain the "read_lock"
   * semaphore. This ensures that reading from the device is thread-safe.
   */
  ALT_SEM_PEND (sp->read_lock, 0);

  while (space > 0)
  80a754:	00004706 	br	80a874 <altera_avalon_jtag_uart_read+0x148>
    unsigned int in, out;

    /* Read as much data as possible */
    do
    {
      in  = sp->rx_in;
  80a758:	e0bffc17 	ldw	r2,-16(fp)
  80a75c:	10800a17 	ldw	r2,40(r2)
  80a760:	e0bff715 	stw	r2,-36(fp)
      out = sp->rx_out;
  80a764:	e0bffc17 	ldw	r2,-16(fp)
  80a768:	10800b17 	ldw	r2,44(r2)
  80a76c:	e0bff815 	stw	r2,-32(fp)

      if (in >= out)
  80a770:	e0fff717 	ldw	r3,-36(fp)
  80a774:	e0bff817 	ldw	r2,-32(fp)
  80a778:	18800536 	bltu	r3,r2,80a790 <altera_avalon_jtag_uart_read+0x64>
        n = in - out;
  80a77c:	e0fff717 	ldw	r3,-36(fp)
  80a780:	e0bff817 	ldw	r2,-32(fp)
  80a784:	1885c83a 	sub	r2,r3,r2
  80a788:	e0bff615 	stw	r2,-40(fp)
  80a78c:	00000406 	br	80a7a0 <altera_avalon_jtag_uart_read+0x74>
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - out;
  80a790:	00c20004 	movi	r3,2048
  80a794:	e0bff817 	ldw	r2,-32(fp)
  80a798:	1885c83a 	sub	r2,r3,r2
  80a79c:	e0bff615 	stw	r2,-40(fp)

      if (n == 0)
  80a7a0:	e0bff617 	ldw	r2,-40(fp)
  80a7a4:	10001e26 	beq	r2,zero,80a820 <altera_avalon_jtag_uart_read+0xf4>
        break; /* No more data available */

      if (n > space)
  80a7a8:	e0fffe17 	ldw	r3,-8(fp)
  80a7ac:	e0bff617 	ldw	r2,-40(fp)
  80a7b0:	1880022e 	bgeu	r3,r2,80a7bc <altera_avalon_jtag_uart_read+0x90>
        n = space;
  80a7b4:	e0bffe17 	ldw	r2,-8(fp)
  80a7b8:	e0bff615 	stw	r2,-40(fp)

      memcpy(ptr, sp->rx_buf + out, n);
  80a7bc:	e0bffc17 	ldw	r2,-16(fp)
  80a7c0:	10c00e04 	addi	r3,r2,56
  80a7c4:	e0bff817 	ldw	r2,-32(fp)
  80a7c8:	1885883a 	add	r2,r3,r2
  80a7cc:	e1bff617 	ldw	r6,-40(fp)
  80a7d0:	100b883a 	mov	r5,r2
  80a7d4:	e13ff517 	ldw	r4,-44(fp)
  80a7d8:	0807a640 	call	807a64 <memcpy>
      ptr   += n;
  80a7dc:	e0fff517 	ldw	r3,-44(fp)
  80a7e0:	e0bff617 	ldw	r2,-40(fp)
  80a7e4:	1885883a 	add	r2,r3,r2
  80a7e8:	e0bff515 	stw	r2,-44(fp)
      space -= n;
  80a7ec:	e0fffe17 	ldw	r3,-8(fp)
  80a7f0:	e0bff617 	ldw	r2,-40(fp)
  80a7f4:	1885c83a 	sub	r2,r3,r2
  80a7f8:	e0bffe15 	stw	r2,-8(fp)

      sp->rx_out = (out + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
  80a7fc:	e0fff817 	ldw	r3,-32(fp)
  80a800:	e0bff617 	ldw	r2,-40(fp)
  80a804:	1885883a 	add	r2,r3,r2
  80a808:	10c1ffcc 	andi	r3,r2,2047
  80a80c:	e0bffc17 	ldw	r2,-16(fp)
  80a810:	10c00b15 	stw	r3,44(r2)
    }
    while (space > 0);
  80a814:	e0bffe17 	ldw	r2,-8(fp)
  80a818:	00bfcf16 	blt	zero,r2,80a758 <__alt_mem_onchip_mem+0xff802758>
  80a81c:	00000106 	br	80a824 <altera_avalon_jtag_uart_read+0xf8>
        n = in - out;
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - out;

      if (n == 0)
        break; /* No more data available */
  80a820:	0001883a 	nop
      sp->rx_out = (out + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
    }
    while (space > 0);

    /* If we read any data then return it */
    if (ptr != buffer)
  80a824:	e0fff517 	ldw	r3,-44(fp)
  80a828:	e0bffd17 	ldw	r2,-12(fp)
  80a82c:	1880141e 	bne	r3,r2,80a880 <altera_avalon_jtag_uart_read+0x154>
      break;

    /* If in non-blocking mode then return error */
    if (flags & O_NONBLOCK)
  80a830:	e0bfff17 	ldw	r2,-4(fp)
  80a834:	1090000c 	andi	r2,r2,16384
  80a838:	1000131e 	bne	r2,zero,80a888 <altera_avalon_jtag_uart_read+0x15c>
      while (in == sp->rx_in && sp->host_inactive < sp->timeout)
        ;
    }
#else
    /* No OS: Always spin */
    while (in == sp->rx_in && sp->host_inactive < sp->timeout)
  80a83c:	0001883a 	nop
  80a840:	e0bffc17 	ldw	r2,-16(fp)
  80a844:	10c00a17 	ldw	r3,40(r2)
  80a848:	e0bff717 	ldw	r2,-36(fp)
  80a84c:	1880051e 	bne	r3,r2,80a864 <altera_avalon_jtag_uart_read+0x138>
  80a850:	e0bffc17 	ldw	r2,-16(fp)
  80a854:	10c00917 	ldw	r3,36(r2)
  80a858:	e0bffc17 	ldw	r2,-16(fp)
  80a85c:	10800117 	ldw	r2,4(r2)
  80a860:	18bff736 	bltu	r3,r2,80a840 <__alt_mem_onchip_mem+0xff802840>
      ;
#endif /* __ucosii__ */

    if (in == sp->rx_in)
  80a864:	e0bffc17 	ldw	r2,-16(fp)
  80a868:	10c00a17 	ldw	r3,40(r2)
  80a86c:	e0bff717 	ldw	r2,-36(fp)
  80a870:	18800726 	beq	r3,r2,80a890 <altera_avalon_jtag_uart_read+0x164>
   * When running in a multi threaded environment, obtain the "read_lock"
   * semaphore. This ensures that reading from the device is thread-safe.
   */
  ALT_SEM_PEND (sp->read_lock, 0);

  while (space > 0)
  80a874:	e0bffe17 	ldw	r2,-8(fp)
  80a878:	00bfb716 	blt	zero,r2,80a758 <__alt_mem_onchip_mem+0xff802758>
  80a87c:	00000506 	br	80a894 <altera_avalon_jtag_uart_read+0x168>
    }
    while (space > 0);

    /* If we read any data then return it */
    if (ptr != buffer)
      break;
  80a880:	0001883a 	nop
  80a884:	00000306 	br	80a894 <altera_avalon_jtag_uart_read+0x168>

    /* If in non-blocking mode then return error */
    if (flags & O_NONBLOCK)
      break;
  80a888:	0001883a 	nop
  80a88c:	00000106 	br	80a894 <altera_avalon_jtag_uart_read+0x168>
    while (in == sp->rx_in && sp->host_inactive < sp->timeout)
      ;
#endif /* __ucosii__ */

    if (in == sp->rx_in)
      break;
  80a890:	0001883a 	nop
   * semaphore so that other threads can access the buffer.
   */

  ALT_SEM_POST (sp->read_lock);

  if (ptr != buffer)
  80a894:	e0fff517 	ldw	r3,-44(fp)
  80a898:	e0bffd17 	ldw	r2,-12(fp)
  80a89c:	18801826 	beq	r3,r2,80a900 <altera_avalon_jtag_uart_read+0x1d4>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  80a8a0:	0005303a 	rdctl	r2,status
  80a8a4:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  80a8a8:	e0fffb17 	ldw	r3,-20(fp)
  80a8ac:	00bfff84 	movi	r2,-2
  80a8b0:	1884703a 	and	r2,r3,r2
  80a8b4:	1001703a 	wrctl	status,r2
  
  return context;
  80a8b8:	e0bffb17 	ldw	r2,-20(fp)
  {
    /* If we read any data then there is space in the buffer so enable interrupts */
    context = alt_irq_disable_all();
  80a8bc:	e0bffa15 	stw	r2,-24(fp)
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
  80a8c0:	e0bffc17 	ldw	r2,-16(fp)
  80a8c4:	10800817 	ldw	r2,32(r2)
  80a8c8:	10c00054 	ori	r3,r2,1
  80a8cc:	e0bffc17 	ldw	r2,-16(fp)
  80a8d0:	10c00815 	stw	r3,32(r2)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
  80a8d4:	e0bffc17 	ldw	r2,-16(fp)
  80a8d8:	10800017 	ldw	r2,0(r2)
  80a8dc:	10800104 	addi	r2,r2,4
  80a8e0:	1007883a 	mov	r3,r2
  80a8e4:	e0bffc17 	ldw	r2,-16(fp)
  80a8e8:	10800817 	ldw	r2,32(r2)
  80a8ec:	18800035 	stwio	r2,0(r3)
  80a8f0:	e0bffa17 	ldw	r2,-24(fp)
  80a8f4:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  80a8f8:	e0bff917 	ldw	r2,-28(fp)
  80a8fc:	1001703a 	wrctl	status,r2
    alt_irq_enable_all(context);
  }

  if (ptr != buffer)
  80a900:	e0fff517 	ldw	r3,-44(fp)
  80a904:	e0bffd17 	ldw	r2,-12(fp)
  80a908:	18800426 	beq	r3,r2,80a91c <altera_avalon_jtag_uart_read+0x1f0>
    return ptr - buffer;
  80a90c:	e0fff517 	ldw	r3,-44(fp)
  80a910:	e0bffd17 	ldw	r2,-12(fp)
  80a914:	1885c83a 	sub	r2,r3,r2
  80a918:	00000606 	br	80a934 <altera_avalon_jtag_uart_read+0x208>
  else if (flags & O_NONBLOCK)
  80a91c:	e0bfff17 	ldw	r2,-4(fp)
  80a920:	1090000c 	andi	r2,r2,16384
  80a924:	10000226 	beq	r2,zero,80a930 <altera_avalon_jtag_uart_read+0x204>
    return -EWOULDBLOCK;
  80a928:	00bffd44 	movi	r2,-11
  80a92c:	00000106 	br	80a934 <altera_avalon_jtag_uart_read+0x208>
  else
    return -EIO;
  80a930:	00bffec4 	movi	r2,-5
}
  80a934:	e037883a 	mov	sp,fp
  80a938:	dfc00117 	ldw	ra,4(sp)
  80a93c:	df000017 	ldw	fp,0(sp)
  80a940:	dec00204 	addi	sp,sp,8
  80a944:	f800283a 	ret

0080a948 <altera_avalon_jtag_uart_write>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_write(altera_avalon_jtag_uart_state* sp, 
  const char * ptr, int count, int flags)
{
  80a948:	defff304 	addi	sp,sp,-52
  80a94c:	dfc00c15 	stw	ra,48(sp)
  80a950:	df000b15 	stw	fp,44(sp)
  80a954:	df000b04 	addi	fp,sp,44
  80a958:	e13ffc15 	stw	r4,-16(fp)
  80a95c:	e17ffd15 	stw	r5,-12(fp)
  80a960:	e1bffe15 	stw	r6,-8(fp)
  80a964:	e1ffff15 	stw	r7,-4(fp)
  /* Remove warning at optimisation level 03 by seting out to 0 */
  unsigned int in, out=0;
  80a968:	e03ff515 	stw	zero,-44(fp)
  unsigned int n;
  alt_irq_context context;

  const char * start = ptr;
  80a96c:	e0bffd17 	ldw	r2,-12(fp)
  80a970:	e0bff715 	stw	r2,-36(fp)
  ALT_SEM_PEND (sp->write_lock, 0);

  do
  {
    /* Copy as much as we can into the transmit buffer */
    while (count > 0)
  80a974:	00003706 	br	80aa54 <altera_avalon_jtag_uart_write+0x10c>
    {
      /* We need a stable value of the out pointer to calculate the space available */
      in  = sp->tx_in;
  80a978:	e0bffc17 	ldw	r2,-16(fp)
  80a97c:	10800c17 	ldw	r2,48(r2)
  80a980:	e0bff915 	stw	r2,-28(fp)
      out = sp->tx_out;
  80a984:	e0bffc17 	ldw	r2,-16(fp)
  80a988:	10800d17 	ldw	r2,52(r2)
  80a98c:	e0bff515 	stw	r2,-44(fp)

      if (in < out)
  80a990:	e0fff917 	ldw	r3,-28(fp)
  80a994:	e0bff517 	ldw	r2,-44(fp)
  80a998:	1880062e 	bgeu	r3,r2,80a9b4 <altera_avalon_jtag_uart_write+0x6c>
        n = out - 1 - in;
  80a99c:	e0fff517 	ldw	r3,-44(fp)
  80a9a0:	e0bff917 	ldw	r2,-28(fp)
  80a9a4:	1885c83a 	sub	r2,r3,r2
  80a9a8:	10bfffc4 	addi	r2,r2,-1
  80a9ac:	e0bff615 	stw	r2,-40(fp)
  80a9b0:	00000b06 	br	80a9e0 <altera_avalon_jtag_uart_write+0x98>
      else if (out > 0)
  80a9b4:	e0bff517 	ldw	r2,-44(fp)
  80a9b8:	10000526 	beq	r2,zero,80a9d0 <altera_avalon_jtag_uart_write+0x88>
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - in;
  80a9bc:	00c20004 	movi	r3,2048
  80a9c0:	e0bff917 	ldw	r2,-28(fp)
  80a9c4:	1885c83a 	sub	r2,r3,r2
  80a9c8:	e0bff615 	stw	r2,-40(fp)
  80a9cc:	00000406 	br	80a9e0 <altera_avalon_jtag_uart_write+0x98>
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - 1 - in;
  80a9d0:	00c1ffc4 	movi	r3,2047
  80a9d4:	e0bff917 	ldw	r2,-28(fp)
  80a9d8:	1885c83a 	sub	r2,r3,r2
  80a9dc:	e0bff615 	stw	r2,-40(fp)

      if (n == 0)
  80a9e0:	e0bff617 	ldw	r2,-40(fp)
  80a9e4:	10001e26 	beq	r2,zero,80aa60 <altera_avalon_jtag_uart_write+0x118>
        break;

      if (n > count)
  80a9e8:	e0fffe17 	ldw	r3,-8(fp)
  80a9ec:	e0bff617 	ldw	r2,-40(fp)
  80a9f0:	1880022e 	bgeu	r3,r2,80a9fc <altera_avalon_jtag_uart_write+0xb4>
        n = count;
  80a9f4:	e0bffe17 	ldw	r2,-8(fp)
  80a9f8:	e0bff615 	stw	r2,-40(fp)

      memcpy(sp->tx_buf + in, ptr, n);
  80a9fc:	e0bffc17 	ldw	r2,-16(fp)
  80aa00:	10c20e04 	addi	r3,r2,2104
  80aa04:	e0bff917 	ldw	r2,-28(fp)
  80aa08:	1885883a 	add	r2,r3,r2
  80aa0c:	e1bff617 	ldw	r6,-40(fp)
  80aa10:	e17ffd17 	ldw	r5,-12(fp)
  80aa14:	1009883a 	mov	r4,r2
  80aa18:	0807a640 	call	807a64 <memcpy>
      ptr   += n;
  80aa1c:	e0fffd17 	ldw	r3,-12(fp)
  80aa20:	e0bff617 	ldw	r2,-40(fp)
  80aa24:	1885883a 	add	r2,r3,r2
  80aa28:	e0bffd15 	stw	r2,-12(fp)
      count -= n;
  80aa2c:	e0fffe17 	ldw	r3,-8(fp)
  80aa30:	e0bff617 	ldw	r2,-40(fp)
  80aa34:	1885c83a 	sub	r2,r3,r2
  80aa38:	e0bffe15 	stw	r2,-8(fp)

      sp->tx_in = (in + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
  80aa3c:	e0fff917 	ldw	r3,-28(fp)
  80aa40:	e0bff617 	ldw	r2,-40(fp)
  80aa44:	1885883a 	add	r2,r3,r2
  80aa48:	10c1ffcc 	andi	r3,r2,2047
  80aa4c:	e0bffc17 	ldw	r2,-16(fp)
  80aa50:	10c00c15 	stw	r3,48(r2)
  ALT_SEM_PEND (sp->write_lock, 0);

  do
  {
    /* Copy as much as we can into the transmit buffer */
    while (count > 0)
  80aa54:	e0bffe17 	ldw	r2,-8(fp)
  80aa58:	00bfc716 	blt	zero,r2,80a978 <__alt_mem_onchip_mem+0xff802978>
  80aa5c:	00000106 	br	80aa64 <altera_avalon_jtag_uart_write+0x11c>
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - in;
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - 1 - in;

      if (n == 0)
        break;
  80aa60:	0001883a 	nop
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  80aa64:	0005303a 	rdctl	r2,status
  80aa68:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  80aa6c:	e0fffb17 	ldw	r3,-20(fp)
  80aa70:	00bfff84 	movi	r2,-2
  80aa74:	1884703a 	and	r2,r3,r2
  80aa78:	1001703a 	wrctl	status,r2
  
  return context;
  80aa7c:	e0bffb17 	ldw	r2,-20(fp)
     * to enable interrupts if there is no space left in the FIFO
     *
     * For now kick the interrupt routine every time to make it transmit 
     * the data 
     */
    context = alt_irq_disable_all();
  80aa80:	e0bffa15 	stw	r2,-24(fp)
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
  80aa84:	e0bffc17 	ldw	r2,-16(fp)
  80aa88:	10800817 	ldw	r2,32(r2)
  80aa8c:	10c00094 	ori	r3,r2,2
  80aa90:	e0bffc17 	ldw	r2,-16(fp)
  80aa94:	10c00815 	stw	r3,32(r2)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
  80aa98:	e0bffc17 	ldw	r2,-16(fp)
  80aa9c:	10800017 	ldw	r2,0(r2)
  80aaa0:	10800104 	addi	r2,r2,4
  80aaa4:	1007883a 	mov	r3,r2
  80aaa8:	e0bffc17 	ldw	r2,-16(fp)
  80aaac:	10800817 	ldw	r2,32(r2)
  80aab0:	18800035 	stwio	r2,0(r3)
  80aab4:	e0bffa17 	ldw	r2,-24(fp)
  80aab8:	e0bff815 	stw	r2,-32(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  80aabc:	e0bff817 	ldw	r2,-32(fp)
  80aac0:	1001703a 	wrctl	status,r2
    /* 
     * If there is any data left then either return now or block until 
     * some has been sent 
     */
    /* consider: test whether there is anything there while doing this and delay for at most 2s. */
    if (count > 0)
  80aac4:	e0bffe17 	ldw	r2,-8(fp)
  80aac8:	0080100e 	bge	zero,r2,80ab0c <altera_avalon_jtag_uart_write+0x1c4>
    {
      if (flags & O_NONBLOCK)
  80aacc:	e0bfff17 	ldw	r2,-4(fp)
  80aad0:	1090000c 	andi	r2,r2,16384
  80aad4:	1000101e 	bne	r2,zero,80ab18 <altera_avalon_jtag_uart_write+0x1d0>
      /*
       * No OS present: Always wait for data to be removed from buffer.  Once
       * the interrupt routine has removed some data then we will be able to
       * insert some more.
       */
      while (out == sp->tx_out && sp->host_inactive < sp->timeout)
  80aad8:	0001883a 	nop
  80aadc:	e0bffc17 	ldw	r2,-16(fp)
  80aae0:	10c00d17 	ldw	r3,52(r2)
  80aae4:	e0bff517 	ldw	r2,-44(fp)
  80aae8:	1880051e 	bne	r3,r2,80ab00 <altera_avalon_jtag_uart_write+0x1b8>
  80aaec:	e0bffc17 	ldw	r2,-16(fp)
  80aaf0:	10c00917 	ldw	r3,36(r2)
  80aaf4:	e0bffc17 	ldw	r2,-16(fp)
  80aaf8:	10800117 	ldw	r2,4(r2)
  80aafc:	18bff736 	bltu	r3,r2,80aadc <__alt_mem_onchip_mem+0xff802adc>
        ;
#endif /* __ucosii__ */

      if  (sp->host_inactive)
  80ab00:	e0bffc17 	ldw	r2,-16(fp)
  80ab04:	10800917 	ldw	r2,36(r2)
  80ab08:	1000051e 	bne	r2,zero,80ab20 <altera_avalon_jtag_uart_write+0x1d8>
         break;
    }
  }
  while (count > 0);
  80ab0c:	e0bffe17 	ldw	r2,-8(fp)
  80ab10:	00bfd016 	blt	zero,r2,80aa54 <__alt_mem_onchip_mem+0xff802a54>
  80ab14:	00000306 	br	80ab24 <altera_avalon_jtag_uart_write+0x1dc>
     */
    /* consider: test whether there is anything there while doing this and delay for at most 2s. */
    if (count > 0)
    {
      if (flags & O_NONBLOCK)
        break;
  80ab18:	0001883a 	nop
  80ab1c:	00000106 	br	80ab24 <altera_avalon_jtag_uart_write+0x1dc>
      while (out == sp->tx_out && sp->host_inactive < sp->timeout)
        ;
#endif /* __ucosii__ */

      if  (sp->host_inactive)
         break;
  80ab20:	0001883a 	nop
   * Now that access to the circular buffer is complete, release the write
   * semaphore so that other threads can access the buffer.
   */
  ALT_SEM_POST (sp->write_lock);

  if (ptr != start)
  80ab24:	e0fffd17 	ldw	r3,-12(fp)
  80ab28:	e0bff717 	ldw	r2,-36(fp)
  80ab2c:	18800426 	beq	r3,r2,80ab40 <altera_avalon_jtag_uart_write+0x1f8>
    return ptr - start;
  80ab30:	e0fffd17 	ldw	r3,-12(fp)
  80ab34:	e0bff717 	ldw	r2,-36(fp)
  80ab38:	1885c83a 	sub	r2,r3,r2
  80ab3c:	00000606 	br	80ab58 <altera_avalon_jtag_uart_write+0x210>
  else if (flags & O_NONBLOCK)
  80ab40:	e0bfff17 	ldw	r2,-4(fp)
  80ab44:	1090000c 	andi	r2,r2,16384
  80ab48:	10000226 	beq	r2,zero,80ab54 <altera_avalon_jtag_uart_write+0x20c>
    return -EWOULDBLOCK;
  80ab4c:	00bffd44 	movi	r2,-11
  80ab50:	00000106 	br	80ab58 <altera_avalon_jtag_uart_write+0x210>
    sp->tx_out = sp->tx_in = 0;
    return ptr - start + count;
  }
#endif
  else
    return -EIO; /* Host not connected */
  80ab54:	00bffec4 	movi	r2,-5
}
  80ab58:	e037883a 	mov	sp,fp
  80ab5c:	dfc00117 	ldw	ra,4(sp)
  80ab60:	df000017 	ldw	fp,0(sp)
  80ab64:	dec00204 	addi	sp,sp,8
  80ab68:	f800283a 	ret

0080ab6c <lcd_write_command>:

/* --------------------------------------------------------------------- */

static void lcd_write_command(altera_avalon_lcd_16207_state* sp, 
  unsigned char command)
{
  80ab6c:	defffa04 	addi	sp,sp,-24
  80ab70:	dfc00515 	stw	ra,20(sp)
  80ab74:	df000415 	stw	fp,16(sp)
  80ab78:	df000404 	addi	fp,sp,16
  80ab7c:	e13ffe15 	stw	r4,-8(fp)
  80ab80:	2805883a 	mov	r2,r5
  80ab84:	e0bfff05 	stb	r2,-4(fp)
  unsigned int base = sp->base;
  80ab88:	e0bffe17 	ldw	r2,-8(fp)
  80ab8c:	10800017 	ldw	r2,0(r2)
  80ab90:	e0bffd15 	stw	r2,-12(fp)
  /* We impose a timeout on the driver in case the LCD panel isn't connected.
   * The first time we call this function the timeout is approx 25ms 
   * (assuming 5 cycles per loop and a 200MHz clock).  Obviously systems
   * with slower clocks, or debug builds, or slower memory will take longer.
   */
  int i = 1000000;
  80ab94:	008003f4 	movhi	r2,15
  80ab98:	10909004 	addi	r2,r2,16960
  80ab9c:	e0bffc15 	stw	r2,-16(fp)

  /* Don't bother if the LCD panel didn't work before */
  if (sp->broken)
  80aba0:	e0bffe17 	ldw	r2,-8(fp)
  80aba4:	10800803 	ldbu	r2,32(r2)
  80aba8:	10803fcc 	andi	r2,r2,255
  80abac:	1080201c 	xori	r2,r2,128
  80abb0:	10bfe004 	addi	r2,r2,-128
  80abb4:	1000151e 	bne	r2,zero,80ac0c <lcd_write_command+0xa0>
    return;

  /* Wait until LCD isn't busy. */
  while (IORD_ALTERA_AVALON_LCD_16207_STATUS(base) & ALTERA_AVALON_LCD_16207_STATUS_BUSY_MSK)
  80abb8:	00000906 	br	80abe0 <lcd_write_command+0x74>
    if (--i == 0)
  80abbc:	e0bffc17 	ldw	r2,-16(fp)
  80abc0:	10bfffc4 	addi	r2,r2,-1
  80abc4:	e0bffc15 	stw	r2,-16(fp)
  80abc8:	e0bffc17 	ldw	r2,-16(fp)
  80abcc:	1000041e 	bne	r2,zero,80abe0 <lcd_write_command+0x74>
    {
      sp->broken = 1;
  80abd0:	e0bffe17 	ldw	r2,-8(fp)
  80abd4:	00c00044 	movi	r3,1
  80abd8:	10c00805 	stb	r3,32(r2)
      return;
  80abdc:	00000c06 	br	80ac10 <lcd_write_command+0xa4>
  /* Don't bother if the LCD panel didn't work before */
  if (sp->broken)
    return;

  /* Wait until LCD isn't busy. */
  while (IORD_ALTERA_AVALON_LCD_16207_STATUS(base) & ALTERA_AVALON_LCD_16207_STATUS_BUSY_MSK)
  80abe0:	e0bffd17 	ldw	r2,-12(fp)
  80abe4:	10800104 	addi	r2,r2,4
  80abe8:	10800037 	ldwio	r2,0(r2)
  80abec:	1080200c 	andi	r2,r2,128
  80abf0:	103ff21e 	bne	r2,zero,80abbc <__alt_mem_onchip_mem+0xff802bbc>
    }

  /* Despite what it says in the datasheet, the LCD isn't ready to accept
   * a write immediately after it returns BUSY=0.  Wait for 100us more.
   */
  usleep(100);
  80abf4:	01001904 	movi	r4,100
  80abf8:	080cc640 	call	80cc64 <usleep>

  IOWR_ALTERA_AVALON_LCD_16207_COMMAND(base, command);
  80abfc:	e0bffd17 	ldw	r2,-12(fp)
  80ac00:	e0ffff03 	ldbu	r3,-4(fp)
  80ac04:	10c00035 	stwio	r3,0(r2)
  80ac08:	00000106 	br	80ac10 <lcd_write_command+0xa4>
   */
  int i = 1000000;

  /* Don't bother if the LCD panel didn't work before */
  if (sp->broken)
    return;
  80ac0c:	0001883a 	nop
   * a write immediately after it returns BUSY=0.  Wait for 100us more.
   */
  usleep(100);

  IOWR_ALTERA_AVALON_LCD_16207_COMMAND(base, command);
}
  80ac10:	e037883a 	mov	sp,fp
  80ac14:	dfc00117 	ldw	ra,4(sp)
  80ac18:	df000017 	ldw	fp,0(sp)
  80ac1c:	dec00204 	addi	sp,sp,8
  80ac20:	f800283a 	ret

0080ac24 <lcd_write_data>:

/* --------------------------------------------------------------------- */

static void lcd_write_data(altera_avalon_lcd_16207_state* sp, 
  unsigned char data)
{
  80ac24:	defffa04 	addi	sp,sp,-24
  80ac28:	dfc00515 	stw	ra,20(sp)
  80ac2c:	df000415 	stw	fp,16(sp)
  80ac30:	df000404 	addi	fp,sp,16
  80ac34:	e13ffe15 	stw	r4,-8(fp)
  80ac38:	2805883a 	mov	r2,r5
  80ac3c:	e0bfff05 	stb	r2,-4(fp)
  unsigned int base = sp->base;
  80ac40:	e0bffe17 	ldw	r2,-8(fp)
  80ac44:	10800017 	ldw	r2,0(r2)
  80ac48:	e0bffd15 	stw	r2,-12(fp)
  /* We impose a timeout on the driver in case the LCD panel isn't connected.
   * The first time we call this function the timeout is approx 25ms 
   * (assuming 5 cycles per loop and a 200MHz clock).  Obviously systems
   * with slower clocks, or debug builds, or slower memory will take longer.
   */
  int i = 1000000;
  80ac4c:	008003f4 	movhi	r2,15
  80ac50:	10909004 	addi	r2,r2,16960
  80ac54:	e0bffc15 	stw	r2,-16(fp)

  /* Don't bother if the LCD panel didn't work before */
  if (sp->broken)
  80ac58:	e0bffe17 	ldw	r2,-8(fp)
  80ac5c:	10800803 	ldbu	r2,32(r2)
  80ac60:	10803fcc 	andi	r2,r2,255
  80ac64:	1080201c 	xori	r2,r2,128
  80ac68:	10bfe004 	addi	r2,r2,-128
  80ac6c:	10001d1e 	bne	r2,zero,80ace4 <lcd_write_data+0xc0>
    return;

  /* Wait until LCD isn't busy. */
  while (IORD_ALTERA_AVALON_LCD_16207_STATUS(base) & ALTERA_AVALON_LCD_16207_STATUS_BUSY_MSK)
  80ac70:	00000906 	br	80ac98 <lcd_write_data+0x74>
    if (--i == 0)
  80ac74:	e0bffc17 	ldw	r2,-16(fp)
  80ac78:	10bfffc4 	addi	r2,r2,-1
  80ac7c:	e0bffc15 	stw	r2,-16(fp)
  80ac80:	e0bffc17 	ldw	r2,-16(fp)
  80ac84:	1000041e 	bne	r2,zero,80ac98 <lcd_write_data+0x74>
    {
      sp->broken = 1;
  80ac88:	e0bffe17 	ldw	r2,-8(fp)
  80ac8c:	00c00044 	movi	r3,1
  80ac90:	10c00805 	stb	r3,32(r2)
      return;
  80ac94:	00001406 	br	80ace8 <lcd_write_data+0xc4>
  /* Don't bother if the LCD panel didn't work before */
  if (sp->broken)
    return;

  /* Wait until LCD isn't busy. */
  while (IORD_ALTERA_AVALON_LCD_16207_STATUS(base) & ALTERA_AVALON_LCD_16207_STATUS_BUSY_MSK)
  80ac98:	e0bffd17 	ldw	r2,-12(fp)
  80ac9c:	10800104 	addi	r2,r2,4
  80aca0:	10800037 	ldwio	r2,0(r2)
  80aca4:	1080200c 	andi	r2,r2,128
  80aca8:	103ff21e 	bne	r2,zero,80ac74 <__alt_mem_onchip_mem+0xff802c74>
    }

  /* Despite what it says in the datasheet, the LCD isn't ready to accept
   * a write immediately after it returns BUSY=0.  Wait for 100us more.
   */
  usleep(100);
  80acac:	01001904 	movi	r4,100
  80acb0:	080cc640 	call	80cc64 <usleep>

  IOWR_ALTERA_AVALON_LCD_16207_DATA(base, data);
  80acb4:	e0bffd17 	ldw	r2,-12(fp)
  80acb8:	10800204 	addi	r2,r2,8
  80acbc:	1007883a 	mov	r3,r2
  80acc0:	e0bfff03 	ldbu	r2,-4(fp)
  80acc4:	18800035 	stwio	r2,0(r3)

  sp->address++;
  80acc8:	e0bffe17 	ldw	r2,-8(fp)
  80accc:	108008c3 	ldbu	r2,35(r2)
  80acd0:	10800044 	addi	r2,r2,1
  80acd4:	1007883a 	mov	r3,r2
  80acd8:	e0bffe17 	ldw	r2,-8(fp)
  80acdc:	10c008c5 	stb	r3,35(r2)
  80ace0:	00000106 	br	80ace8 <lcd_write_data+0xc4>
   */
  int i = 1000000;

  /* Don't bother if the LCD panel didn't work before */
  if (sp->broken)
    return;
  80ace4:	0001883a 	nop
  usleep(100);

  IOWR_ALTERA_AVALON_LCD_16207_DATA(base, data);

  sp->address++;
}
  80ace8:	e037883a 	mov	sp,fp
  80acec:	dfc00117 	ldw	ra,4(sp)
  80acf0:	df000017 	ldw	fp,0(sp)
  80acf4:	dec00204 	addi	sp,sp,8
  80acf8:	f800283a 	ret

0080acfc <lcd_clear_screen>:

/* --------------------------------------------------------------------- */

static void lcd_clear_screen(altera_avalon_lcd_16207_state* sp)
{
  80acfc:	defffc04 	addi	sp,sp,-16
  80ad00:	dfc00315 	stw	ra,12(sp)
  80ad04:	df000215 	stw	fp,8(sp)
  80ad08:	df000204 	addi	fp,sp,8
  80ad0c:	e13fff15 	stw	r4,-4(fp)
  int y;

  lcd_write_command(sp, LCD_CMD_CLEAR);
  80ad10:	01400044 	movi	r5,1
  80ad14:	e13fff17 	ldw	r4,-4(fp)
  80ad18:	080ab6c0 	call	80ab6c <lcd_write_command>

  sp->x = 0;
  80ad1c:	e0bfff17 	ldw	r2,-4(fp)
  80ad20:	10000845 	stb	zero,33(r2)
  sp->y = 0;
  80ad24:	e0bfff17 	ldw	r2,-4(fp)
  80ad28:	10000885 	stb	zero,34(r2)
  sp->address = 0;
  80ad2c:	e0bfff17 	ldw	r2,-4(fp)
  80ad30:	100008c5 	stb	zero,35(r2)

  for (y = 0 ; y < ALT_LCD_HEIGHT ; y++)
  80ad34:	e03ffe15 	stw	zero,-8(fp)
  80ad38:	00001b06 	br	80ada8 <lcd_clear_screen+0xac>
  {
    memset(sp->line[y].data, ' ', sizeof(sp->line[0].data));
  80ad3c:	e0bffe17 	ldw	r2,-8(fp)
  80ad40:	108018e4 	muli	r2,r2,99
  80ad44:	10801004 	addi	r2,r2,64
  80ad48:	e0ffff17 	ldw	r3,-4(fp)
  80ad4c:	1885883a 	add	r2,r3,r2
  80ad50:	01801444 	movi	r6,81
  80ad54:	01400804 	movi	r5,32
  80ad58:	1009883a 	mov	r4,r2
  80ad5c:	0807d080 	call	807d08 <memset>
    memset(sp->line[y].visible, ' ', sizeof(sp->line[0].visible));
  80ad60:	e0bffe17 	ldw	r2,-8(fp)
  80ad64:	108018e4 	muli	r2,r2,99
  80ad68:	10800c04 	addi	r2,r2,48
  80ad6c:	e0ffff17 	ldw	r3,-4(fp)
  80ad70:	1885883a 	add	r2,r3,r2
  80ad74:	01800404 	movi	r6,16
  80ad78:	01400804 	movi	r5,32
  80ad7c:	1009883a 	mov	r4,r2
  80ad80:	0807d080 	call	807d08 <memset>
    sp->line[y].width = 0;
  80ad84:	e0ffff17 	ldw	r3,-4(fp)
  80ad88:	e0bffe17 	ldw	r2,-8(fp)
  80ad8c:	108018e4 	muli	r2,r2,99
  80ad90:	1885883a 	add	r2,r3,r2
  80ad94:	10802444 	addi	r2,r2,145
  80ad98:	10000005 	stb	zero,0(r2)

  sp->x = 0;
  sp->y = 0;
  sp->address = 0;

  for (y = 0 ; y < ALT_LCD_HEIGHT ; y++)
  80ad9c:	e0bffe17 	ldw	r2,-8(fp)
  80ada0:	10800044 	addi	r2,r2,1
  80ada4:	e0bffe15 	stw	r2,-8(fp)
  80ada8:	e0bffe17 	ldw	r2,-8(fp)
  80adac:	10800090 	cmplti	r2,r2,2
  80adb0:	103fe21e 	bne	r2,zero,80ad3c <__alt_mem_onchip_mem+0xff802d3c>
  {
    memset(sp->line[y].data, ' ', sizeof(sp->line[0].data));
    memset(sp->line[y].visible, ' ', sizeof(sp->line[0].visible));
    sp->line[y].width = 0;
  }
}
  80adb4:	0001883a 	nop
  80adb8:	e037883a 	mov	sp,fp
  80adbc:	dfc00117 	ldw	ra,4(sp)
  80adc0:	df000017 	ldw	fp,0(sp)
  80adc4:	dec00204 	addi	sp,sp,8
  80adc8:	f800283a 	ret

0080adcc <lcd_repaint_screen>:

/* --------------------------------------------------------------------- */

static void lcd_repaint_screen(altera_avalon_lcd_16207_state* sp)
{
  80adcc:	defff704 	addi	sp,sp,-36
  80add0:	dfc00815 	stw	ra,32(sp)
  80add4:	df000715 	stw	fp,28(sp)
  80add8:	df000704 	addi	fp,sp,28
  80addc:	e13fff15 	stw	r4,-4(fp)
  /* scrollpos controls how much the lines have scrolled round.  The speed
   * each line scrolls at is controlled by its speed variable - while
   * scrolline lines will wrap at the position set by width
   */

  int scrollpos = sp->scrollpos;
  80ade0:	e0bfff17 	ldw	r2,-4(fp)
  80ade4:	10800943 	ldbu	r2,37(r2)
  80ade8:	10803fcc 	andi	r2,r2,255
  80adec:	e0bffc15 	stw	r2,-16(fp)

  for (y = 0 ; y < ALT_LCD_HEIGHT ; y++)
  80adf0:	e03ff915 	stw	zero,-28(fp)
  80adf4:	00006706 	br	80af94 <lcd_repaint_screen+0x1c8>
  {
    int width  = sp->line[y].width;
  80adf8:	e0ffff17 	ldw	r3,-4(fp)
  80adfc:	e0bff917 	ldw	r2,-28(fp)
  80ae00:	108018e4 	muli	r2,r2,99
  80ae04:	1885883a 	add	r2,r3,r2
  80ae08:	10802444 	addi	r2,r2,145
  80ae0c:	10800003 	ldbu	r2,0(r2)
  80ae10:	10803fcc 	andi	r2,r2,255
  80ae14:	1080201c 	xori	r2,r2,128
  80ae18:	10bfe004 	addi	r2,r2,-128
  80ae1c:	e0bffd15 	stw	r2,-12(fp)
    int offset = (scrollpos * sp->line[y].speed) >> 8;
  80ae20:	e0ffff17 	ldw	r3,-4(fp)
  80ae24:	e0bff917 	ldw	r2,-28(fp)
  80ae28:	108018e4 	muli	r2,r2,99
  80ae2c:	1885883a 	add	r2,r3,r2
  80ae30:	10802484 	addi	r2,r2,146
  80ae34:	10800003 	ldbu	r2,0(r2)
  80ae38:	10c03fcc 	andi	r3,r2,255
  80ae3c:	e0bffc17 	ldw	r2,-16(fp)
  80ae40:	1885383a 	mul	r2,r3,r2
  80ae44:	1005d23a 	srai	r2,r2,8
  80ae48:	e0bffb15 	stw	r2,-20(fp)
    if (offset >= width)
  80ae4c:	e0fffb17 	ldw	r3,-20(fp)
  80ae50:	e0bffd17 	ldw	r2,-12(fp)
  80ae54:	18800116 	blt	r3,r2,80ae5c <lcd_repaint_screen+0x90>
      offset = 0;
  80ae58:	e03ffb15 	stw	zero,-20(fp)

    for (x = 0 ; x < ALT_LCD_WIDTH ; x++)
  80ae5c:	e03ffa15 	stw	zero,-24(fp)
  80ae60:	00004606 	br	80af7c <lcd_repaint_screen+0x1b0>
    {
      char c = sp->line[y].data[(x + offset) % width];
  80ae64:	e0fffa17 	ldw	r3,-24(fp)
  80ae68:	e0bffb17 	ldw	r2,-20(fp)
  80ae6c:	1885883a 	add	r2,r3,r2
  80ae70:	e17ffd17 	ldw	r5,-12(fp)
  80ae74:	1009883a 	mov	r4,r2
  80ae78:	08092bc0 	call	8092bc <__modsi3>
  80ae7c:	1009883a 	mov	r4,r2
  80ae80:	e0ffff17 	ldw	r3,-4(fp)
  80ae84:	e0bff917 	ldw	r2,-28(fp)
  80ae88:	108018e4 	muli	r2,r2,99
  80ae8c:	1885883a 	add	r2,r3,r2
  80ae90:	1105883a 	add	r2,r2,r4
  80ae94:	10801004 	addi	r2,r2,64
  80ae98:	10800003 	ldbu	r2,0(r2)
  80ae9c:	e0bffe05 	stb	r2,-8(fp)

      /* Writing data takes 40us, so don't do it unless required */
      if (sp->line[y].visible[x] != c)
  80aea0:	e0ffff17 	ldw	r3,-4(fp)
  80aea4:	e0bff917 	ldw	r2,-28(fp)
  80aea8:	108018e4 	muli	r2,r2,99
  80aeac:	1887883a 	add	r3,r3,r2
  80aeb0:	e0bffa17 	ldw	r2,-24(fp)
  80aeb4:	1885883a 	add	r2,r3,r2
  80aeb8:	10800c04 	addi	r2,r2,48
  80aebc:	10800003 	ldbu	r2,0(r2)
  80aec0:	10c03fcc 	andi	r3,r2,255
  80aec4:	18c0201c 	xori	r3,r3,128
  80aec8:	18ffe004 	addi	r3,r3,-128
  80aecc:	e0bffe07 	ldb	r2,-8(fp)
  80aed0:	18802726 	beq	r3,r2,80af70 <lcd_repaint_screen+0x1a4>
      {
        unsigned char address = x + colstart[y];
  80aed4:	e0fff917 	ldw	r3,-28(fp)
  80aed8:	d0a00d04 	addi	r2,gp,-32716
  80aedc:	1885883a 	add	r2,r3,r2
  80aee0:	10800003 	ldbu	r2,0(r2)
  80aee4:	1007883a 	mov	r3,r2
  80aee8:	e0bffa17 	ldw	r2,-24(fp)
  80aeec:	1885883a 	add	r2,r3,r2
  80aef0:	e0bffe45 	stb	r2,-7(fp)

        if (address != sp->address)
  80aef4:	e0fffe43 	ldbu	r3,-7(fp)
  80aef8:	e0bfff17 	ldw	r2,-4(fp)
  80aefc:	108008c3 	ldbu	r2,35(r2)
  80af00:	10803fcc 	andi	r2,r2,255
  80af04:	1080201c 	xori	r2,r2,128
  80af08:	10bfe004 	addi	r2,r2,-128
  80af0c:	18800a26 	beq	r3,r2,80af38 <lcd_repaint_screen+0x16c>
        {
          lcd_write_command(sp, LCD_CMD_WRITE_DATA | address);
  80af10:	e0fffe43 	ldbu	r3,-7(fp)
  80af14:	00bfe004 	movi	r2,-128
  80af18:	1884b03a 	or	r2,r3,r2
  80af1c:	10803fcc 	andi	r2,r2,255
  80af20:	100b883a 	mov	r5,r2
  80af24:	e13fff17 	ldw	r4,-4(fp)
  80af28:	080ab6c0 	call	80ab6c <lcd_write_command>
          sp->address = address;
  80af2c:	e0fffe43 	ldbu	r3,-7(fp)
  80af30:	e0bfff17 	ldw	r2,-4(fp)
  80af34:	10c008c5 	stb	r3,35(r2)
        }

        lcd_write_data(sp, c);
  80af38:	e0bffe03 	ldbu	r2,-8(fp)
  80af3c:	10803fcc 	andi	r2,r2,255
  80af40:	100b883a 	mov	r5,r2
  80af44:	e13fff17 	ldw	r4,-4(fp)
  80af48:	080ac240 	call	80ac24 <lcd_write_data>
        sp->line[y].visible[x] = c;
  80af4c:	e0ffff17 	ldw	r3,-4(fp)
  80af50:	e0bff917 	ldw	r2,-28(fp)
  80af54:	108018e4 	muli	r2,r2,99
  80af58:	1887883a 	add	r3,r3,r2
  80af5c:	e0bffa17 	ldw	r2,-24(fp)
  80af60:	1885883a 	add	r2,r3,r2
  80af64:	10800c04 	addi	r2,r2,48
  80af68:	e0fffe03 	ldbu	r3,-8(fp)
  80af6c:	10c00005 	stb	r3,0(r2)
    int width  = sp->line[y].width;
    int offset = (scrollpos * sp->line[y].speed) >> 8;
    if (offset >= width)
      offset = 0;

    for (x = 0 ; x < ALT_LCD_WIDTH ; x++)
  80af70:	e0bffa17 	ldw	r2,-24(fp)
  80af74:	10800044 	addi	r2,r2,1
  80af78:	e0bffa15 	stw	r2,-24(fp)
  80af7c:	e0bffa17 	ldw	r2,-24(fp)
  80af80:	10800410 	cmplti	r2,r2,16
  80af84:	103fb71e 	bne	r2,zero,80ae64 <__alt_mem_onchip_mem+0xff802e64>
   * scrolline lines will wrap at the position set by width
   */

  int scrollpos = sp->scrollpos;

  for (y = 0 ; y < ALT_LCD_HEIGHT ; y++)
  80af88:	e0bff917 	ldw	r2,-28(fp)
  80af8c:	10800044 	addi	r2,r2,1
  80af90:	e0bff915 	stw	r2,-28(fp)
  80af94:	e0bff917 	ldw	r2,-28(fp)
  80af98:	10800090 	cmplti	r2,r2,2
  80af9c:	103f961e 	bne	r2,zero,80adf8 <__alt_mem_onchip_mem+0xff802df8>
        lcd_write_data(sp, c);
        sp->line[y].visible[x] = c;
      }
    }
  }
}
  80afa0:	0001883a 	nop
  80afa4:	e037883a 	mov	sp,fp
  80afa8:	dfc00117 	ldw	ra,4(sp)
  80afac:	df000017 	ldw	fp,0(sp)
  80afb0:	dec00204 	addi	sp,sp,8
  80afb4:	f800283a 	ret

0080afb8 <lcd_scroll_up>:

/* --------------------------------------------------------------------- */

static void lcd_scroll_up(altera_avalon_lcd_16207_state* sp)
{
  80afb8:	defffc04 	addi	sp,sp,-16
  80afbc:	dfc00315 	stw	ra,12(sp)
  80afc0:	df000215 	stw	fp,8(sp)
  80afc4:	df000204 	addi	fp,sp,8
  80afc8:	e13fff15 	stw	r4,-4(fp)
  int y;

  for (y = 0 ; y < ALT_LCD_HEIGHT ; y++)
  80afcc:	e03ffe15 	stw	zero,-8(fp)
  80afd0:	00001d06 	br	80b048 <lcd_scroll_up+0x90>
  {
    if (y < ALT_LCD_HEIGHT-1)
  80afd4:	e0bffe17 	ldw	r2,-8(fp)
  80afd8:	00800f16 	blt	zero,r2,80b018 <lcd_scroll_up+0x60>
      memcpy(sp->line[y].data, sp->line[y+1].data, ALT_LCD_VIRTUAL_WIDTH);
  80afdc:	e0bffe17 	ldw	r2,-8(fp)
  80afe0:	108018e4 	muli	r2,r2,99
  80afe4:	10801004 	addi	r2,r2,64
  80afe8:	e0ffff17 	ldw	r3,-4(fp)
  80afec:	1889883a 	add	r4,r3,r2
  80aff0:	e0bffe17 	ldw	r2,-8(fp)
  80aff4:	10800044 	addi	r2,r2,1
  80aff8:	108018e4 	muli	r2,r2,99
  80affc:	10801004 	addi	r2,r2,64
  80b000:	e0ffff17 	ldw	r3,-4(fp)
  80b004:	1885883a 	add	r2,r3,r2
  80b008:	01801404 	movi	r6,80
  80b00c:	100b883a 	mov	r5,r2
  80b010:	0807a640 	call	807a64 <memcpy>
  80b014:	00000906 	br	80b03c <lcd_scroll_up+0x84>
    else
      memset(sp->line[y].data, ' ', ALT_LCD_VIRTUAL_WIDTH);
  80b018:	e0bffe17 	ldw	r2,-8(fp)
  80b01c:	108018e4 	muli	r2,r2,99
  80b020:	10801004 	addi	r2,r2,64
  80b024:	e0ffff17 	ldw	r3,-4(fp)
  80b028:	1885883a 	add	r2,r3,r2
  80b02c:	01801404 	movi	r6,80
  80b030:	01400804 	movi	r5,32
  80b034:	1009883a 	mov	r4,r2
  80b038:	0807d080 	call	807d08 <memset>

static void lcd_scroll_up(altera_avalon_lcd_16207_state* sp)
{
  int y;

  for (y = 0 ; y < ALT_LCD_HEIGHT ; y++)
  80b03c:	e0bffe17 	ldw	r2,-8(fp)
  80b040:	10800044 	addi	r2,r2,1
  80b044:	e0bffe15 	stw	r2,-8(fp)
  80b048:	e0bffe17 	ldw	r2,-8(fp)
  80b04c:	10800090 	cmplti	r2,r2,2
  80b050:	103fe01e 	bne	r2,zero,80afd4 <__alt_mem_onchip_mem+0xff802fd4>
      memcpy(sp->line[y].data, sp->line[y+1].data, ALT_LCD_VIRTUAL_WIDTH);
    else
      memset(sp->line[y].data, ' ', ALT_LCD_VIRTUAL_WIDTH);
  }

  sp->y--;
  80b054:	e0bfff17 	ldw	r2,-4(fp)
  80b058:	10800883 	ldbu	r2,34(r2)
  80b05c:	10bfffc4 	addi	r2,r2,-1
  80b060:	1007883a 	mov	r3,r2
  80b064:	e0bfff17 	ldw	r2,-4(fp)
  80b068:	10c00885 	stb	r3,34(r2)
}
  80b06c:	0001883a 	nop
  80b070:	e037883a 	mov	sp,fp
  80b074:	dfc00117 	ldw	ra,4(sp)
  80b078:	df000017 	ldw	fp,0(sp)
  80b07c:	dec00204 	addi	sp,sp,8
  80b080:	f800283a 	ret

0080b084 <lcd_handle_escape>:

/* --------------------------------------------------------------------- */

static void lcd_handle_escape(altera_avalon_lcd_16207_state* sp, char c)
{
  80b084:	defff904 	addi	sp,sp,-28
  80b088:	dfc00615 	stw	ra,24(sp)
  80b08c:	df000515 	stw	fp,20(sp)
  80b090:	df000504 	addi	fp,sp,20
  80b094:	e13ffe15 	stw	r4,-8(fp)
  80b098:	2805883a 	mov	r2,r5
  80b09c:	e0bfff05 	stb	r2,-4(fp)
  int parm1 = 0, parm2 = 0;
  80b0a0:	e03ffb15 	stw	zero,-20(fp)
  80b0a4:	e03ffc15 	stw	zero,-16(fp)

  if (sp->escape[0] == '[')
  80b0a8:	e0bffe17 	ldw	r2,-8(fp)
  80b0ac:	10800a03 	ldbu	r2,40(r2)
  80b0b0:	10803fcc 	andi	r2,r2,255
  80b0b4:	1080201c 	xori	r2,r2,128
  80b0b8:	10bfe004 	addi	r2,r2,-128
  80b0bc:	108016d8 	cmpnei	r2,r2,91
  80b0c0:	1000411e 	bne	r2,zero,80b1c8 <lcd_handle_escape+0x144>
  {
    char * ptr = sp->escape+1;
  80b0c4:	e0bffe17 	ldw	r2,-8(fp)
  80b0c8:	10800a04 	addi	r2,r2,40
  80b0cc:	10800044 	addi	r2,r2,1
  80b0d0:	e0bffd15 	stw	r2,-12(fp)
    while (isdigit(*ptr))
  80b0d4:	00000c06 	br	80b108 <lcd_handle_escape+0x84>
      parm1 = (parm1 * 10) + (*ptr++ - '0');
  80b0d8:	e0bffb17 	ldw	r2,-20(fp)
  80b0dc:	10c002a4 	muli	r3,r2,10
  80b0e0:	e0bffd17 	ldw	r2,-12(fp)
  80b0e4:	11000044 	addi	r4,r2,1
  80b0e8:	e13ffd15 	stw	r4,-12(fp)
  80b0ec:	10800003 	ldbu	r2,0(r2)
  80b0f0:	10803fcc 	andi	r2,r2,255
  80b0f4:	1080201c 	xori	r2,r2,128
  80b0f8:	10bfe004 	addi	r2,r2,-128
  80b0fc:	10bff404 	addi	r2,r2,-48
  80b100:	1885883a 	add	r2,r3,r2
  80b104:	e0bffb15 	stw	r2,-20(fp)
  int parm1 = 0, parm2 = 0;

  if (sp->escape[0] == '[')
  {
    char * ptr = sp->escape+1;
    while (isdigit(*ptr))
  80b108:	d0e00f17 	ldw	r3,-32708(gp)
  80b10c:	e0bffd17 	ldw	r2,-12(fp)
  80b110:	10800003 	ldbu	r2,0(r2)
  80b114:	10803fcc 	andi	r2,r2,255
  80b118:	1080201c 	xori	r2,r2,128
  80b11c:	10bfe004 	addi	r2,r2,-128
  80b120:	10800044 	addi	r2,r2,1
  80b124:	1885883a 	add	r2,r3,r2
  80b128:	10800003 	ldbu	r2,0(r2)
  80b12c:	10803fcc 	andi	r2,r2,255
  80b130:	1080010c 	andi	r2,r2,4
  80b134:	103fe81e 	bne	r2,zero,80b0d8 <__alt_mem_onchip_mem+0xff8030d8>
      parm1 = (parm1 * 10) + (*ptr++ - '0');

    if (*ptr == ';')
  80b138:	e0bffd17 	ldw	r2,-12(fp)
  80b13c:	10800003 	ldbu	r2,0(r2)
  80b140:	10803fcc 	andi	r2,r2,255
  80b144:	1080201c 	xori	r2,r2,128
  80b148:	10bfe004 	addi	r2,r2,-128
  80b14c:	10800ed8 	cmpnei	r2,r2,59
  80b150:	10001f1e 	bne	r2,zero,80b1d0 <lcd_handle_escape+0x14c>
    {
      ptr++;
  80b154:	e0bffd17 	ldw	r2,-12(fp)
  80b158:	10800044 	addi	r2,r2,1
  80b15c:	e0bffd15 	stw	r2,-12(fp)
      while (isdigit(*ptr))
  80b160:	00000c06 	br	80b194 <lcd_handle_escape+0x110>
        parm2 = (parm2 * 10) + (*ptr++ - '0');
  80b164:	e0bffc17 	ldw	r2,-16(fp)
  80b168:	10c002a4 	muli	r3,r2,10
  80b16c:	e0bffd17 	ldw	r2,-12(fp)
  80b170:	11000044 	addi	r4,r2,1
  80b174:	e13ffd15 	stw	r4,-12(fp)
  80b178:	10800003 	ldbu	r2,0(r2)
  80b17c:	10803fcc 	andi	r2,r2,255
  80b180:	1080201c 	xori	r2,r2,128
  80b184:	10bfe004 	addi	r2,r2,-128
  80b188:	10bff404 	addi	r2,r2,-48
  80b18c:	1885883a 	add	r2,r3,r2
  80b190:	e0bffc15 	stw	r2,-16(fp)
      parm1 = (parm1 * 10) + (*ptr++ - '0');

    if (*ptr == ';')
    {
      ptr++;
      while (isdigit(*ptr))
  80b194:	d0e00f17 	ldw	r3,-32708(gp)
  80b198:	e0bffd17 	ldw	r2,-12(fp)
  80b19c:	10800003 	ldbu	r2,0(r2)
  80b1a0:	10803fcc 	andi	r2,r2,255
  80b1a4:	1080201c 	xori	r2,r2,128
  80b1a8:	10bfe004 	addi	r2,r2,-128
  80b1ac:	10800044 	addi	r2,r2,1
  80b1b0:	1885883a 	add	r2,r3,r2
  80b1b4:	10800003 	ldbu	r2,0(r2)
  80b1b8:	10803fcc 	andi	r2,r2,255
  80b1bc:	1080010c 	andi	r2,r2,4
  80b1c0:	103fe81e 	bne	r2,zero,80b164 <__alt_mem_onchip_mem+0xff803164>
  80b1c4:	00000206 	br	80b1d0 <lcd_handle_escape+0x14c>
        parm2 = (parm2 * 10) + (*ptr++ - '0');
    }
  }
  else
    parm1 = -1;
  80b1c8:	00bfffc4 	movi	r2,-1
  80b1cc:	e0bffb15 	stw	r2,-20(fp)

  switch (c)
  80b1d0:	e0bfff07 	ldb	r2,-4(fp)
  80b1d4:	10c012a0 	cmpeqi	r3,r2,74
  80b1d8:	1800291e 	bne	r3,zero,80b280 <lcd_handle_escape+0x1fc>
  80b1dc:	10c012c8 	cmpgei	r3,r2,75
  80b1e0:	1800031e 	bne	r3,zero,80b1f0 <lcd_handle_escape+0x16c>
  80b1e4:	10801220 	cmpeqi	r2,r2,72
  80b1e8:	1000061e 	bne	r2,zero,80b204 <lcd_handle_escape+0x180>
      if (sp->x < ALT_LCD_VIRTUAL_WIDTH)
        memset(sp->line[sp->y].data + sp->x, ' ', ALT_LCD_VIRTUAL_WIDTH - sp->x);
    }
    break;
  }
}
  80b1ec:	00004a06 	br	80b318 <lcd_handle_escape+0x294>
    }
  }
  else
    parm1 = -1;

  switch (c)
  80b1f0:	10c012e0 	cmpeqi	r3,r2,75
  80b1f4:	1800281e 	bne	r3,zero,80b298 <lcd_handle_escape+0x214>
  80b1f8:	108019a0 	cmpeqi	r2,r2,102
  80b1fc:	1000011e 	bne	r2,zero,80b204 <lcd_handle_escape+0x180>
      if (sp->x < ALT_LCD_VIRTUAL_WIDTH)
        memset(sp->line[sp->y].data + sp->x, ' ', ALT_LCD_VIRTUAL_WIDTH - sp->x);
    }
    break;
  }
}
  80b200:	00004506 	br	80b318 <lcd_handle_escape+0x294>

  switch (c)
  {
  case 'H': /* ESC '[' <y> ';' <x> 'H'  : Move cursor to location */
  case 'f': /* Same as above */
    if (parm2 > 0)
  80b204:	e0bffc17 	ldw	r2,-16(fp)
  80b208:	0080050e 	bge	zero,r2,80b220 <lcd_handle_escape+0x19c>
      sp->x = parm2 - 1;
  80b20c:	e0bffc17 	ldw	r2,-16(fp)
  80b210:	10bfffc4 	addi	r2,r2,-1
  80b214:	1007883a 	mov	r3,r2
  80b218:	e0bffe17 	ldw	r2,-8(fp)
  80b21c:	10c00845 	stb	r3,33(r2)
    if (parm1 > 0)
  80b220:	e0bffb17 	ldw	r2,-20(fp)
  80b224:	0080370e 	bge	zero,r2,80b304 <lcd_handle_escape+0x280>
    {
      sp->y = parm1 - 1;
  80b228:	e0bffb17 	ldw	r2,-20(fp)
  80b22c:	10bfffc4 	addi	r2,r2,-1
  80b230:	1007883a 	mov	r3,r2
  80b234:	e0bffe17 	ldw	r2,-8(fp)
  80b238:	10c00885 	stb	r3,34(r2)
      if (sp->y > ALT_LCD_HEIGHT * 2)
  80b23c:	e0bffe17 	ldw	r2,-8(fp)
  80b240:	10800883 	ldbu	r2,34(r2)
  80b244:	10803fcc 	andi	r2,r2,255
  80b248:	10800170 	cmpltui	r2,r2,5
  80b24c:	1000061e 	bne	r2,zero,80b268 <lcd_handle_escape+0x1e4>
        sp->y = ALT_LCD_HEIGHT * 2;
  80b250:	e0bffe17 	ldw	r2,-8(fp)
  80b254:	00c00104 	movi	r3,4
  80b258:	10c00885 	stb	r3,34(r2)
      while (sp->y > ALT_LCD_HEIGHT)
  80b25c:	00000206 	br	80b268 <lcd_handle_escape+0x1e4>
        lcd_scroll_up(sp);
  80b260:	e13ffe17 	ldw	r4,-8(fp)
  80b264:	080afb80 	call	80afb8 <lcd_scroll_up>
    if (parm1 > 0)
    {
      sp->y = parm1 - 1;
      if (sp->y > ALT_LCD_HEIGHT * 2)
        sp->y = ALT_LCD_HEIGHT * 2;
      while (sp->y > ALT_LCD_HEIGHT)
  80b268:	e0bffe17 	ldw	r2,-8(fp)
  80b26c:	10800883 	ldbu	r2,34(r2)
  80b270:	10803fcc 	andi	r2,r2,255
  80b274:	108000e8 	cmpgeui	r2,r2,3
  80b278:	103ff91e 	bne	r2,zero,80b260 <__alt_mem_onchip_mem+0xff803260>
        lcd_scroll_up(sp);
    }
    break;
  80b27c:	00002106 	br	80b304 <lcd_handle_escape+0x280>
    /*   ESC J      is clear to beginning of line    [unimplemented]
     *   ESC [ 0 J  is clear to bottom of screen     [unimplemented]
     *   ESC [ 1 J  is clear to beginning of screen  [unimplemented]
     *   ESC [ 2 J  is clear screen
     */
    if (parm1 == 2)
  80b280:	e0bffb17 	ldw	r2,-20(fp)
  80b284:	10800098 	cmpnei	r2,r2,2
  80b288:	1000201e 	bne	r2,zero,80b30c <lcd_handle_escape+0x288>
      lcd_clear_screen(sp);
  80b28c:	e13ffe17 	ldw	r4,-8(fp)
  80b290:	080acfc0 	call	80acfc <lcd_clear_screen>
    break;
  80b294:	00001d06 	br	80b30c <lcd_handle_escape+0x288>
    /*   ESC K      is clear to end of line
     *   ESC [ 0 K  is clear to end of line
     *   ESC [ 1 K  is clear to beginning of line    [unimplemented]
     *   ESC [ 2 K  is clear line                    [unimplemented]
     */
    if (parm1 < 1)
  80b298:	e0bffb17 	ldw	r2,-20(fp)
  80b29c:	00801d16 	blt	zero,r2,80b314 <lcd_handle_escape+0x290>
    {
      if (sp->x < ALT_LCD_VIRTUAL_WIDTH)
  80b2a0:	e0bffe17 	ldw	r2,-8(fp)
  80b2a4:	10800843 	ldbu	r2,33(r2)
  80b2a8:	10803fcc 	andi	r2,r2,255
  80b2ac:	10801428 	cmpgeui	r2,r2,80
  80b2b0:	1000181e 	bne	r2,zero,80b314 <lcd_handle_escape+0x290>
        memset(sp->line[sp->y].data + sp->x, ' ', ALT_LCD_VIRTUAL_WIDTH - sp->x);
  80b2b4:	e0bffe17 	ldw	r2,-8(fp)
  80b2b8:	10800883 	ldbu	r2,34(r2)
  80b2bc:	10803fcc 	andi	r2,r2,255
  80b2c0:	108018e4 	muli	r2,r2,99
  80b2c4:	10801004 	addi	r2,r2,64
  80b2c8:	e0fffe17 	ldw	r3,-8(fp)
  80b2cc:	1887883a 	add	r3,r3,r2
  80b2d0:	e0bffe17 	ldw	r2,-8(fp)
  80b2d4:	10800843 	ldbu	r2,33(r2)
  80b2d8:	10803fcc 	andi	r2,r2,255
  80b2dc:	1889883a 	add	r4,r3,r2
  80b2e0:	e0bffe17 	ldw	r2,-8(fp)
  80b2e4:	10800843 	ldbu	r2,33(r2)
  80b2e8:	10803fcc 	andi	r2,r2,255
  80b2ec:	00c01404 	movi	r3,80
  80b2f0:	1885c83a 	sub	r2,r3,r2
  80b2f4:	100d883a 	mov	r6,r2
  80b2f8:	01400804 	movi	r5,32
  80b2fc:	0807d080 	call	807d08 <memset>
    }
    break;
  80b300:	00000406 	br	80b314 <lcd_handle_escape+0x290>
      if (sp->y > ALT_LCD_HEIGHT * 2)
        sp->y = ALT_LCD_HEIGHT * 2;
      while (sp->y > ALT_LCD_HEIGHT)
        lcd_scroll_up(sp);
    }
    break;
  80b304:	0001883a 	nop
  80b308:	00000306 	br	80b318 <lcd_handle_escape+0x294>
     *   ESC [ 1 J  is clear to beginning of screen  [unimplemented]
     *   ESC [ 2 J  is clear screen
     */
    if (parm1 == 2)
      lcd_clear_screen(sp);
    break;
  80b30c:	0001883a 	nop
  80b310:	00000106 	br	80b318 <lcd_handle_escape+0x294>
    if (parm1 < 1)
    {
      if (sp->x < ALT_LCD_VIRTUAL_WIDTH)
        memset(sp->line[sp->y].data + sp->x, ' ', ALT_LCD_VIRTUAL_WIDTH - sp->x);
    }
    break;
  80b314:	0001883a 	nop
  }
}
  80b318:	0001883a 	nop
  80b31c:	e037883a 	mov	sp,fp
  80b320:	dfc00117 	ldw	ra,4(sp)
  80b324:	df000017 	ldw	fp,0(sp)
  80b328:	dec00204 	addi	sp,sp,8
  80b32c:	f800283a 	ret

0080b330 <altera_avalon_lcd_16207_write>:

/* --------------------------------------------------------------------- */

int altera_avalon_lcd_16207_write(altera_avalon_lcd_16207_state* sp, 
  const char* ptr, int len, int flags)
{
  80b330:	defff304 	addi	sp,sp,-52
  80b334:	dfc00c15 	stw	ra,48(sp)
  80b338:	df000b15 	stw	fp,44(sp)
  80b33c:	df000b04 	addi	fp,sp,44
  80b340:	e13ffc15 	stw	r4,-16(fp)
  80b344:	e17ffd15 	stw	r5,-12(fp)
  80b348:	e1bffe15 	stw	r6,-8(fp)
  80b34c:	e1ffff15 	stw	r7,-4(fp)
  const char* end = ptr + len;
  80b350:	e0bffe17 	ldw	r2,-8(fp)
  80b354:	e0fffd17 	ldw	r3,-12(fp)
  80b358:	1885883a 	add	r2,r3,r2
  80b35c:	e0bff815 	stw	r2,-32(fp)

  ALT_SEM_PEND (sp->write_lock, 0);

  /* Tell the routine which is called off the timer interrupt that the
   * foreground routines are active so it must not repaint the display. */
  sp->active = 1;
  80b360:	e0bffc17 	ldw	r2,-16(fp)
  80b364:	00c00044 	movi	r3,1
  80b368:	10c009c5 	stb	r3,39(r2)

  for ( ; ptr < end ; ptr++)
  80b36c:	00009906 	br	80b5d4 <altera_avalon_lcd_16207_write+0x2a4>
  {
    char c = *ptr;
  80b370:	e0bffd17 	ldw	r2,-12(fp)
  80b374:	10800003 	ldbu	r2,0(r2)
  80b378:	e0bff905 	stb	r2,-28(fp)

    if (sp->esccount >= 0)
  80b37c:	e0bffc17 	ldw	r2,-16(fp)
  80b380:	10800903 	ldbu	r2,36(r2)
  80b384:	10803fcc 	andi	r2,r2,255
  80b388:	1080201c 	xori	r2,r2,128
  80b38c:	10bfe004 	addi	r2,r2,-128
  80b390:	10003716 	blt	r2,zero,80b470 <altera_avalon_lcd_16207_write+0x140>
    {
      unsigned int esccount = sp->esccount;
  80b394:	e0bffc17 	ldw	r2,-16(fp)
  80b398:	10800903 	ldbu	r2,36(r2)
  80b39c:	10803fcc 	andi	r2,r2,255
  80b3a0:	1080201c 	xori	r2,r2,128
  80b3a4:	10bfe004 	addi	r2,r2,-128
  80b3a8:	e0bffa15 	stw	r2,-24(fp)

      /* Single character escape sequences can end with any character
       * Multi character escape sequences start with '[' and contain
       * digits and semicolons before terminating
       */
      if ((esccount == 0 && c != '[') ||
  80b3ac:	e0bffa17 	ldw	r2,-24(fp)
  80b3b0:	1000031e 	bne	r2,zero,80b3c0 <altera_avalon_lcd_16207_write+0x90>
  80b3b4:	e0bff907 	ldb	r2,-28(fp)
  80b3b8:	108016d8 	cmpnei	r2,r2,91
  80b3bc:	10000d1e 	bne	r2,zero,80b3f4 <altera_avalon_lcd_16207_write+0xc4>
  80b3c0:	e0bffa17 	ldw	r2,-24(fp)
  80b3c4:	10001826 	beq	r2,zero,80b428 <altera_avalon_lcd_16207_write+0xf8>
          (esccount > 0 && !isdigit(c) && c != ';'))
  80b3c8:	d0e00f17 	ldw	r3,-32708(gp)
  80b3cc:	e0bff907 	ldb	r2,-28(fp)
  80b3d0:	10800044 	addi	r2,r2,1
  80b3d4:	1885883a 	add	r2,r3,r2
  80b3d8:	10800003 	ldbu	r2,0(r2)
  80b3dc:	10803fcc 	andi	r2,r2,255
  80b3e0:	1080010c 	andi	r2,r2,4
  80b3e4:	1000101e 	bne	r2,zero,80b428 <altera_avalon_lcd_16207_write+0xf8>
  80b3e8:	e0bff907 	ldb	r2,-28(fp)
  80b3ec:	10800ee0 	cmpeqi	r2,r2,59
  80b3f0:	10000d1e 	bne	r2,zero,80b428 <altera_avalon_lcd_16207_write+0xf8>
      {
        sp->escape[esccount] = 0;
  80b3f4:	e0fffc17 	ldw	r3,-16(fp)
  80b3f8:	e0bffa17 	ldw	r2,-24(fp)
  80b3fc:	1885883a 	add	r2,r3,r2
  80b400:	10800a04 	addi	r2,r2,40
  80b404:	10000005 	stb	zero,0(r2)

        lcd_handle_escape(sp, c);
  80b408:	e0bff907 	ldb	r2,-28(fp)
  80b40c:	100b883a 	mov	r5,r2
  80b410:	e13ffc17 	ldw	r4,-16(fp)
  80b414:	080b0840 	call	80b084 <lcd_handle_escape>

        sp->esccount = -1;
  80b418:	e0bffc17 	ldw	r2,-16(fp)
  80b41c:	00ffffc4 	movi	r3,-1
  80b420:	10c00905 	stb	r3,36(r2)
  80b424:	00006806 	br	80b5c8 <altera_avalon_lcd_16207_write+0x298>
      }
      else if (sp->esccount < sizeof(sp->escape)-1)
  80b428:	e0bffc17 	ldw	r2,-16(fp)
  80b42c:	10800903 	ldbu	r2,36(r2)
  80b430:	10803fcc 	andi	r2,r2,255
  80b434:	108001e8 	cmpgeui	r2,r2,7
  80b438:	1000631e 	bne	r2,zero,80b5c8 <altera_avalon_lcd_16207_write+0x298>
      {
        sp->escape[esccount] = c;
  80b43c:	e0fffc17 	ldw	r3,-16(fp)
  80b440:	e0bffa17 	ldw	r2,-24(fp)
  80b444:	1885883a 	add	r2,r3,r2
  80b448:	10800a04 	addi	r2,r2,40
  80b44c:	e0fff903 	ldbu	r3,-28(fp)
  80b450:	10c00005 	stb	r3,0(r2)
        sp->esccount++;
  80b454:	e0bffc17 	ldw	r2,-16(fp)
  80b458:	10800903 	ldbu	r2,36(r2)
  80b45c:	10800044 	addi	r2,r2,1
  80b460:	1007883a 	mov	r3,r2
  80b464:	e0bffc17 	ldw	r2,-16(fp)
  80b468:	10c00905 	stb	r3,36(r2)
  80b46c:	00005606 	br	80b5c8 <altera_avalon_lcd_16207_write+0x298>
      }
    }
    else if (c == 27) /* ESC */
  80b470:	e0bff907 	ldb	r2,-28(fp)
  80b474:	108006d8 	cmpnei	r2,r2,27
  80b478:	1000031e 	bne	r2,zero,80b488 <altera_avalon_lcd_16207_write+0x158>
    {
      sp->esccount = 0;
  80b47c:	e0bffc17 	ldw	r2,-16(fp)
  80b480:	10000905 	stb	zero,36(r2)
  80b484:	00005006 	br	80b5c8 <altera_avalon_lcd_16207_write+0x298>
    }
    else if (c == '\r')
  80b488:	e0bff907 	ldb	r2,-28(fp)
  80b48c:	10800358 	cmpnei	r2,r2,13
  80b490:	1000031e 	bne	r2,zero,80b4a0 <altera_avalon_lcd_16207_write+0x170>
    {
      sp->x = 0;
  80b494:	e0bffc17 	ldw	r2,-16(fp)
  80b498:	10000845 	stb	zero,33(r2)
  80b49c:	00004a06 	br	80b5c8 <altera_avalon_lcd_16207_write+0x298>
    }
    else if (c == '\n')
  80b4a0:	e0bff907 	ldb	r2,-28(fp)
  80b4a4:	10800298 	cmpnei	r2,r2,10
  80b4a8:	1000101e 	bne	r2,zero,80b4ec <altera_avalon_lcd_16207_write+0x1bc>
    {
      sp->x = 0;
  80b4ac:	e0bffc17 	ldw	r2,-16(fp)
  80b4b0:	10000845 	stb	zero,33(r2)
      sp->y++;
  80b4b4:	e0bffc17 	ldw	r2,-16(fp)
  80b4b8:	10800883 	ldbu	r2,34(r2)
  80b4bc:	10800044 	addi	r2,r2,1
  80b4c0:	1007883a 	mov	r3,r2
  80b4c4:	e0bffc17 	ldw	r2,-16(fp)
  80b4c8:	10c00885 	stb	r3,34(r2)

      /* Let the cursor sit at X=0, Y=HEIGHT without scrolling so the user
       * can print two lines of data without losing one.
       */
      if (sp->y > ALT_LCD_HEIGHT)
  80b4cc:	e0bffc17 	ldw	r2,-16(fp)
  80b4d0:	10800883 	ldbu	r2,34(r2)
  80b4d4:	10803fcc 	andi	r2,r2,255
  80b4d8:	108000f0 	cmpltui	r2,r2,3
  80b4dc:	10003a1e 	bne	r2,zero,80b5c8 <altera_avalon_lcd_16207_write+0x298>
        lcd_scroll_up(sp);
  80b4e0:	e13ffc17 	ldw	r4,-16(fp)
  80b4e4:	080afb80 	call	80afb8 <lcd_scroll_up>
  80b4e8:	00003706 	br	80b5c8 <altera_avalon_lcd_16207_write+0x298>
    }
    else if (c == '\b')
  80b4ec:	e0bff907 	ldb	r2,-28(fp)
  80b4f0:	10800218 	cmpnei	r2,r2,8
  80b4f4:	10000b1e 	bne	r2,zero,80b524 <altera_avalon_lcd_16207_write+0x1f4>
    {
      if (sp->x > 0)
  80b4f8:	e0bffc17 	ldw	r2,-16(fp)
  80b4fc:	10800843 	ldbu	r2,33(r2)
  80b500:	10803fcc 	andi	r2,r2,255
  80b504:	10003026 	beq	r2,zero,80b5c8 <altera_avalon_lcd_16207_write+0x298>
        sp->x--;
  80b508:	e0bffc17 	ldw	r2,-16(fp)
  80b50c:	10800843 	ldbu	r2,33(r2)
  80b510:	10bfffc4 	addi	r2,r2,-1
  80b514:	1007883a 	mov	r3,r2
  80b518:	e0bffc17 	ldw	r2,-16(fp)
  80b51c:	10c00845 	stb	r3,33(r2)
  80b520:	00002906 	br	80b5c8 <altera_avalon_lcd_16207_write+0x298>
    }
    else if (isprint(c))
  80b524:	d0e00f17 	ldw	r3,-32708(gp)
  80b528:	e0bff907 	ldb	r2,-28(fp)
  80b52c:	10800044 	addi	r2,r2,1
  80b530:	1885883a 	add	r2,r3,r2
  80b534:	10800003 	ldbu	r2,0(r2)
  80b538:	10803fcc 	andi	r2,r2,255
  80b53c:	1080201c 	xori	r2,r2,128
  80b540:	10bfe004 	addi	r2,r2,-128
  80b544:	108025cc 	andi	r2,r2,151
  80b548:	10001f26 	beq	r2,zero,80b5c8 <altera_avalon_lcd_16207_write+0x298>
    {
      /* If we didn't scroll on the last linefeed then we might need to do
       * it now. */
      if (sp->y >= ALT_LCD_HEIGHT)
  80b54c:	e0bffc17 	ldw	r2,-16(fp)
  80b550:	10800883 	ldbu	r2,34(r2)
  80b554:	10803fcc 	andi	r2,r2,255
  80b558:	108000b0 	cmpltui	r2,r2,2
  80b55c:	1000021e 	bne	r2,zero,80b568 <altera_avalon_lcd_16207_write+0x238>
        lcd_scroll_up(sp);
  80b560:	e13ffc17 	ldw	r4,-16(fp)
  80b564:	080afb80 	call	80afb8 <lcd_scroll_up>

      if (sp->x < ALT_LCD_VIRTUAL_WIDTH)
  80b568:	e0bffc17 	ldw	r2,-16(fp)
  80b56c:	10800843 	ldbu	r2,33(r2)
  80b570:	10803fcc 	andi	r2,r2,255
  80b574:	10801428 	cmpgeui	r2,r2,80
  80b578:	10000d1e 	bne	r2,zero,80b5b0 <altera_avalon_lcd_16207_write+0x280>
        sp->line[sp->y].data[sp->x] = c;
  80b57c:	e0bffc17 	ldw	r2,-16(fp)
  80b580:	10800883 	ldbu	r2,34(r2)
  80b584:	10c03fcc 	andi	r3,r2,255
  80b588:	e0bffc17 	ldw	r2,-16(fp)
  80b58c:	10800843 	ldbu	r2,33(r2)
  80b590:	10803fcc 	andi	r2,r2,255
  80b594:	e13ffc17 	ldw	r4,-16(fp)
  80b598:	18c018e4 	muli	r3,r3,99
  80b59c:	20c7883a 	add	r3,r4,r3
  80b5a0:	1885883a 	add	r2,r3,r2
  80b5a4:	10801004 	addi	r2,r2,64
  80b5a8:	e0fff903 	ldbu	r3,-28(fp)
  80b5ac:	10c00005 	stb	r3,0(r2)

      sp->x++;
  80b5b0:	e0bffc17 	ldw	r2,-16(fp)
  80b5b4:	10800843 	ldbu	r2,33(r2)
  80b5b8:	10800044 	addi	r2,r2,1
  80b5bc:	1007883a 	mov	r3,r2
  80b5c0:	e0bffc17 	ldw	r2,-16(fp)
  80b5c4:	10c00845 	stb	r3,33(r2)

  /* Tell the routine which is called off the timer interrupt that the
   * foreground routines are active so it must not repaint the display. */
  sp->active = 1;

  for ( ; ptr < end ; ptr++)
  80b5c8:	e0bffd17 	ldw	r2,-12(fp)
  80b5cc:	10800044 	addi	r2,r2,1
  80b5d0:	e0bffd15 	stw	r2,-12(fp)
  80b5d4:	e0fffd17 	ldw	r3,-12(fp)
  80b5d8:	e0bff817 	ldw	r2,-32(fp)
  80b5dc:	18bf6436 	bltu	r3,r2,80b370 <__alt_mem_onchip_mem+0xff803370>
      sp->x++;
    }
  }

  /* Recalculate the scrolling parameters */
  widthmax = ALT_LCD_WIDTH;
  80b5e0:	00800404 	movi	r2,16
  80b5e4:	e0bff615 	stw	r2,-40(fp)
  for (y = 0 ; y < ALT_LCD_HEIGHT ; y++)
  80b5e8:	e03ff515 	stw	zero,-44(fp)
  80b5ec:	00003706 	br	80b6cc <altera_avalon_lcd_16207_write+0x39c>
  {
    int width;
    for (width = ALT_LCD_VIRTUAL_WIDTH ; width > 0 ; width--)
  80b5f0:	00801404 	movi	r2,80
  80b5f4:	e0bff715 	stw	r2,-36(fp)
  80b5f8:	00001106 	br	80b640 <altera_avalon_lcd_16207_write+0x310>
      if (sp->line[y].data[width-1] != ' ')
  80b5fc:	e0bff717 	ldw	r2,-36(fp)
  80b600:	10bfffc4 	addi	r2,r2,-1
  80b604:	e13ffc17 	ldw	r4,-16(fp)
  80b608:	e0fff517 	ldw	r3,-44(fp)
  80b60c:	18c018e4 	muli	r3,r3,99
  80b610:	20c7883a 	add	r3,r4,r3
  80b614:	1885883a 	add	r2,r3,r2
  80b618:	10801004 	addi	r2,r2,64
  80b61c:	10800003 	ldbu	r2,0(r2)
  80b620:	10803fcc 	andi	r2,r2,255
  80b624:	1080201c 	xori	r2,r2,128
  80b628:	10bfe004 	addi	r2,r2,-128
  80b62c:	10800820 	cmpeqi	r2,r2,32
  80b630:	10000626 	beq	r2,zero,80b64c <altera_avalon_lcd_16207_write+0x31c>
  /* Recalculate the scrolling parameters */
  widthmax = ALT_LCD_WIDTH;
  for (y = 0 ; y < ALT_LCD_HEIGHT ; y++)
  {
    int width;
    for (width = ALT_LCD_VIRTUAL_WIDTH ; width > 0 ; width--)
  80b634:	e0bff717 	ldw	r2,-36(fp)
  80b638:	10bfffc4 	addi	r2,r2,-1
  80b63c:	e0bff715 	stw	r2,-36(fp)
  80b640:	e0bff717 	ldw	r2,-36(fp)
  80b644:	00bfed16 	blt	zero,r2,80b5fc <__alt_mem_onchip_mem+0xff8035fc>
  80b648:	00000106 	br	80b650 <altera_avalon_lcd_16207_write+0x320>
      if (sp->line[y].data[width-1] != ' ')
        break;
  80b64c:	0001883a 	nop

    /* The minimum width is the size of the LCD panel.  If the real width
     * is long enough to require scrolling then add an extra space so the
     * end of the message doesn't run into the beginning of it.
     */
    if (width <= ALT_LCD_WIDTH)
  80b650:	e0bff717 	ldw	r2,-36(fp)
  80b654:	10800448 	cmpgei	r2,r2,17
  80b658:	1000031e 	bne	r2,zero,80b668 <altera_avalon_lcd_16207_write+0x338>
      width = ALT_LCD_WIDTH;
  80b65c:	00800404 	movi	r2,16
  80b660:	e0bff715 	stw	r2,-36(fp)
  80b664:	00000306 	br	80b674 <altera_avalon_lcd_16207_write+0x344>
    else
      width++;
  80b668:	e0bff717 	ldw	r2,-36(fp)
  80b66c:	10800044 	addi	r2,r2,1
  80b670:	e0bff715 	stw	r2,-36(fp)

    sp->line[y].width = width;
  80b674:	e0bff717 	ldw	r2,-36(fp)
  80b678:	1009883a 	mov	r4,r2
  80b67c:	e0fffc17 	ldw	r3,-16(fp)
  80b680:	e0bff517 	ldw	r2,-44(fp)
  80b684:	108018e4 	muli	r2,r2,99
  80b688:	1885883a 	add	r2,r3,r2
  80b68c:	10802444 	addi	r2,r2,145
  80b690:	11000005 	stb	r4,0(r2)
    if (widthmax < width)
  80b694:	e0fff617 	ldw	r3,-40(fp)
  80b698:	e0bff717 	ldw	r2,-36(fp)
  80b69c:	1880020e 	bge	r3,r2,80b6a8 <altera_avalon_lcd_16207_write+0x378>
      widthmax = width;
  80b6a0:	e0bff717 	ldw	r2,-36(fp)
  80b6a4:	e0bff615 	stw	r2,-40(fp)
    sp->line[y].speed = 0; /* By default lines don't scroll */
  80b6a8:	e0fffc17 	ldw	r3,-16(fp)
  80b6ac:	e0bff517 	ldw	r2,-44(fp)
  80b6b0:	108018e4 	muli	r2,r2,99
  80b6b4:	1885883a 	add	r2,r3,r2
  80b6b8:	10802484 	addi	r2,r2,146
  80b6bc:	10000005 	stb	zero,0(r2)
    }
  }

  /* Recalculate the scrolling parameters */
  widthmax = ALT_LCD_WIDTH;
  for (y = 0 ; y < ALT_LCD_HEIGHT ; y++)
  80b6c0:	e0bff517 	ldw	r2,-44(fp)
  80b6c4:	10800044 	addi	r2,r2,1
  80b6c8:	e0bff515 	stw	r2,-44(fp)
  80b6cc:	e0bff517 	ldw	r2,-44(fp)
  80b6d0:	10800090 	cmplti	r2,r2,2
  80b6d4:	103fc61e 	bne	r2,zero,80b5f0 <__alt_mem_onchip_mem+0xff8035f0>
    if (widthmax < width)
      widthmax = width;
    sp->line[y].speed = 0; /* By default lines don't scroll */
  }

  if (widthmax <= ALT_LCD_WIDTH)
  80b6d8:	e0bff617 	ldw	r2,-40(fp)
  80b6dc:	10800448 	cmpgei	r2,r2,17
  80b6e0:	1000031e 	bne	r2,zero,80b6f0 <altera_avalon_lcd_16207_write+0x3c0>
    sp->scrollmax = 0;
  80b6e4:	e0bffc17 	ldw	r2,-16(fp)
  80b6e8:	10000985 	stb	zero,38(r2)
  80b6ec:	00002e06 	br	80b7a8 <altera_avalon_lcd_16207_write+0x478>
  else
  {
    widthmax *= 2;
  80b6f0:	e0bff617 	ldw	r2,-40(fp)
  80b6f4:	1085883a 	add	r2,r2,r2
  80b6f8:	e0bff615 	stw	r2,-40(fp)
    sp->scrollmax = widthmax;
  80b6fc:	e0bff617 	ldw	r2,-40(fp)
  80b700:	1007883a 	mov	r3,r2
  80b704:	e0bffc17 	ldw	r2,-16(fp)
  80b708:	10c00985 	stb	r3,38(r2)

    /* Now calculate how fast each of the other lines should go */
    for (y = 0 ; y < ALT_LCD_HEIGHT ; y++)
  80b70c:	e03ff515 	stw	zero,-44(fp)
  80b710:	00002206 	br	80b79c <altera_avalon_lcd_16207_write+0x46c>
      if (sp->line[y].width > ALT_LCD_WIDTH)
  80b714:	e0fffc17 	ldw	r3,-16(fp)
  80b718:	e0bff517 	ldw	r2,-44(fp)
  80b71c:	108018e4 	muli	r2,r2,99
  80b720:	1885883a 	add	r2,r3,r2
  80b724:	10802444 	addi	r2,r2,145
  80b728:	10800003 	ldbu	r2,0(r2)
  80b72c:	10803fcc 	andi	r2,r2,255
  80b730:	1080201c 	xori	r2,r2,128
  80b734:	10bfe004 	addi	r2,r2,-128
  80b738:	10800450 	cmplti	r2,r2,17
  80b73c:	1000141e 	bne	r2,zero,80b790 <altera_avalon_lcd_16207_write+0x460>
         */
#if 1
        /* This option makes all the lines scroll round at different speeds
         * which are chosen so that all the scrolls finish at the same time.
         */
        sp->line[y].speed = 256 * sp->line[y].width / widthmax;
  80b740:	e0fffc17 	ldw	r3,-16(fp)
  80b744:	e0bff517 	ldw	r2,-44(fp)
  80b748:	108018e4 	muli	r2,r2,99
  80b74c:	1885883a 	add	r2,r3,r2
  80b750:	10802444 	addi	r2,r2,145
  80b754:	10800003 	ldbu	r2,0(r2)
  80b758:	10803fcc 	andi	r2,r2,255
  80b75c:	1080201c 	xori	r2,r2,128
  80b760:	10bfe004 	addi	r2,r2,-128
  80b764:	1004923a 	slli	r2,r2,8
  80b768:	e17ff617 	ldw	r5,-40(fp)
  80b76c:	1009883a 	mov	r4,r2
  80b770:	08092380 	call	809238 <__divsi3>
  80b774:	1009883a 	mov	r4,r2
  80b778:	e0fffc17 	ldw	r3,-16(fp)
  80b77c:	e0bff517 	ldw	r2,-44(fp)
  80b780:	108018e4 	muli	r2,r2,99
  80b784:	1885883a 	add	r2,r3,r2
  80b788:	10802484 	addi	r2,r2,146
  80b78c:	11000005 	stb	r4,0(r2)
  {
    widthmax *= 2;
    sp->scrollmax = widthmax;

    /* Now calculate how fast each of the other lines should go */
    for (y = 0 ; y < ALT_LCD_HEIGHT ; y++)
  80b790:	e0bff517 	ldw	r2,-44(fp)
  80b794:	10800044 	addi	r2,r2,1
  80b798:	e0bff515 	stw	r2,-44(fp)
  80b79c:	e0bff517 	ldw	r2,-44(fp)
  80b7a0:	10800090 	cmplti	r2,r2,2
  80b7a4:	103fdb1e 	bne	r2,zero,80b714 <__alt_mem_onchip_mem+0xff803714>
   * (because active was set when the timer interrupt occurred).  If there
   * has been a missed repaint then paint again.  And again.  etc.
   */
  for ( ; ; )
  {
    int old_scrollpos = sp->scrollpos;
  80b7a8:	e0bffc17 	ldw	r2,-16(fp)
  80b7ac:	10800943 	ldbu	r2,37(r2)
  80b7b0:	10803fcc 	andi	r2,r2,255
  80b7b4:	e0bffb15 	stw	r2,-20(fp)

    lcd_repaint_screen(sp);
  80b7b8:	e13ffc17 	ldw	r4,-16(fp)
  80b7bc:	080adcc0 	call	80adcc <lcd_repaint_screen>

    /* Let the timer routines repaint the display again */
    sp->active = 0;
  80b7c0:	e0bffc17 	ldw	r2,-16(fp)
  80b7c4:	100009c5 	stb	zero,39(r2)

    /* Have the timer routines tried to scroll while we were painting?
     * If not then we can exit */
    if (sp->scrollpos == old_scrollpos)
  80b7c8:	e0bffc17 	ldw	r2,-16(fp)
  80b7cc:	10800943 	ldbu	r2,37(r2)
  80b7d0:	10c03fcc 	andi	r3,r2,255
  80b7d4:	e0bffb17 	ldw	r2,-20(fp)
  80b7d8:	18800426 	beq	r3,r2,80b7ec <altera_avalon_lcd_16207_write+0x4bc>
      break;

    /* We need to repaint again since the display scrolled while we were
     * painting last time */
    sp->active = 1;
  80b7dc:	e0bffc17 	ldw	r2,-16(fp)
  80b7e0:	00c00044 	movi	r3,1
  80b7e4:	10c009c5 	stb	r3,39(r2)
  }
  80b7e8:	003fef06 	br	80b7a8 <__alt_mem_onchip_mem+0xff8037a8>
    sp->active = 0;

    /* Have the timer routines tried to scroll while we were painting?
     * If not then we can exit */
    if (sp->scrollpos == old_scrollpos)
      break;
  80b7ec:	0001883a 	nop
   * semaphore so that other threads can access the buffer.
   */

  ALT_SEM_POST (sp->write_lock);

  return len;
  80b7f0:	e0bffe17 	ldw	r2,-8(fp)
}
  80b7f4:	e037883a 	mov	sp,fp
  80b7f8:	dfc00117 	ldw	ra,4(sp)
  80b7fc:	df000017 	ldw	fp,0(sp)
  80b800:	dec00204 	addi	sp,sp,8
  80b804:	f800283a 	ret

0080b808 <alt_lcd_16207_timeout>:
/*
 * Timeout routine is called every second
 */

static alt_u32 alt_lcd_16207_timeout(void* context) 
{
  80b808:	defffc04 	addi	sp,sp,-16
  80b80c:	dfc00315 	stw	ra,12(sp)
  80b810:	df000215 	stw	fp,8(sp)
  80b814:	df000204 	addi	fp,sp,8
  80b818:	e13fff15 	stw	r4,-4(fp)
  altera_avalon_lcd_16207_state* sp = (altera_avalon_lcd_16207_state*)context;
  80b81c:	e0bfff17 	ldw	r2,-4(fp)
  80b820:	e0bffe15 	stw	r2,-8(fp)

  /* Update the scrolling position */
  if (sp->scrollpos + 1 >= sp->scrollmax)
  80b824:	e0bffe17 	ldw	r2,-8(fp)
  80b828:	10800943 	ldbu	r2,37(r2)
  80b82c:	10803fcc 	andi	r2,r2,255
  80b830:	10c00044 	addi	r3,r2,1
  80b834:	e0bffe17 	ldw	r2,-8(fp)
  80b838:	10800983 	ldbu	r2,38(r2)
  80b83c:	10803fcc 	andi	r2,r2,255
  80b840:	18800316 	blt	r3,r2,80b850 <alt_lcd_16207_timeout+0x48>
    sp->scrollpos = 0;
  80b844:	e0bffe17 	ldw	r2,-8(fp)
  80b848:	10000945 	stb	zero,37(r2)
  80b84c:	00000606 	br	80b868 <alt_lcd_16207_timeout+0x60>
  else
    sp->scrollpos = sp->scrollpos + 1;
  80b850:	e0bffe17 	ldw	r2,-8(fp)
  80b854:	10800943 	ldbu	r2,37(r2)
  80b858:	10800044 	addi	r2,r2,1
  80b85c:	1007883a 	mov	r3,r2
  80b860:	e0bffe17 	ldw	r2,-8(fp)
  80b864:	10c00945 	stb	r3,37(r2)

  /* Repaint the panel unless the foreground will do it again soon */
  if (sp->scrollmax > 0 && !sp->active)
  80b868:	e0bffe17 	ldw	r2,-8(fp)
  80b86c:	10800983 	ldbu	r2,38(r2)
  80b870:	10803fcc 	andi	r2,r2,255
  80b874:	10000826 	beq	r2,zero,80b898 <alt_lcd_16207_timeout+0x90>
  80b878:	e0bffe17 	ldw	r2,-8(fp)
  80b87c:	108009c3 	ldbu	r2,39(r2)
  80b880:	10803fcc 	andi	r2,r2,255
  80b884:	1080201c 	xori	r2,r2,128
  80b888:	10bfe004 	addi	r2,r2,-128
  80b88c:	1000021e 	bne	r2,zero,80b898 <alt_lcd_16207_timeout+0x90>
    lcd_repaint_screen(sp);
  80b890:	e13ffe17 	ldw	r4,-8(fp)
  80b894:	080adcc0 	call	80adcc <lcd_repaint_screen>

  return sp->period;
  80b898:	e0bffe17 	ldw	r2,-8(fp)
  80b89c:	10800717 	ldw	r2,28(r2)
}
  80b8a0:	e037883a 	mov	sp,fp
  80b8a4:	dfc00117 	ldw	ra,4(sp)
  80b8a8:	df000017 	ldw	fp,0(sp)
  80b8ac:	dec00204 	addi	sp,sp,8
  80b8b0:	f800283a 	ret

0080b8b4 <altera_avalon_lcd_16207_init>:

/*
 * Called at boot time to initialise the LCD driver
 */
void altera_avalon_lcd_16207_init(altera_avalon_lcd_16207_state* sp)
{
  80b8b4:	defffc04 	addi	sp,sp,-16
  80b8b8:	dfc00315 	stw	ra,12(sp)
  80b8bc:	df000215 	stw	fp,8(sp)
  80b8c0:	df000204 	addi	fp,sp,8
  80b8c4:	e13fff15 	stw	r4,-4(fp)
  unsigned int base = sp->base;
  80b8c8:	e0bfff17 	ldw	r2,-4(fp)
  80b8cc:	10800017 	ldw	r2,0(r2)
  80b8d0:	e0bffe15 	stw	r2,-8(fp)

  /* Mark the device as functional */
  sp->broken = 0;
  80b8d4:	e0bfff17 	ldw	r2,-4(fp)
  80b8d8:	10000805 	stb	zero,32(r2)
   * the BUSY bit in the status register doesn't work until the display
   * has been reset three times.
   */

  /* Wait for 15 ms then reset */
  usleep(15000);
  80b8dc:	010ea604 	movi	r4,15000
  80b8e0:	080cc640 	call	80cc64 <usleep>
  IOWR_ALTERA_AVALON_LCD_16207_COMMAND(base, LCD_CMD_FUNCTION_SET | LCD_CMD_8BIT);
  80b8e4:	e0bffe17 	ldw	r2,-8(fp)
  80b8e8:	00c00c04 	movi	r3,48
  80b8ec:	10c00035 	stwio	r3,0(r2)

  /* Wait for another 4.1ms and reset again */
  usleep(4100);  
  80b8f0:	01040104 	movi	r4,4100
  80b8f4:	080cc640 	call	80cc64 <usleep>
  IOWR_ALTERA_AVALON_LCD_16207_COMMAND(base, LCD_CMD_FUNCTION_SET | LCD_CMD_8BIT);
  80b8f8:	e0bffe17 	ldw	r2,-8(fp)
  80b8fc:	00c00c04 	movi	r3,48
  80b900:	10c00035 	stwio	r3,0(r2)

  /* Wait a further 1 ms and reset a third time */
  usleep(1000);
  80b904:	0100fa04 	movi	r4,1000
  80b908:	080cc640 	call	80cc64 <usleep>
  IOWR_ALTERA_AVALON_LCD_16207_COMMAND(base, LCD_CMD_FUNCTION_SET | LCD_CMD_8BIT);
  80b90c:	e0bffe17 	ldw	r2,-8(fp)
  80b910:	00c00c04 	movi	r3,48
  80b914:	10c00035 	stwio	r3,0(r2)

  /* Setup interface parameters: 8 bit bus, 2 rows, 5x7 font */
  lcd_write_command(sp, LCD_CMD_FUNCTION_SET | LCD_CMD_8BIT | LCD_CMD_TWO_LINE);
  80b918:	01400e04 	movi	r5,56
  80b91c:	e13fff17 	ldw	r4,-4(fp)
  80b920:	080ab6c0 	call	80ab6c <lcd_write_command>
  
  /* Turn display off */
  lcd_write_command(sp, LCD_CMD_ONOFF);
  80b924:	01400204 	movi	r5,8
  80b928:	e13fff17 	ldw	r4,-4(fp)
  80b92c:	080ab6c0 	call	80ab6c <lcd_write_command>

  /* Clear display */
  lcd_clear_screen(sp);
  80b930:	e13fff17 	ldw	r4,-4(fp)
  80b934:	080acfc0 	call	80acfc <lcd_clear_screen>
  
  /* Set mode: increment after writing, don't shift display */
  lcd_write_command(sp, LCD_CMD_MODES | LCD_CMD_MODE_INC);
  80b938:	01400184 	movi	r5,6
  80b93c:	e13fff17 	ldw	r4,-4(fp)
  80b940:	080ab6c0 	call	80ab6c <lcd_write_command>

  /* Turn display on */
  lcd_write_command(sp, LCD_CMD_ONOFF | LCD_CMD_ENABLE_DISP);
  80b944:	01400304 	movi	r5,12
  80b948:	e13fff17 	ldw	r4,-4(fp)
  80b94c:	080ab6c0 	call	80ab6c <lcd_write_command>

  sp->esccount = -1;
  80b950:	e0bfff17 	ldw	r2,-4(fp)
  80b954:	00ffffc4 	movi	r3,-1
  80b958:	10c00905 	stb	r3,36(r2)
  memset(sp->escape, 0, sizeof(sp->escape));
  80b95c:	e0bfff17 	ldw	r2,-4(fp)
  80b960:	10800a04 	addi	r2,r2,40
  80b964:	01800204 	movi	r6,8
  80b968:	000b883a 	mov	r5,zero
  80b96c:	1009883a 	mov	r4,r2
  80b970:	0807d080 	call	807d08 <memset>

  sp->scrollpos = 0;
  80b974:	e0bfff17 	ldw	r2,-4(fp)
  80b978:	10000945 	stb	zero,37(r2)
  sp->scrollmax = 0;
  80b97c:	e0bfff17 	ldw	r2,-4(fp)
  80b980:	10000985 	stb	zero,38(r2)
  sp->active = 0;
  80b984:	e0bfff17 	ldw	r2,-4(fp)
  80b988:	100009c5 	stb	zero,39(r2)
  80b98c:	d0a72e17 	ldw	r2,-25416(gp)

  sp->period = alt_ticks_per_second() / 10; /* Call every 100ms */
  80b990:	01400284 	movi	r5,10
  80b994:	1009883a 	mov	r4,r2
  80b998:	08093300 	call	809330 <__udivsi3>
  80b99c:	1007883a 	mov	r3,r2
  80b9a0:	e0bfff17 	ldw	r2,-4(fp)
  80b9a4:	10c00715 	stw	r3,28(r2)

  alt_alarm_start(&sp->alarm, sp->period, &alt_lcd_16207_timeout, sp);
  80b9a8:	e0bfff17 	ldw	r2,-4(fp)
  80b9ac:	10c00104 	addi	r3,r2,4
  80b9b0:	e0bfff17 	ldw	r2,-4(fp)
  80b9b4:	10800717 	ldw	r2,28(r2)
  80b9b8:	e1ffff17 	ldw	r7,-4(fp)
  80b9bc:	01802074 	movhi	r6,129
  80b9c0:	31ae0204 	addi	r6,r6,-18424
  80b9c4:	100b883a 	mov	r5,r2
  80b9c8:	1809883a 	mov	r4,r3
  80b9cc:	08093ec0 	call	8093ec <alt_alarm_start>
}
  80b9d0:	0001883a 	nop
  80b9d4:	e037883a 	mov	sp,fp
  80b9d8:	dfc00117 	ldw	ra,4(sp)
  80b9dc:	df000017 	ldw	fp,0(sp)
  80b9e0:	dec00204 	addi	sp,sp,8
  80b9e4:	f800283a 	ret

0080b9e8 <altera_avalon_lcd_16207_write_fd>:
extern int altera_avalon_lcd_16207_write(altera_avalon_lcd_16207_state* sp,
  const char* ptr, int count, int flags);

int 
altera_avalon_lcd_16207_write_fd(alt_fd* fd, const char* buffer, int space)
{
  80b9e8:	defffa04 	addi	sp,sp,-24
  80b9ec:	dfc00515 	stw	ra,20(sp)
  80b9f0:	df000415 	stw	fp,16(sp)
  80b9f4:	df000404 	addi	fp,sp,16
  80b9f8:	e13ffd15 	stw	r4,-12(fp)
  80b9fc:	e17ffe15 	stw	r5,-8(fp)
  80ba00:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_lcd_16207_dev* dev = (altera_avalon_lcd_16207_dev*) fd->dev; 
  80ba04:	e0bffd17 	ldw	r2,-12(fp)
  80ba08:	10800017 	ldw	r2,0(r2)
  80ba0c:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_lcd_16207_write(&dev->state, buffer, space,
  80ba10:	e0bffc17 	ldw	r2,-16(fp)
  80ba14:	10c00a04 	addi	r3,r2,40
  80ba18:	e0bffd17 	ldw	r2,-12(fp)
  80ba1c:	10800217 	ldw	r2,8(r2)
  80ba20:	100f883a 	mov	r7,r2
  80ba24:	e1bfff17 	ldw	r6,-4(fp)
  80ba28:	e17ffe17 	ldw	r5,-8(fp)
  80ba2c:	1809883a 	mov	r4,r3
  80ba30:	080b3300 	call	80b330 <altera_avalon_lcd_16207_write>
      fd->fd_flags);
}
  80ba34:	e037883a 	mov	sp,fp
  80ba38:	dfc00117 	ldw	ra,4(sp)
  80ba3c:	df000017 	ldw	fp,0(sp)
  80ba40:	dec00204 	addi	sp,sp,8
  80ba44:	f800283a 	ret

0080ba48 <alt_avalon_timer_sc_irq>:
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
static void alt_avalon_timer_sc_irq (void* base)
#else
static void alt_avalon_timer_sc_irq (void* base, alt_u32 id)
#endif
{
  80ba48:	defffa04 	addi	sp,sp,-24
  80ba4c:	dfc00515 	stw	ra,20(sp)
  80ba50:	df000415 	stw	fp,16(sp)
  80ba54:	df000404 	addi	fp,sp,16
  80ba58:	e13fff15 	stw	r4,-4(fp)
  alt_irq_context cpu_sr;
  
  /* clear the interrupt */
  IOWR_ALTERA_AVALON_TIMER_STATUS (base, 0);
  80ba5c:	0007883a 	mov	r3,zero
  80ba60:	e0bfff17 	ldw	r2,-4(fp)
  80ba64:	10c00035 	stwio	r3,0(r2)
  /* 
   * Dummy read to ensure IRQ is negated before the ISR returns.
   * The control register is read because reading the status
   * register has side-effects per the register map documentation.
   */
  IORD_ALTERA_AVALON_TIMER_CONTROL (base);
  80ba68:	e0bfff17 	ldw	r2,-4(fp)
  80ba6c:	10800104 	addi	r2,r2,4
  80ba70:	10800037 	ldwio	r2,0(r2)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  80ba74:	0005303a 	rdctl	r2,status
  80ba78:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  80ba7c:	e0fffd17 	ldw	r3,-12(fp)
  80ba80:	00bfff84 	movi	r2,-2
  80ba84:	1884703a 	and	r2,r3,r2
  80ba88:	1001703a 	wrctl	status,r2
  
  return context;
  80ba8c:	e0bffd17 	ldw	r2,-12(fp)

  /* 
   * Notify the system of a clock tick. disable interrupts 
   * during this time to safely support ISR preemption
   */
  cpu_sr = alt_irq_disable_all();
  80ba90:	e0bffc15 	stw	r2,-16(fp)
  alt_tick ();
  80ba94:	0809dc40 	call	809dc4 <alt_tick>
  80ba98:	e0bffc17 	ldw	r2,-16(fp)
  80ba9c:	e0bffe15 	stw	r2,-8(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  80baa0:	e0bffe17 	ldw	r2,-8(fp)
  80baa4:	1001703a 	wrctl	status,r2
  alt_irq_enable_all(cpu_sr);
}
  80baa8:	0001883a 	nop
  80baac:	e037883a 	mov	sp,fp
  80bab0:	dfc00117 	ldw	ra,4(sp)
  80bab4:	df000017 	ldw	fp,0(sp)
  80bab8:	dec00204 	addi	sp,sp,8
  80babc:	f800283a 	ret

0080bac0 <alt_avalon_timer_sc_init>:
 * auto-generated alt_sys_init() function.
 */

void alt_avalon_timer_sc_init (void* base, alt_u32 irq_controller_id, 
                                alt_u32 irq, alt_u32 freq)
{
  80bac0:	defff804 	addi	sp,sp,-32
  80bac4:	dfc00715 	stw	ra,28(sp)
  80bac8:	df000615 	stw	fp,24(sp)
  80bacc:	df000604 	addi	fp,sp,24
  80bad0:	e13ffc15 	stw	r4,-16(fp)
  80bad4:	e17ffd15 	stw	r5,-12(fp)
  80bad8:	e1bffe15 	stw	r6,-8(fp)
  80badc:	e1ffff15 	stw	r7,-4(fp)
  80bae0:	e0bfff17 	ldw	r2,-4(fp)
  80bae4:	e0bffb15 	stw	r2,-20(fp)
 * in order to initialise the value of the clock frequency.
 */

static ALT_INLINE int ALT_ALWAYS_INLINE alt_sysclk_init (alt_u32 nticks)
{
  if (! _alt_tick_rate)
  80bae8:	d0a72e17 	ldw	r2,-25416(gp)
  80baec:	1000021e 	bne	r2,zero,80baf8 <alt_avalon_timer_sc_init+0x38>
  {
    _alt_tick_rate = nticks;
  80baf0:	e0bffb17 	ldw	r2,-20(fp)
  80baf4:	d0a72e15 	stw	r2,-25416(gp)
  
  alt_sysclk_init (freq);
  
  /* set to free running mode */
  
  IOWR_ALTERA_AVALON_TIMER_CONTROL (base, 
  80baf8:	e0bffc17 	ldw	r2,-16(fp)
  80bafc:	10800104 	addi	r2,r2,4
  80bb00:	00c001c4 	movi	r3,7
  80bb04:	10c00035 	stwio	r3,0(r2)
            ALTERA_AVALON_TIMER_CONTROL_CONT_MSK |
            ALTERA_AVALON_TIMER_CONTROL_START_MSK);

  /* register the interrupt handler, and enable the interrupt */
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
  alt_ic_isr_register(irq_controller_id, irq, alt_avalon_timer_sc_irq, 
  80bb08:	d8000015 	stw	zero,0(sp)
  80bb0c:	e1fffc17 	ldw	r7,-16(fp)
  80bb10:	01802074 	movhi	r6,129
  80bb14:	31ae9204 	addi	r6,r6,-17848
  80bb18:	e17ffe17 	ldw	r5,-8(fp)
  80bb1c:	e13ffd17 	ldw	r4,-12(fp)
  80bb20:	080c6300 	call	80c630 <alt_ic_isr_register>
                      base, NULL);
#else
  alt_irq_register (irq, base, alt_avalon_timer_sc_irq);
#endif  
}
  80bb24:	0001883a 	nop
  80bb28:	e037883a 	mov	sp,fp
  80bb2c:	dfc00117 	ldw	ra,4(sp)
  80bb30:	df000017 	ldw	fp,0(sp)
  80bb34:	dec00204 	addi	sp,sp,8
  80bb38:	f800283a 	ret

0080bb3c <altera_avalon_uart_read_fd>:
 *
 */

int 
altera_avalon_uart_read_fd(alt_fd* fd, char* buffer, int space)
{
  80bb3c:	defffa04 	addi	sp,sp,-24
  80bb40:	dfc00515 	stw	ra,20(sp)
  80bb44:	df000415 	stw	fp,16(sp)
  80bb48:	df000404 	addi	fp,sp,16
  80bb4c:	e13ffd15 	stw	r4,-12(fp)
  80bb50:	e17ffe15 	stw	r5,-8(fp)
  80bb54:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_uart_dev* dev = (altera_avalon_uart_dev*) fd->dev; 
  80bb58:	e0bffd17 	ldw	r2,-12(fp)
  80bb5c:	10800017 	ldw	r2,0(r2)
  80bb60:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_uart_read(&dev->state, buffer, space,
  80bb64:	e0bffc17 	ldw	r2,-16(fp)
  80bb68:	10c00a04 	addi	r3,r2,40
  80bb6c:	e0bffd17 	ldw	r2,-12(fp)
  80bb70:	10800217 	ldw	r2,8(r2)
  80bb74:	100f883a 	mov	r7,r2
  80bb78:	e1bfff17 	ldw	r6,-4(fp)
  80bb7c:	e17ffe17 	ldw	r5,-8(fp)
  80bb80:	1809883a 	mov	r4,r3
  80bb84:	080c0500 	call	80c050 <altera_avalon_uart_read>
      fd->fd_flags);
}
  80bb88:	e037883a 	mov	sp,fp
  80bb8c:	dfc00117 	ldw	ra,4(sp)
  80bb90:	df000017 	ldw	fp,0(sp)
  80bb94:	dec00204 	addi	sp,sp,8
  80bb98:	f800283a 	ret

0080bb9c <altera_avalon_uart_write_fd>:

int 
altera_avalon_uart_write_fd(alt_fd* fd, const char* buffer, int space)
{
  80bb9c:	defffa04 	addi	sp,sp,-24
  80bba0:	dfc00515 	stw	ra,20(sp)
  80bba4:	df000415 	stw	fp,16(sp)
  80bba8:	df000404 	addi	fp,sp,16
  80bbac:	e13ffd15 	stw	r4,-12(fp)
  80bbb0:	e17ffe15 	stw	r5,-8(fp)
  80bbb4:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_uart_dev* dev = (altera_avalon_uart_dev*) fd->dev; 
  80bbb8:	e0bffd17 	ldw	r2,-12(fp)
  80bbbc:	10800017 	ldw	r2,0(r2)
  80bbc0:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_uart_write(&dev->state, buffer, space,
  80bbc4:	e0bffc17 	ldw	r2,-16(fp)
  80bbc8:	10c00a04 	addi	r3,r2,40
  80bbcc:	e0bffd17 	ldw	r2,-12(fp)
  80bbd0:	10800217 	ldw	r2,8(r2)
  80bbd4:	100f883a 	mov	r7,r2
  80bbd8:	e1bfff17 	ldw	r6,-4(fp)
  80bbdc:	e17ffe17 	ldw	r5,-8(fp)
  80bbe0:	1809883a 	mov	r4,r3
  80bbe4:	080c2680 	call	80c268 <altera_avalon_uart_write>
      fd->fd_flags);
}
  80bbe8:	e037883a 	mov	sp,fp
  80bbec:	dfc00117 	ldw	ra,4(sp)
  80bbf0:	df000017 	ldw	fp,0(sp)
  80bbf4:	dec00204 	addi	sp,sp,8
  80bbf8:	f800283a 	ret

0080bbfc <altera_avalon_uart_close_fd>:

#endif /* ALTERA_AVALON_UART_USE_IOCTL */

int 
altera_avalon_uart_close_fd(alt_fd* fd)
{
  80bbfc:	defffc04 	addi	sp,sp,-16
  80bc00:	dfc00315 	stw	ra,12(sp)
  80bc04:	df000215 	stw	fp,8(sp)
  80bc08:	df000204 	addi	fp,sp,8
  80bc0c:	e13fff15 	stw	r4,-4(fp)
    altera_avalon_uart_dev* dev = (altera_avalon_uart_dev*) fd->dev; 
  80bc10:	e0bfff17 	ldw	r2,-4(fp)
  80bc14:	10800017 	ldw	r2,0(r2)
  80bc18:	e0bffe15 	stw	r2,-8(fp)

    return altera_avalon_uart_close(&dev->state, fd->fd_flags);
  80bc1c:	e0bffe17 	ldw	r2,-8(fp)
  80bc20:	10c00a04 	addi	r3,r2,40
  80bc24:	e0bfff17 	ldw	r2,-4(fp)
  80bc28:	10800217 	ldw	r2,8(r2)
  80bc2c:	100b883a 	mov	r5,r2
  80bc30:	1809883a 	mov	r4,r3
  80bc34:	080bfc00 	call	80bfc0 <altera_avalon_uart_close>
}
  80bc38:	e037883a 	mov	sp,fp
  80bc3c:	dfc00117 	ldw	ra,4(sp)
  80bc40:	df000017 	ldw	fp,0(sp)
  80bc44:	dec00204 	addi	sp,sp,8
  80bc48:	f800283a 	ret

0080bc4c <altera_avalon_uart_init>:
  alt_u32 status);

void 
altera_avalon_uart_init(altera_avalon_uart_state* sp, 
  alt_u32 irq_controller_id,  alt_u32 irq)
{
  80bc4c:	defff804 	addi	sp,sp,-32
  80bc50:	dfc00715 	stw	ra,28(sp)
  80bc54:	df000615 	stw	fp,24(sp)
  80bc58:	df000604 	addi	fp,sp,24
  80bc5c:	e13ffd15 	stw	r4,-12(fp)
  80bc60:	e17ffe15 	stw	r5,-8(fp)
  80bc64:	e1bfff15 	stw	r6,-4(fp)
  void* base = sp->base;
  80bc68:	e0bffd17 	ldw	r2,-12(fp)
  80bc6c:	10800017 	ldw	r2,0(r2)
  80bc70:	e0bffb15 	stw	r2,-20(fp)
 * HAL.
 */

static ALT_INLINE int ALT_ALWAYS_INLINE alt_no_error (void)
{
  return 0;
  80bc74:	0005883a 	mov	r2,zero
   * Initialise the read and write flags and the semaphores used to 
   * protect access to the circular buffers when running in a multi-threaded
   * environment.
   */
  error = ALT_FLAG_CREATE (&sp->events, 0)    || 
          ALT_SEM_CREATE (&sp->read_lock, 1)  ||
  80bc78:	1000041e 	bne	r2,zero,80bc8c <altera_avalon_uart_init+0x40>
  80bc7c:	0005883a 	mov	r2,zero
  /* 
   * Initialise the read and write flags and the semaphores used to 
   * protect access to the circular buffers when running in a multi-threaded
   * environment.
   */
  error = ALT_FLAG_CREATE (&sp->events, 0)    || 
  80bc80:	1000021e 	bne	r2,zero,80bc8c <altera_avalon_uart_init+0x40>
  80bc84:	0005883a 	mov	r2,zero
          ALT_SEM_CREATE (&sp->read_lock, 1)  ||
  80bc88:	10000226 	beq	r2,zero,80bc94 <altera_avalon_uart_init+0x48>
  80bc8c:	00800044 	movi	r2,1
  80bc90:	00000106 	br	80bc98 <altera_avalon_uart_init+0x4c>
  80bc94:	0005883a 	mov	r2,zero
  /* 
   * Initialise the read and write flags and the semaphores used to 
   * protect access to the circular buffers when running in a multi-threaded
   * environment.
   */
  error = ALT_FLAG_CREATE (&sp->events, 0)    || 
  80bc98:	e0bffc15 	stw	r2,-16(fp)
          ALT_SEM_CREATE (&sp->read_lock, 1)  ||
          ALT_SEM_CREATE (&sp->write_lock, 1);

  if (!error)
  80bc9c:	e0bffc17 	ldw	r2,-16(fp)
  80bca0:	10000f1e 	bne	r2,zero,80bce0 <altera_avalon_uart_init+0x94>
  {
    /* enable interrupts at the device */
    sp->ctrl = ALTERA_AVALON_UART_CONTROL_RTS_MSK  |
  80bca4:	e0bffd17 	ldw	r2,-12(fp)
  80bca8:	00c32004 	movi	r3,3200
  80bcac:	10c00115 	stw	r3,4(r2)
                ALTERA_AVALON_UART_CONTROL_RRDY_MSK |
                ALTERA_AVALON_UART_CONTROL_DCTS_MSK;

    IOWR_ALTERA_AVALON_UART_CONTROL(base, sp->ctrl); 
  80bcb0:	e0bffb17 	ldw	r2,-20(fp)
  80bcb4:	10800304 	addi	r2,r2,12
  80bcb8:	e0fffd17 	ldw	r3,-12(fp)
  80bcbc:	18c00117 	ldw	r3,4(r3)
  80bcc0:	10c00035 	stwio	r3,0(r2)
  
    /* register the interrupt handler */
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
    alt_ic_isr_register(irq_controller_id, irq, altera_avalon_uart_irq, sp, 
  80bcc4:	d8000015 	stw	zero,0(sp)
  80bcc8:	e1fffd17 	ldw	r7,-12(fp)
  80bccc:	01802074 	movhi	r6,129
  80bcd0:	31af3e04 	addi	r6,r6,-17160
  80bcd4:	e17fff17 	ldw	r5,-4(fp)
  80bcd8:	e13ffe17 	ldw	r4,-8(fp)
  80bcdc:	080c6300 	call	80c630 <alt_ic_isr_register>
      0x0);
#else
    alt_irq_register (irq, sp, altera_avalon_uart_irq);
#endif  
  }
}
  80bce0:	0001883a 	nop
  80bce4:	e037883a 	mov	sp,fp
  80bce8:	dfc00117 	ldw	ra,4(sp)
  80bcec:	df000017 	ldw	fp,0(sp)
  80bcf0:	dec00204 	addi	sp,sp,8
  80bcf4:	f800283a 	ret

0080bcf8 <altera_avalon_uart_irq>:
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
static void altera_avalon_uart_irq(void* context)
#else
static void altera_avalon_uart_irq(void* context, alt_u32 id)
#endif
{
  80bcf8:	defffa04 	addi	sp,sp,-24
  80bcfc:	dfc00515 	stw	ra,20(sp)
  80bd00:	df000415 	stw	fp,16(sp)
  80bd04:	df000404 	addi	fp,sp,16
  80bd08:	e13fff15 	stw	r4,-4(fp)
  alt_u32 status;

  altera_avalon_uart_state* sp = (altera_avalon_uart_state*) context;
  80bd0c:	e0bfff17 	ldw	r2,-4(fp)
  80bd10:	e0bffc15 	stw	r2,-16(fp)
  void* base               = sp->base;
  80bd14:	e0bffc17 	ldw	r2,-16(fp)
  80bd18:	10800017 	ldw	r2,0(r2)
  80bd1c:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Read the status register in order to determine the cause of the
   * interrupt.
   */

  status = IORD_ALTERA_AVALON_UART_STATUS(base);
  80bd20:	e0bffd17 	ldw	r2,-12(fp)
  80bd24:	10800204 	addi	r2,r2,8
  80bd28:	10800037 	ldwio	r2,0(r2)
  80bd2c:	e0bffe15 	stw	r2,-8(fp)

  /* Clear any error flags set at the device */
  IOWR_ALTERA_AVALON_UART_STATUS(base, 0);
  80bd30:	e0bffd17 	ldw	r2,-12(fp)
  80bd34:	10800204 	addi	r2,r2,8
  80bd38:	0007883a 	mov	r3,zero
  80bd3c:	10c00035 	stwio	r3,0(r2)

  /* Dummy read to ensure IRQ is negated before ISR returns */
  IORD_ALTERA_AVALON_UART_STATUS(base);
  80bd40:	e0bffd17 	ldw	r2,-12(fp)
  80bd44:	10800204 	addi	r2,r2,8
  80bd48:	10800037 	ldwio	r2,0(r2)
  
  /* process a read irq */
  if (status & ALTERA_AVALON_UART_STATUS_RRDY_MSK)
  80bd4c:	e0bffe17 	ldw	r2,-8(fp)
  80bd50:	1080200c 	andi	r2,r2,128
  80bd54:	10000326 	beq	r2,zero,80bd64 <altera_avalon_uart_irq+0x6c>
  {
    altera_avalon_uart_rxirq(sp, status);
  80bd58:	e17ffe17 	ldw	r5,-8(fp)
  80bd5c:	e13ffc17 	ldw	r4,-16(fp)
  80bd60:	080bd940 	call	80bd94 <altera_avalon_uart_rxirq>
  }

  /* process a write irq */
  if (status & (ALTERA_AVALON_UART_STATUS_TRDY_MSK | 
  80bd64:	e0bffe17 	ldw	r2,-8(fp)
  80bd68:	1081100c 	andi	r2,r2,1088
  80bd6c:	10000326 	beq	r2,zero,80bd7c <altera_avalon_uart_irq+0x84>
                  ALTERA_AVALON_UART_STATUS_DCTS_MSK))
  {
    altera_avalon_uart_txirq(sp, status);
  80bd70:	e17ffe17 	ldw	r5,-8(fp)
  80bd74:	e13ffc17 	ldw	r4,-16(fp)
  80bd78:	080be780 	call	80be78 <altera_avalon_uart_txirq>
  }
  

}
  80bd7c:	0001883a 	nop
  80bd80:	e037883a 	mov	sp,fp
  80bd84:	dfc00117 	ldw	ra,4(sp)
  80bd88:	df000017 	ldw	fp,0(sp)
  80bd8c:	dec00204 	addi	sp,sp,8
  80bd90:	f800283a 	ret

0080bd94 <altera_avalon_uart_rxirq>:
 * the receive circular buffer, and sets the apropriate flags to indicate 
 * that there is data ready to be processed.
 */
static void 
altera_avalon_uart_rxirq(altera_avalon_uart_state* sp, alt_u32 status)
{
  80bd94:	defffc04 	addi	sp,sp,-16
  80bd98:	df000315 	stw	fp,12(sp)
  80bd9c:	df000304 	addi	fp,sp,12
  80bda0:	e13ffe15 	stw	r4,-8(fp)
  80bda4:	e17fff15 	stw	r5,-4(fp)
  alt_u32 next;
  
  /* If there was an error, discard the data */

  if (status & (ALTERA_AVALON_UART_STATUS_PE_MSK | 
  80bda8:	e0bfff17 	ldw	r2,-4(fp)
  80bdac:	108000cc 	andi	r2,r2,3
  80bdb0:	10002c1e 	bne	r2,zero,80be64 <altera_avalon_uart_rxirq+0xd0>
   * In a multi-threaded environment, set the read event flag to indicate
   * that there is data ready. This is only done if the circular buffer was
   * previously empty.
   */

  if (sp->rx_end == sp->rx_start)
  80bdb4:	e0bffe17 	ldw	r2,-8(fp)
  80bdb8:	10800317 	ldw	r2,12(r2)
  80bdbc:	e0bffe17 	ldw	r2,-8(fp)
  80bdc0:	10800217 	ldw	r2,8(r2)
    ALT_FLAG_POST (sp->events, ALT_UART_READ_RDY, OS_FLAG_SET);
  }

  /* Determine which slot to use next in the circular buffer */

  next = (sp->rx_end + 1) & ALT_AVALON_UART_BUF_MSK;
  80bdc4:	e0bffe17 	ldw	r2,-8(fp)
  80bdc8:	10800317 	ldw	r2,12(r2)
  80bdcc:	10800044 	addi	r2,r2,1
  80bdd0:	10800fcc 	andi	r2,r2,63
  80bdd4:	e0bffd15 	stw	r2,-12(fp)

  /* Transfer data from the device to the circular buffer */

  sp->rx_buf[sp->rx_end] = IORD_ALTERA_AVALON_UART_RXDATA(sp->base);
  80bdd8:	e0bffe17 	ldw	r2,-8(fp)
  80bddc:	10800317 	ldw	r2,12(r2)
  80bde0:	e0fffe17 	ldw	r3,-8(fp)
  80bde4:	18c00017 	ldw	r3,0(r3)
  80bde8:	18c00037 	ldwio	r3,0(r3)
  80bdec:	1809883a 	mov	r4,r3
  80bdf0:	e0fffe17 	ldw	r3,-8(fp)
  80bdf4:	1885883a 	add	r2,r3,r2
  80bdf8:	10800704 	addi	r2,r2,28
  80bdfc:	11000005 	stb	r4,0(r2)

  sp->rx_end = next;
  80be00:	e0bffe17 	ldw	r2,-8(fp)
  80be04:	e0fffd17 	ldw	r3,-12(fp)
  80be08:	10c00315 	stw	r3,12(r2)

  next = (sp->rx_end + 1) & ALT_AVALON_UART_BUF_MSK;
  80be0c:	e0bffe17 	ldw	r2,-8(fp)
  80be10:	10800317 	ldw	r2,12(r2)
  80be14:	10800044 	addi	r2,r2,1
  80be18:	10800fcc 	andi	r2,r2,63
  80be1c:	e0bffd15 	stw	r2,-12(fp)
  /*
   * If the cicular buffer was full, disable interrupts. Interrupts will be
   * re-enabled when data is removed from the buffer.
   */

  if (next == sp->rx_start)
  80be20:	e0bffe17 	ldw	r2,-8(fp)
  80be24:	10c00217 	ldw	r3,8(r2)
  80be28:	e0bffd17 	ldw	r2,-12(fp)
  80be2c:	18800e1e 	bne	r3,r2,80be68 <altera_avalon_uart_rxirq+0xd4>
  {
    sp->ctrl &= ~ALTERA_AVALON_UART_CONTROL_RRDY_MSK;
  80be30:	e0bffe17 	ldw	r2,-8(fp)
  80be34:	10c00117 	ldw	r3,4(r2)
  80be38:	00bfdfc4 	movi	r2,-129
  80be3c:	1886703a 	and	r3,r3,r2
  80be40:	e0bffe17 	ldw	r2,-8(fp)
  80be44:	10c00115 	stw	r3,4(r2)
    IOWR_ALTERA_AVALON_UART_CONTROL(sp->base, sp->ctrl); 
  80be48:	e0bffe17 	ldw	r2,-8(fp)
  80be4c:	10800017 	ldw	r2,0(r2)
  80be50:	10800304 	addi	r2,r2,12
  80be54:	e0fffe17 	ldw	r3,-8(fp)
  80be58:	18c00117 	ldw	r3,4(r3)
  80be5c:	10c00035 	stwio	r3,0(r2)
  80be60:	00000106 	br	80be68 <altera_avalon_uart_rxirq+0xd4>
  /* If there was an error, discard the data */

  if (status & (ALTERA_AVALON_UART_STATUS_PE_MSK | 
                  ALTERA_AVALON_UART_STATUS_FE_MSK))
  {
    return;
  80be64:	0001883a 	nop
  if (next == sp->rx_start)
  {
    sp->ctrl &= ~ALTERA_AVALON_UART_CONTROL_RRDY_MSK;
    IOWR_ALTERA_AVALON_UART_CONTROL(sp->base, sp->ctrl); 
  }   
}
  80be68:	e037883a 	mov	sp,fp
  80be6c:	df000017 	ldw	fp,0(sp)
  80be70:	dec00104 	addi	sp,sp,4
  80be74:	f800283a 	ret

0080be78 <altera_avalon_uart_txirq>:
 * buffer to the device, and sets the apropriate flags to indicate that 
 * there is data ready to be processed.
 */
static void 
altera_avalon_uart_txirq(altera_avalon_uart_state* sp, alt_u32 status)
{
  80be78:	defffb04 	addi	sp,sp,-20
  80be7c:	df000415 	stw	fp,16(sp)
  80be80:	df000404 	addi	fp,sp,16
  80be84:	e13ffc15 	stw	r4,-16(fp)
  80be88:	e17ffd15 	stw	r5,-12(fp)
  /* Transfer data if there is some ready to be transfered */

  if (sp->tx_start != sp->tx_end)
  80be8c:	e0bffc17 	ldw	r2,-16(fp)
  80be90:	10c00417 	ldw	r3,16(r2)
  80be94:	e0bffc17 	ldw	r2,-16(fp)
  80be98:	10800517 	ldw	r2,20(r2)
  80be9c:	18803226 	beq	r3,r2,80bf68 <altera_avalon_uart_txirq+0xf0>
    /* 
     * If the device is using flow control (i.e. RTS/CTS), then the
     * transmitter is required to throttle if CTS is high.
     */

    if (!(sp->flags & ALT_AVALON_UART_FC) ||
  80bea0:	e0bffc17 	ldw	r2,-16(fp)
  80bea4:	10800617 	ldw	r2,24(r2)
  80bea8:	1080008c 	andi	r2,r2,2
  80beac:	10000326 	beq	r2,zero,80bebc <altera_avalon_uart_txirq+0x44>
      (status & ALTERA_AVALON_UART_STATUS_CTS_MSK))
  80beb0:	e0bffd17 	ldw	r2,-12(fp)
  80beb4:	1082000c 	andi	r2,r2,2048
    /* 
     * If the device is using flow control (i.e. RTS/CTS), then the
     * transmitter is required to throttle if CTS is high.
     */

    if (!(sp->flags & ALT_AVALON_UART_FC) ||
  80beb8:	10001d26 	beq	r2,zero,80bf30 <altera_avalon_uart_txirq+0xb8>
       * In a multi-threaded environment, set the write event flag to indicate
       * that there is space in the circular buffer. This is only done if the
       * buffer was previously empty.
       */

      if (sp->tx_start == ((sp->tx_end + 1) & ALT_AVALON_UART_BUF_MSK))
  80bebc:	e0bffc17 	ldw	r2,-16(fp)
  80bec0:	10800417 	ldw	r2,16(r2)
  80bec4:	e0bffc17 	ldw	r2,-16(fp)
  80bec8:	10800517 	ldw	r2,20(r2)
                       OS_FLAG_SET);
      }

      /* Write the data to the device */

      IOWR_ALTERA_AVALON_UART_TXDATA(sp->base, sp->tx_buf[sp->tx_start]);
  80becc:	e0bffc17 	ldw	r2,-16(fp)
  80bed0:	10800017 	ldw	r2,0(r2)
  80bed4:	10800104 	addi	r2,r2,4
  80bed8:	e0fffc17 	ldw	r3,-16(fp)
  80bedc:	18c00417 	ldw	r3,16(r3)
  80bee0:	e13ffc17 	ldw	r4,-16(fp)
  80bee4:	20c7883a 	add	r3,r4,r3
  80bee8:	18c01704 	addi	r3,r3,92
  80beec:	18c00003 	ldbu	r3,0(r3)
  80bef0:	18c03fcc 	andi	r3,r3,255
  80bef4:	10c00035 	stwio	r3,0(r2)

      sp->tx_start = (++sp->tx_start) & ALT_AVALON_UART_BUF_MSK;
  80bef8:	e0bffc17 	ldw	r2,-16(fp)
  80befc:	10800417 	ldw	r2,16(r2)
  80bf00:	10800044 	addi	r2,r2,1
  80bf04:	e0fffc17 	ldw	r3,-16(fp)
  80bf08:	18800415 	stw	r2,16(r3)
  80bf0c:	10c00fcc 	andi	r3,r2,63
  80bf10:	e0bffc17 	ldw	r2,-16(fp)
  80bf14:	10c00415 	stw	r3,16(r2)
      /*
       * In case the tranmit interrupt had previously been disabled by 
       * detecting a low value on CTS, it is reenabled here.
       */ 

      sp->ctrl |= ALTERA_AVALON_UART_CONTROL_TRDY_MSK;
  80bf18:	e0bffc17 	ldw	r2,-16(fp)
  80bf1c:	10800117 	ldw	r2,4(r2)
  80bf20:	10c01014 	ori	r3,r2,64
  80bf24:	e0bffc17 	ldw	r2,-16(fp)
  80bf28:	10c00115 	stw	r3,4(r2)
  80bf2c:	00000e06 	br	80bf68 <altera_avalon_uart_txirq+0xf0>
       * the last write to the status register. To avoid this resulting in
       * deadlock, it's necessary to re-check the status register here
       * before throttling.
       */
 
      status = IORD_ALTERA_AVALON_UART_STATUS(sp->base); 
  80bf30:	e0bffc17 	ldw	r2,-16(fp)
  80bf34:	10800017 	ldw	r2,0(r2)
  80bf38:	10800204 	addi	r2,r2,8
  80bf3c:	10800037 	ldwio	r2,0(r2)
  80bf40:	e0bffd15 	stw	r2,-12(fp)

      if (!(status & ALTERA_AVALON_UART_STATUS_CTS_MSK))
  80bf44:	e0bffd17 	ldw	r2,-12(fp)
  80bf48:	1082000c 	andi	r2,r2,2048
  80bf4c:	1000061e 	bne	r2,zero,80bf68 <altera_avalon_uart_txirq+0xf0>
      {
        sp->ctrl &= ~ALTERA_AVALON_UART_CONTROL_TRDY_MSK;
  80bf50:	e0bffc17 	ldw	r2,-16(fp)
  80bf54:	10c00117 	ldw	r3,4(r2)
  80bf58:	00bfefc4 	movi	r2,-65
  80bf5c:	1886703a 	and	r3,r3,r2
  80bf60:	e0bffc17 	ldw	r2,-16(fp)
  80bf64:	10c00115 	stw	r3,4(r2)
  /*
   * If the circular buffer is empty, disable the interrupt. This will be
   * re-enabled when new data is placed in the buffer.
   */

  if (sp->tx_start == sp->tx_end)
  80bf68:	e0bffc17 	ldw	r2,-16(fp)
  80bf6c:	10c00417 	ldw	r3,16(r2)
  80bf70:	e0bffc17 	ldw	r2,-16(fp)
  80bf74:	10800517 	ldw	r2,20(r2)
  80bf78:	1880061e 	bne	r3,r2,80bf94 <altera_avalon_uart_txirq+0x11c>
  {
    sp->ctrl &= ~(ALTERA_AVALON_UART_CONTROL_TRDY_MSK |
  80bf7c:	e0bffc17 	ldw	r2,-16(fp)
  80bf80:	10c00117 	ldw	r3,4(r2)
  80bf84:	00beefc4 	movi	r2,-1089
  80bf88:	1886703a 	and	r3,r3,r2
  80bf8c:	e0bffc17 	ldw	r2,-16(fp)
  80bf90:	10c00115 	stw	r3,4(r2)
                    ALTERA_AVALON_UART_CONTROL_DCTS_MSK);
  }

  IOWR_ALTERA_AVALON_UART_CONTROL(sp->base, sp->ctrl);
  80bf94:	e0bffc17 	ldw	r2,-16(fp)
  80bf98:	10800017 	ldw	r2,0(r2)
  80bf9c:	10800304 	addi	r2,r2,12
  80bfa0:	e0fffc17 	ldw	r3,-16(fp)
  80bfa4:	18c00117 	ldw	r3,4(r3)
  80bfa8:	10c00035 	stwio	r3,0(r2)
}
  80bfac:	0001883a 	nop
  80bfb0:	e037883a 	mov	sp,fp
  80bfb4:	df000017 	ldw	fp,0(sp)
  80bfb8:	dec00104 	addi	sp,sp,4
  80bfbc:	f800283a 	ret

0080bfc0 <altera_avalon_uart_close>:
 * The close routine is not implemented for the small driver; instead it will
 * map to null. This is because the small driver simply waits while characters
 * are transmitted; there is no interrupt-serviced buffer to empty 
 */
int altera_avalon_uart_close(altera_avalon_uart_state* sp, int flags)
{
  80bfc0:	defffd04 	addi	sp,sp,-12
  80bfc4:	df000215 	stw	fp,8(sp)
  80bfc8:	df000204 	addi	fp,sp,8
  80bfcc:	e13ffe15 	stw	r4,-8(fp)
  80bfd0:	e17fff15 	stw	r5,-4(fp)
  /* 
   * Wait for all transmit data to be emptied by the UART ISR.
   */
  while (sp->tx_start != sp->tx_end) {
  80bfd4:	00000506 	br	80bfec <altera_avalon_uart_close+0x2c>
    if (flags & O_NONBLOCK) {
  80bfd8:	e0bfff17 	ldw	r2,-4(fp)
  80bfdc:	1090000c 	andi	r2,r2,16384
  80bfe0:	10000226 	beq	r2,zero,80bfec <altera_avalon_uart_close+0x2c>
      return -EWOULDBLOCK; 
  80bfe4:	00bffd44 	movi	r2,-11
  80bfe8:	00000606 	br	80c004 <altera_avalon_uart_close+0x44>
int altera_avalon_uart_close(altera_avalon_uart_state* sp, int flags)
{
  /* 
   * Wait for all transmit data to be emptied by the UART ISR.
   */
  while (sp->tx_start != sp->tx_end) {
  80bfec:	e0bffe17 	ldw	r2,-8(fp)
  80bff0:	10c00417 	ldw	r3,16(r2)
  80bff4:	e0bffe17 	ldw	r2,-8(fp)
  80bff8:	10800517 	ldw	r2,20(r2)
  80bffc:	18bff61e 	bne	r3,r2,80bfd8 <__alt_mem_onchip_mem+0xff803fd8>
    if (flags & O_NONBLOCK) {
      return -EWOULDBLOCK; 
    }
  }

  return 0;
  80c000:	0005883a 	mov	r2,zero
}
  80c004:	e037883a 	mov	sp,fp
  80c008:	df000017 	ldw	fp,0(sp)
  80c00c:	dec00104 	addi	sp,sp,4
  80c010:	f800283a 	ret

0080c014 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
  80c014:	defffe04 	addi	sp,sp,-8
  80c018:	dfc00115 	stw	ra,4(sp)
  80c01c:	df000015 	stw	fp,0(sp)
  80c020:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
  80c024:	d0a00917 	ldw	r2,-32732(gp)
  80c028:	10000326 	beq	r2,zero,80c038 <alt_get_errno+0x24>
  80c02c:	d0a00917 	ldw	r2,-32732(gp)
  80c030:	103ee83a 	callr	r2
  80c034:	00000106 	br	80c03c <alt_get_errno+0x28>
  80c038:	d0a72a04 	addi	r2,gp,-25432
}
  80c03c:	e037883a 	mov	sp,fp
  80c040:	dfc00117 	ldw	ra,4(sp)
  80c044:	df000017 	ldw	fp,0(sp)
  80c048:	dec00204 	addi	sp,sp,8
  80c04c:	f800283a 	ret

0080c050 <altera_avalon_uart_read>:
 */

int 
altera_avalon_uart_read(altera_avalon_uart_state* sp, char* ptr, int len,
  int flags)
{
  80c050:	defff204 	addi	sp,sp,-56
  80c054:	dfc00d15 	stw	ra,52(sp)
  80c058:	df000c15 	stw	fp,48(sp)
  80c05c:	df000c04 	addi	fp,sp,48
  80c060:	e13ffc15 	stw	r4,-16(fp)
  80c064:	e17ffd15 	stw	r5,-12(fp)
  80c068:	e1bffe15 	stw	r6,-8(fp)
  80c06c:	e1ffff15 	stw	r7,-4(fp)
  alt_irq_context context;
  int             block;
  alt_u8          read_would_block = 0;
  80c070:	e03ff405 	stb	zero,-48(fp)
  int             count = 0;
  80c074:	e03ff515 	stw	zero,-44(fp)
  /* 
   * Construct a flag to indicate whether the device is being accessed in
   * blocking or non-blocking mode.
   */

  block = !(flags & O_NONBLOCK);
  80c078:	e0bfff17 	ldw	r2,-4(fp)
  80c07c:	1090000c 	andi	r2,r2,16384
  80c080:	1005003a 	cmpeq	r2,r2,zero
  80c084:	10803fcc 	andi	r2,r2,255
  80c088:	e0bff615 	stw	r2,-40(fp)
    /*
     * Read the required amount of data, until the circular buffer runs
     * empty
     */

    while ((count < len) && (sp->rx_start != sp->rx_end))
  80c08c:	00001306 	br	80c0dc <altera_avalon_uart_read+0x8c>
    {
      count++;
  80c090:	e0bff517 	ldw	r2,-44(fp)
  80c094:	10800044 	addi	r2,r2,1
  80c098:	e0bff515 	stw	r2,-44(fp)
      *ptr++ = sp->rx_buf[sp->rx_start];
  80c09c:	e0bffd17 	ldw	r2,-12(fp)
  80c0a0:	10c00044 	addi	r3,r2,1
  80c0a4:	e0fffd15 	stw	r3,-12(fp)
  80c0a8:	e0fffc17 	ldw	r3,-16(fp)
  80c0ac:	18c00217 	ldw	r3,8(r3)
  80c0b0:	e13ffc17 	ldw	r4,-16(fp)
  80c0b4:	20c7883a 	add	r3,r4,r3
  80c0b8:	18c00704 	addi	r3,r3,28
  80c0bc:	18c00003 	ldbu	r3,0(r3)
  80c0c0:	10c00005 	stb	r3,0(r2)
      
      sp->rx_start = (sp->rx_start+1) & ALT_AVALON_UART_BUF_MSK;
  80c0c4:	e0bffc17 	ldw	r2,-16(fp)
  80c0c8:	10800217 	ldw	r2,8(r2)
  80c0cc:	10800044 	addi	r2,r2,1
  80c0d0:	10c00fcc 	andi	r3,r2,63
  80c0d4:	e0bffc17 	ldw	r2,-16(fp)
  80c0d8:	10c00215 	stw	r3,8(r2)
    /*
     * Read the required amount of data, until the circular buffer runs
     * empty
     */

    while ((count < len) && (sp->rx_start != sp->rx_end))
  80c0dc:	e0fff517 	ldw	r3,-44(fp)
  80c0e0:	e0bffe17 	ldw	r2,-8(fp)
  80c0e4:	1880050e 	bge	r3,r2,80c0fc <altera_avalon_uart_read+0xac>
  80c0e8:	e0bffc17 	ldw	r2,-16(fp)
  80c0ec:	10c00217 	ldw	r3,8(r2)
  80c0f0:	e0bffc17 	ldw	r2,-16(fp)
  80c0f4:	10800317 	ldw	r2,12(r2)
  80c0f8:	18bfe51e 	bne	r3,r2,80c090 <__alt_mem_onchip_mem+0xff804090>
    /*
     * If no data has been transferred, the circular buffer is empty, and
     * this is not a non-blocking access, block waiting for data to arrive.
     */

    if (!count && (sp->rx_start == sp->rx_end))
  80c0fc:	e0bff517 	ldw	r2,-44(fp)
  80c100:	1000251e 	bne	r2,zero,80c198 <altera_avalon_uart_read+0x148>
  80c104:	e0bffc17 	ldw	r2,-16(fp)
  80c108:	10c00217 	ldw	r3,8(r2)
  80c10c:	e0bffc17 	ldw	r2,-16(fp)
  80c110:	10800317 	ldw	r2,12(r2)
  80c114:	1880201e 	bne	r3,r2,80c198 <altera_avalon_uart_read+0x148>
    {
      if (!block)
  80c118:	e0bff617 	ldw	r2,-40(fp)
  80c11c:	1000071e 	bne	r2,zero,80c13c <altera_avalon_uart_read+0xec>
      {
        /* Set errno to indicate the reason we're not returning any data */

        ALT_ERRNO = EWOULDBLOCK;
  80c120:	080c0140 	call	80c014 <alt_get_errno>
  80c124:	1007883a 	mov	r3,r2
  80c128:	008002c4 	movi	r2,11
  80c12c:	18800015 	stw	r2,0(r3)
        read_would_block = 1;
  80c130:	00800044 	movi	r2,1
  80c134:	e0bff405 	stb	r2,-48(fp)
        break;
  80c138:	00001b06 	br	80c1a8 <altera_avalon_uart_read+0x158>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  80c13c:	0005303a 	rdctl	r2,status
  80c140:	e0bff915 	stw	r2,-28(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  80c144:	e0fff917 	ldw	r3,-28(fp)
  80c148:	00bfff84 	movi	r2,-2
  80c14c:	1884703a 	and	r2,r3,r2
  80c150:	1001703a 	wrctl	status,r2
  
  return context;
  80c154:	e0bff917 	ldw	r2,-28(fp)
      {
       /* Block waiting for some data to arrive */

       /* First, ensure read interrupts are enabled to avoid deadlock */

       context = alt_irq_disable_all ();
  80c158:	e0bff815 	stw	r2,-32(fp)
       sp->ctrl |= ALTERA_AVALON_UART_CONTROL_RRDY_MSK;
  80c15c:	e0bffc17 	ldw	r2,-16(fp)
  80c160:	10800117 	ldw	r2,4(r2)
  80c164:	10c02014 	ori	r3,r2,128
  80c168:	e0bffc17 	ldw	r2,-16(fp)
  80c16c:	10c00115 	stw	r3,4(r2)
       IOWR_ALTERA_AVALON_UART_CONTROL(sp->base, sp->ctrl);
  80c170:	e0bffc17 	ldw	r2,-16(fp)
  80c174:	10800017 	ldw	r2,0(r2)
  80c178:	10800304 	addi	r2,r2,12
  80c17c:	e0fffc17 	ldw	r3,-16(fp)
  80c180:	18c00117 	ldw	r3,4(r3)
  80c184:	10c00035 	stwio	r3,0(r2)
  80c188:	e0bff817 	ldw	r2,-32(fp)
  80c18c:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  80c190:	e0bffa17 	ldw	r2,-24(fp)
  80c194:	1001703a 	wrctl	status,r2
                      OS_FLAG_WAIT_SET_ANY + OS_FLAG_CONSUME,
                      0);
      }
    }
  }
  while (!count && len);
  80c198:	e0bff517 	ldw	r2,-44(fp)
  80c19c:	1000021e 	bne	r2,zero,80c1a8 <altera_avalon_uart_read+0x158>
  80c1a0:	e0bffe17 	ldw	r2,-8(fp)
  80c1a4:	103fcd1e 	bne	r2,zero,80c0dc <__alt_mem_onchip_mem+0xff8040dc>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  80c1a8:	0005303a 	rdctl	r2,status
  80c1ac:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  80c1b0:	e0fffb17 	ldw	r3,-20(fp)
  80c1b4:	00bfff84 	movi	r2,-2
  80c1b8:	1884703a 	and	r2,r3,r2
  80c1bc:	1001703a 	wrctl	status,r2
  
  return context;
  80c1c0:	e0bffb17 	ldw	r2,-20(fp)
  /*
   * Ensure that interrupts are enabled, so that the circular buffer can
   * re-fill.
   */

  context = alt_irq_disable_all ();
  80c1c4:	e0bff815 	stw	r2,-32(fp)
  sp->ctrl |= ALTERA_AVALON_UART_CONTROL_RRDY_MSK;
  80c1c8:	e0bffc17 	ldw	r2,-16(fp)
  80c1cc:	10800117 	ldw	r2,4(r2)
  80c1d0:	10c02014 	ori	r3,r2,128
  80c1d4:	e0bffc17 	ldw	r2,-16(fp)
  80c1d8:	10c00115 	stw	r3,4(r2)
  IOWR_ALTERA_AVALON_UART_CONTROL(sp->base, sp->ctrl);
  80c1dc:	e0bffc17 	ldw	r2,-16(fp)
  80c1e0:	10800017 	ldw	r2,0(r2)
  80c1e4:	10800304 	addi	r2,r2,12
  80c1e8:	e0fffc17 	ldw	r3,-16(fp)
  80c1ec:	18c00117 	ldw	r3,4(r3)
  80c1f0:	10c00035 	stwio	r3,0(r2)
  80c1f4:	e0bff817 	ldw	r2,-32(fp)
  80c1f8:	e0bff715 	stw	r2,-36(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  80c1fc:	e0bff717 	ldw	r2,-36(fp)
  80c200:	1001703a 	wrctl	status,r2
  alt_irq_enable_all (context);

  /* Return the number of bytes read */
  if(read_would_block) {
  80c204:	e0bff403 	ldbu	r2,-48(fp)
  80c208:	10000226 	beq	r2,zero,80c214 <altera_avalon_uart_read+0x1c4>
    return -EWOULDBLOCK;
  80c20c:	00bffd44 	movi	r2,-11
  80c210:	00000106 	br	80c218 <altera_avalon_uart_read+0x1c8>
  }
  else {
    return count;
  80c214:	e0bff517 	ldw	r2,-44(fp)
  }
}
  80c218:	e037883a 	mov	sp,fp
  80c21c:	dfc00117 	ldw	ra,4(sp)
  80c220:	df000017 	ldw	fp,0(sp)
  80c224:	dec00204 	addi	sp,sp,8
  80c228:	f800283a 	ret

0080c22c <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
  80c22c:	defffe04 	addi	sp,sp,-8
  80c230:	dfc00115 	stw	ra,4(sp)
  80c234:	df000015 	stw	fp,0(sp)
  80c238:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
  80c23c:	d0a00917 	ldw	r2,-32732(gp)
  80c240:	10000326 	beq	r2,zero,80c250 <alt_get_errno+0x24>
  80c244:	d0a00917 	ldw	r2,-32732(gp)
  80c248:	103ee83a 	callr	r2
  80c24c:	00000106 	br	80c254 <alt_get_errno+0x28>
  80c250:	d0a72a04 	addi	r2,gp,-25432
}
  80c254:	e037883a 	mov	sp,fp
  80c258:	dfc00117 	ldw	ra,4(sp)
  80c25c:	df000017 	ldw	fp,0(sp)
  80c260:	dec00204 	addi	sp,sp,8
  80c264:	f800283a 	ret

0080c268 <altera_avalon_uart_write>:
 */

int
altera_avalon_uart_write(altera_avalon_uart_state* sp, const char* ptr, int len,
  int flags)
{
  80c268:	defff204 	addi	sp,sp,-56
  80c26c:	dfc00d15 	stw	ra,52(sp)
  80c270:	df000c15 	stw	fp,48(sp)
  80c274:	df000c04 	addi	fp,sp,48
  80c278:	e13ffc15 	stw	r4,-16(fp)
  80c27c:	e17ffd15 	stw	r5,-12(fp)
  80c280:	e1bffe15 	stw	r6,-8(fp)
  80c284:	e1ffff15 	stw	r7,-4(fp)
  alt_irq_context context;
  int             no_block;
  alt_u32         next;
  int             count = len;
  80c288:	e0bffe17 	ldw	r2,-8(fp)
  80c28c:	e0bff415 	stw	r2,-48(fp)
  /* 
   * Construct a flag to indicate whether the device is being accessed in
   * blocking or non-blocking mode.
   */

  no_block = (flags & O_NONBLOCK);
  80c290:	e0bfff17 	ldw	r2,-4(fp)
  80c294:	1090000c 	andi	r2,r2,16384
  80c298:	e0bff515 	stw	r2,-44(fp)
   * Loop transferring data from the input buffer to the transmit circular
   * buffer. The loop is terminated once all the data has been transferred,
   * or, (if in non-blocking mode) the buffer becomes full.
   */

  while (count)
  80c29c:	00003c06 	br	80c390 <altera_avalon_uart_write+0x128>
  {
    /* Determine the next slot in the buffer to access */

    next = (sp->tx_end + 1) & ALT_AVALON_UART_BUF_MSK;
  80c2a0:	e0bffc17 	ldw	r2,-16(fp)
  80c2a4:	10800517 	ldw	r2,20(r2)
  80c2a8:	10800044 	addi	r2,r2,1
  80c2ac:	10800fcc 	andi	r2,r2,63
  80c2b0:	e0bff715 	stw	r2,-36(fp)

    /* block waiting for space if necessary */

    if (next == sp->tx_start)
  80c2b4:	e0bffc17 	ldw	r2,-16(fp)
  80c2b8:	10c00417 	ldw	r3,16(r2)
  80c2bc:	e0bff717 	ldw	r2,-36(fp)
  80c2c0:	1880221e 	bne	r3,r2,80c34c <altera_avalon_uart_write+0xe4>
    {
      if (no_block)
  80c2c4:	e0bff517 	ldw	r2,-44(fp)
  80c2c8:	10000526 	beq	r2,zero,80c2e0 <altera_avalon_uart_write+0x78>
      {
        /* Set errno to indicate why this function returned early */
 
        ALT_ERRNO = EWOULDBLOCK;
  80c2cc:	080c22c0 	call	80c22c <alt_get_errno>
  80c2d0:	1007883a 	mov	r3,r2
  80c2d4:	008002c4 	movi	r2,11
  80c2d8:	18800015 	stw	r2,0(r3)
        break;
  80c2dc:	00002e06 	br	80c398 <altera_avalon_uart_write+0x130>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  80c2e0:	0005303a 	rdctl	r2,status
  80c2e4:	e0bff915 	stw	r2,-28(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  80c2e8:	e0fff917 	ldw	r3,-28(fp)
  80c2ec:	00bfff84 	movi	r2,-2
  80c2f0:	1884703a 	and	r2,r3,r2
  80c2f4:	1001703a 	wrctl	status,r2
  
  return context;
  80c2f8:	e0bff917 	ldw	r2,-28(fp)
      {
        /* Block waiting for space in the circular buffer */

        /* First, ensure transmit interrupts are enabled to avoid deadlock */

        context = alt_irq_disable_all ();
  80c2fc:	e0bff815 	stw	r2,-32(fp)
        sp->ctrl |= (ALTERA_AVALON_UART_CONTROL_TRDY_MSK |
  80c300:	e0bffc17 	ldw	r2,-16(fp)
  80c304:	10800117 	ldw	r2,4(r2)
  80c308:	10c11014 	ori	r3,r2,1088
  80c30c:	e0bffc17 	ldw	r2,-16(fp)
  80c310:	10c00115 	stw	r3,4(r2)
                        ALTERA_AVALON_UART_CONTROL_DCTS_MSK);
        IOWR_ALTERA_AVALON_UART_CONTROL(sp->base, sp->ctrl);
  80c314:	e0bffc17 	ldw	r2,-16(fp)
  80c318:	10800017 	ldw	r2,0(r2)
  80c31c:	10800304 	addi	r2,r2,12
  80c320:	e0fffc17 	ldw	r3,-16(fp)
  80c324:	18c00117 	ldw	r3,4(r3)
  80c328:	10c00035 	stwio	r3,0(r2)
  80c32c:	e0bff817 	ldw	r2,-32(fp)
  80c330:	e0bff615 	stw	r2,-40(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  80c334:	e0bff617 	ldw	r2,-40(fp)
  80c338:	1001703a 	wrctl	status,r2
          ALT_FLAG_PEND (sp->events, 
                         ALT_UART_WRITE_RDY,
                         OS_FLAG_WAIT_SET_ANY + OS_FLAG_CONSUME,
                         0);
        }
        while ((next == sp->tx_start));
  80c33c:	e0bffc17 	ldw	r2,-16(fp)
  80c340:	10c00417 	ldw	r3,16(r2)
  80c344:	e0bff717 	ldw	r2,-36(fp)
  80c348:	18bffc26 	beq	r3,r2,80c33c <__alt_mem_onchip_mem+0xff80433c>
      }
    }

    count--;
  80c34c:	e0bff417 	ldw	r2,-48(fp)
  80c350:	10bfffc4 	addi	r2,r2,-1
  80c354:	e0bff415 	stw	r2,-48(fp)

    /* Add the next character to the transmit buffer */

    sp->tx_buf[sp->tx_end] = *ptr++;
  80c358:	e0bffc17 	ldw	r2,-16(fp)
  80c35c:	10c00517 	ldw	r3,20(r2)
  80c360:	e0bffd17 	ldw	r2,-12(fp)
  80c364:	11000044 	addi	r4,r2,1
  80c368:	e13ffd15 	stw	r4,-12(fp)
  80c36c:	10800003 	ldbu	r2,0(r2)
  80c370:	1009883a 	mov	r4,r2
  80c374:	e0bffc17 	ldw	r2,-16(fp)
  80c378:	10c5883a 	add	r2,r2,r3
  80c37c:	10801704 	addi	r2,r2,92
  80c380:	11000005 	stb	r4,0(r2)
    sp->tx_end = next;
  80c384:	e0bffc17 	ldw	r2,-16(fp)
  80c388:	e0fff717 	ldw	r3,-36(fp)
  80c38c:	10c00515 	stw	r3,20(r2)
   * Loop transferring data from the input buffer to the transmit circular
   * buffer. The loop is terminated once all the data has been transferred,
   * or, (if in non-blocking mode) the buffer becomes full.
   */

  while (count)
  80c390:	e0bff417 	ldw	r2,-48(fp)
  80c394:	103fc21e 	bne	r2,zero,80c2a0 <__alt_mem_onchip_mem+0xff8042a0>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  80c398:	0005303a 	rdctl	r2,status
  80c39c:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  80c3a0:	e0fffb17 	ldw	r3,-20(fp)
  80c3a4:	00bfff84 	movi	r2,-2
  80c3a8:	1884703a 	and	r2,r3,r2
  80c3ac:	1001703a 	wrctl	status,r2
  
  return context;
  80c3b0:	e0bffb17 	ldw	r2,-20(fp)
  /* 
   * Ensure that interrupts are enabled, so that the circular buffer can 
   * drain.
   */

  context = alt_irq_disable_all ();
  80c3b4:	e0bff815 	stw	r2,-32(fp)
  sp->ctrl |= ALTERA_AVALON_UART_CONTROL_TRDY_MSK |
  80c3b8:	e0bffc17 	ldw	r2,-16(fp)
  80c3bc:	10800117 	ldw	r2,4(r2)
  80c3c0:	10c11014 	ori	r3,r2,1088
  80c3c4:	e0bffc17 	ldw	r2,-16(fp)
  80c3c8:	10c00115 	stw	r3,4(r2)
                 ALTERA_AVALON_UART_CONTROL_DCTS_MSK;
  IOWR_ALTERA_AVALON_UART_CONTROL(sp->base, sp->ctrl);
  80c3cc:	e0bffc17 	ldw	r2,-16(fp)
  80c3d0:	10800017 	ldw	r2,0(r2)
  80c3d4:	10800304 	addi	r2,r2,12
  80c3d8:	e0fffc17 	ldw	r3,-16(fp)
  80c3dc:	18c00117 	ldw	r3,4(r3)
  80c3e0:	10c00035 	stwio	r3,0(r2)
  80c3e4:	e0bff817 	ldw	r2,-32(fp)
  80c3e8:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  80c3ec:	e0bffa17 	ldw	r2,-24(fp)
  80c3f0:	1001703a 	wrctl	status,r2
  alt_irq_enable_all (context);

  /* return the number of bytes written */

  return (len - count);
  80c3f4:	e0fffe17 	ldw	r3,-8(fp)
  80c3f8:	e0bff417 	ldw	r2,-48(fp)
  80c3fc:	1885c83a 	sub	r2,r3,r2
}
  80c400:	e037883a 	mov	sp,fp
  80c404:	dfc00117 	ldw	ra,4(sp)
  80c408:	df000017 	ldw	fp,0(sp)
  80c40c:	dec00204 	addi	sp,sp,8
  80c410:	f800283a 	ret

0080c414 <alt_dcache_flush_all>:
/*
 * alt_dcache_flush_all() is called to flush the entire data cache.
 */

void alt_dcache_flush_all (void)
{
  80c414:	defffe04 	addi	sp,sp,-8
  80c418:	df000115 	stw	fp,4(sp)
  80c41c:	df000104 	addi	fp,sp,4
#if NIOS2_DCACHE_SIZE > 0
  char* i;
  
  for (i = (char*) 0; i < (char*) NIOS2_DCACHE_SIZE; i+= NIOS2_DCACHE_LINE_SIZE)
  80c420:	e03fff15 	stw	zero,-4(fp)
  80c424:	00000506 	br	80c43c <alt_dcache_flush_all+0x28>
  { 
    __asm__ volatile ("flushd (%0)" :: "r" (i));
  80c428:	e0bfff17 	ldw	r2,-4(fp)
  80c42c:	1000003b 	flushd	0(r2)
void alt_dcache_flush_all (void)
{
#if NIOS2_DCACHE_SIZE > 0
  char* i;
  
  for (i = (char*) 0; i < (char*) NIOS2_DCACHE_SIZE; i+= NIOS2_DCACHE_LINE_SIZE)
  80c430:	e0bfff17 	ldw	r2,-4(fp)
  80c434:	10800804 	addi	r2,r2,32
  80c438:	e0bfff15 	stw	r2,-4(fp)
  80c43c:	e0bfff17 	ldw	r2,-4(fp)
  80c440:	10820030 	cmpltui	r2,r2,2048
  80c444:	103ff81e 	bne	r2,zero,80c428 <__alt_mem_onchip_mem+0xff804428>
  { 
    __asm__ volatile ("flushd (%0)" :: "r" (i));
  }
#endif /* NIOS2_DCACHE_SIZE > 0 */
}
  80c448:	0001883a 	nop
  80c44c:	e037883a 	mov	sp,fp
  80c450:	df000017 	ldw	fp,0(sp)
  80c454:	dec00104 	addi	sp,sp,4
  80c458:	f800283a 	ret

0080c45c <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
  80c45c:	defffe04 	addi	sp,sp,-8
  80c460:	dfc00115 	stw	ra,4(sp)
  80c464:	df000015 	stw	fp,0(sp)
  80c468:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
  80c46c:	d0a00917 	ldw	r2,-32732(gp)
  80c470:	10000326 	beq	r2,zero,80c480 <alt_get_errno+0x24>
  80c474:	d0a00917 	ldw	r2,-32732(gp)
  80c478:	103ee83a 	callr	r2
  80c47c:	00000106 	br	80c484 <alt_get_errno+0x28>
  80c480:	d0a72a04 	addi	r2,gp,-25432
}
  80c484:	e037883a 	mov	sp,fp
  80c488:	dfc00117 	ldw	ra,4(sp)
  80c48c:	df000017 	ldw	fp,0(sp)
  80c490:	dec00204 	addi	sp,sp,8
  80c494:	f800283a 	ret

0080c498 <alt_dev_llist_insert>:
/*
 *
 */

int alt_dev_llist_insert (alt_dev_llist* dev, alt_llist* list)
{
  80c498:	defffa04 	addi	sp,sp,-24
  80c49c:	dfc00515 	stw	ra,20(sp)
  80c4a0:	df000415 	stw	fp,16(sp)
  80c4a4:	df000404 	addi	fp,sp,16
  80c4a8:	e13ffe15 	stw	r4,-8(fp)
  80c4ac:	e17fff15 	stw	r5,-4(fp)
  /*
   * check that the device exists, and that it has a valid name.
   */

  if (!dev || !dev->name)
  80c4b0:	e0bffe17 	ldw	r2,-8(fp)
  80c4b4:	10000326 	beq	r2,zero,80c4c4 <alt_dev_llist_insert+0x2c>
  80c4b8:	e0bffe17 	ldw	r2,-8(fp)
  80c4bc:	10800217 	ldw	r2,8(r2)
  80c4c0:	1000061e 	bne	r2,zero,80c4dc <alt_dev_llist_insert+0x44>
  {
    ALT_ERRNO = EINVAL;
  80c4c4:	080c45c0 	call	80c45c <alt_get_errno>
  80c4c8:	1007883a 	mov	r3,r2
  80c4cc:	00800584 	movi	r2,22
  80c4d0:	18800015 	stw	r2,0(r3)
    return -EINVAL;
  80c4d4:	00bffa84 	movi	r2,-22
  80c4d8:	00001306 	br	80c528 <alt_dev_llist_insert+0x90>
  
  /*
   * register the device.
   */
  
  alt_llist_insert(list, &dev->llist);
  80c4dc:	e0bffe17 	ldw	r2,-8(fp)
  80c4e0:	e0ffff17 	ldw	r3,-4(fp)
  80c4e4:	e0fffc15 	stw	r3,-16(fp)
  80c4e8:	e0bffd15 	stw	r2,-12(fp)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
  80c4ec:	e0bffd17 	ldw	r2,-12(fp)
  80c4f0:	e0fffc17 	ldw	r3,-16(fp)
  80c4f4:	10c00115 	stw	r3,4(r2)
  entry->next     = list->next;
  80c4f8:	e0bffc17 	ldw	r2,-16(fp)
  80c4fc:	10c00017 	ldw	r3,0(r2)
  80c500:	e0bffd17 	ldw	r2,-12(fp)
  80c504:	10c00015 	stw	r3,0(r2)

  list->next->previous = entry;
  80c508:	e0bffc17 	ldw	r2,-16(fp)
  80c50c:	10800017 	ldw	r2,0(r2)
  80c510:	e0fffd17 	ldw	r3,-12(fp)
  80c514:	10c00115 	stw	r3,4(r2)
  list->next           = entry;
  80c518:	e0bffc17 	ldw	r2,-16(fp)
  80c51c:	e0fffd17 	ldw	r3,-12(fp)
  80c520:	10c00015 	stw	r3,0(r2)

  return 0;  
  80c524:	0005883a 	mov	r2,zero
}
  80c528:	e037883a 	mov	sp,fp
  80c52c:	dfc00117 	ldw	ra,4(sp)
  80c530:	df000017 	ldw	fp,0(sp)
  80c534:	dec00204 	addi	sp,sp,8
  80c538:	f800283a 	ret

0080c53c <_do_ctors>:
/*
 * Run the C++ static constructors.
 */

void _do_ctors(void)
{
  80c53c:	defffd04 	addi	sp,sp,-12
  80c540:	dfc00215 	stw	ra,8(sp)
  80c544:	df000115 	stw	fp,4(sp)
  80c548:	df000104 	addi	fp,sp,4
  constructor* ctor;

  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
  80c54c:	00802074 	movhi	r2,129
  80c550:	10b54204 	addi	r2,r2,-11000
  80c554:	e0bfff15 	stw	r2,-4(fp)
  80c558:	00000606 	br	80c574 <_do_ctors+0x38>
        (*ctor) (); 
  80c55c:	e0bfff17 	ldw	r2,-4(fp)
  80c560:	10800017 	ldw	r2,0(r2)
  80c564:	103ee83a 	callr	r2

void _do_ctors(void)
{
  constructor* ctor;

  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
  80c568:	e0bfff17 	ldw	r2,-4(fp)
  80c56c:	10bfff04 	addi	r2,r2,-4
  80c570:	e0bfff15 	stw	r2,-4(fp)
  80c574:	e0ffff17 	ldw	r3,-4(fp)
  80c578:	00802074 	movhi	r2,129
  80c57c:	10b54304 	addi	r2,r2,-10996
  80c580:	18bff62e 	bgeu	r3,r2,80c55c <__alt_mem_onchip_mem+0xff80455c>
        (*ctor) (); 
}
  80c584:	0001883a 	nop
  80c588:	e037883a 	mov	sp,fp
  80c58c:	dfc00117 	ldw	ra,4(sp)
  80c590:	df000017 	ldw	fp,0(sp)
  80c594:	dec00204 	addi	sp,sp,8
  80c598:	f800283a 	ret

0080c59c <_do_dtors>:
/*
 * Run the C++ static destructors.
 */

void _do_dtors(void)
{
  80c59c:	defffd04 	addi	sp,sp,-12
  80c5a0:	dfc00215 	stw	ra,8(sp)
  80c5a4:	df000115 	stw	fp,4(sp)
  80c5a8:	df000104 	addi	fp,sp,4
  destructor* dtor;

  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
  80c5ac:	00802074 	movhi	r2,129
  80c5b0:	10b54204 	addi	r2,r2,-11000
  80c5b4:	e0bfff15 	stw	r2,-4(fp)
  80c5b8:	00000606 	br	80c5d4 <_do_dtors+0x38>
        (*dtor) (); 
  80c5bc:	e0bfff17 	ldw	r2,-4(fp)
  80c5c0:	10800017 	ldw	r2,0(r2)
  80c5c4:	103ee83a 	callr	r2

void _do_dtors(void)
{
  destructor* dtor;

  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
  80c5c8:	e0bfff17 	ldw	r2,-4(fp)
  80c5cc:	10bfff04 	addi	r2,r2,-4
  80c5d0:	e0bfff15 	stw	r2,-4(fp)
  80c5d4:	e0ffff17 	ldw	r3,-4(fp)
  80c5d8:	00802074 	movhi	r2,129
  80c5dc:	10b54304 	addi	r2,r2,-10996
  80c5e0:	18bff62e 	bgeu	r3,r2,80c5bc <__alt_mem_onchip_mem+0xff8045bc>
        (*dtor) (); 
}
  80c5e4:	0001883a 	nop
  80c5e8:	e037883a 	mov	sp,fp
  80c5ec:	dfc00117 	ldw	ra,4(sp)
  80c5f0:	df000017 	ldw	fp,0(sp)
  80c5f4:	dec00204 	addi	sp,sp,8
  80c5f8:	f800283a 	ret

0080c5fc <alt_icache_flush_all>:
/*
 * alt_icache_flush_all() is called to flush the entire instruction cache.
 */

void alt_icache_flush_all (void)
{
  80c5fc:	defffe04 	addi	sp,sp,-8
  80c600:	dfc00115 	stw	ra,4(sp)
  80c604:	df000015 	stw	fp,0(sp)
  80c608:	d839883a 	mov	fp,sp
#if NIOS2_ICACHE_SIZE > 0
  alt_icache_flush (0, NIOS2_ICACHE_SIZE);
  80c60c:	01440004 	movi	r5,4096
  80c610:	0009883a 	mov	r4,zero
  80c614:	080d04c0 	call	80d04c <alt_icache_flush>
#endif
}
  80c618:	0001883a 	nop
  80c61c:	e037883a 	mov	sp,fp
  80c620:	dfc00117 	ldw	ra,4(sp)
  80c624:	df000017 	ldw	fp,0(sp)
  80c628:	dec00204 	addi	sp,sp,8
  80c62c:	f800283a 	ret

0080c630 <alt_ic_isr_register>:
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_isr_register(alt_u32 ic_id, alt_u32 irq, alt_isr_func isr, 
  void *isr_context, void *flags)
{
  80c630:	defff904 	addi	sp,sp,-28
  80c634:	dfc00615 	stw	ra,24(sp)
  80c638:	df000515 	stw	fp,20(sp)
  80c63c:	df000504 	addi	fp,sp,20
  80c640:	e13ffc15 	stw	r4,-16(fp)
  80c644:	e17ffd15 	stw	r5,-12(fp)
  80c648:	e1bffe15 	stw	r6,-8(fp)
  80c64c:	e1ffff15 	stw	r7,-4(fp)
    return alt_iic_isr_register(ic_id, irq, isr, isr_context, flags);
  80c650:	e0800217 	ldw	r2,8(fp)
  80c654:	d8800015 	stw	r2,0(sp)
  80c658:	e1ffff17 	ldw	r7,-4(fp)
  80c65c:	e1bffe17 	ldw	r6,-8(fp)
  80c660:	e17ffd17 	ldw	r5,-12(fp)
  80c664:	e13ffc17 	ldw	r4,-16(fp)
  80c668:	080c7e00 	call	80c7e0 <alt_iic_isr_register>
}  
  80c66c:	e037883a 	mov	sp,fp
  80c670:	dfc00117 	ldw	ra,4(sp)
  80c674:	df000017 	ldw	fp,0(sp)
  80c678:	dec00204 	addi	sp,sp,8
  80c67c:	f800283a 	ret

0080c680 <alt_ic_irq_enable>:
  * @param ic_id            Ignored.
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_irq_enable (alt_u32 ic_id, alt_u32 irq)
{
  80c680:	defff904 	addi	sp,sp,-28
  80c684:	df000615 	stw	fp,24(sp)
  80c688:	df000604 	addi	fp,sp,24
  80c68c:	e13ffe15 	stw	r4,-8(fp)
  80c690:	e17fff15 	stw	r5,-4(fp)
  80c694:	e0bfff17 	ldw	r2,-4(fp)
  80c698:	e0bffa15 	stw	r2,-24(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  80c69c:	0005303a 	rdctl	r2,status
  80c6a0:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  80c6a4:	e0fffb17 	ldw	r3,-20(fp)
  80c6a8:	00bfff84 	movi	r2,-2
  80c6ac:	1884703a 	and	r2,r3,r2
  80c6b0:	1001703a 	wrctl	status,r2
  
  return context;
  80c6b4:	e0bffb17 	ldw	r2,-20(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_enable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
  80c6b8:	e0bffc15 	stw	r2,-16(fp)

  alt_irq_active |= (1 << id);
  80c6bc:	00c00044 	movi	r3,1
  80c6c0:	e0bffa17 	ldw	r2,-24(fp)
  80c6c4:	1884983a 	sll	r2,r3,r2
  80c6c8:	1007883a 	mov	r3,r2
  80c6cc:	d0a73017 	ldw	r2,-25408(gp)
  80c6d0:	1884b03a 	or	r2,r3,r2
  80c6d4:	d0a73015 	stw	r2,-25408(gp)
  NIOS2_WRITE_IENABLE (alt_irq_active);
  80c6d8:	d0a73017 	ldw	r2,-25408(gp)
  80c6dc:	100170fa 	wrctl	ienable,r2
  80c6e0:	e0bffc17 	ldw	r2,-16(fp)
  80c6e4:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  80c6e8:	e0bffd17 	ldw	r2,-12(fp)
  80c6ec:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
  80c6f0:	0005883a 	mov	r2,zero
    return alt_irq_enable(irq);
  80c6f4:	0001883a 	nop
}
  80c6f8:	e037883a 	mov	sp,fp
  80c6fc:	df000017 	ldw	fp,0(sp)
  80c700:	dec00104 	addi	sp,sp,4
  80c704:	f800283a 	ret

0080c708 <alt_ic_irq_disable>:
  * @param ic_id            Ignored.
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_irq_disable(alt_u32 ic_id, alt_u32 irq)
{
  80c708:	defff904 	addi	sp,sp,-28
  80c70c:	df000615 	stw	fp,24(sp)
  80c710:	df000604 	addi	fp,sp,24
  80c714:	e13ffe15 	stw	r4,-8(fp)
  80c718:	e17fff15 	stw	r5,-4(fp)
  80c71c:	e0bfff17 	ldw	r2,-4(fp)
  80c720:	e0bffa15 	stw	r2,-24(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  80c724:	0005303a 	rdctl	r2,status
  80c728:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  80c72c:	e0fffb17 	ldw	r3,-20(fp)
  80c730:	00bfff84 	movi	r2,-2
  80c734:	1884703a 	and	r2,r3,r2
  80c738:	1001703a 	wrctl	status,r2
  
  return context;
  80c73c:	e0bffb17 	ldw	r2,-20(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_disable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
  80c740:	e0bffc15 	stw	r2,-16(fp)

  alt_irq_active &= ~(1 << id);
  80c744:	00c00044 	movi	r3,1
  80c748:	e0bffa17 	ldw	r2,-24(fp)
  80c74c:	1884983a 	sll	r2,r3,r2
  80c750:	0084303a 	nor	r2,zero,r2
  80c754:	1007883a 	mov	r3,r2
  80c758:	d0a73017 	ldw	r2,-25408(gp)
  80c75c:	1884703a 	and	r2,r3,r2
  80c760:	d0a73015 	stw	r2,-25408(gp)
  NIOS2_WRITE_IENABLE (alt_irq_active);
  80c764:	d0a73017 	ldw	r2,-25408(gp)
  80c768:	100170fa 	wrctl	ienable,r2
  80c76c:	e0bffc17 	ldw	r2,-16(fp)
  80c770:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  80c774:	e0bffd17 	ldw	r2,-12(fp)
  80c778:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
  80c77c:	0005883a 	mov	r2,zero
    return alt_irq_disable(irq);
  80c780:	0001883a 	nop
}
  80c784:	e037883a 	mov	sp,fp
  80c788:	df000017 	ldw	fp,0(sp)
  80c78c:	dec00104 	addi	sp,sp,4
  80c790:	f800283a 	ret

0080c794 <alt_ic_irq_enabled>:
  * @param irq              IRQ number
  * @return                 Zero if corresponding interrupt is disabled and
  *                         non-zero otherwise.
  */
alt_u32 alt_ic_irq_enabled(alt_u32 ic_id, alt_u32 irq)
{
  80c794:	defffc04 	addi	sp,sp,-16
  80c798:	df000315 	stw	fp,12(sp)
  80c79c:	df000304 	addi	fp,sp,12
  80c7a0:	e13ffe15 	stw	r4,-8(fp)
  80c7a4:	e17fff15 	stw	r5,-4(fp)
    alt_u32 irq_enabled;

    NIOS2_READ_IENABLE(irq_enabled);
  80c7a8:	000530fa 	rdctl	r2,ienable
  80c7ac:	e0bffd15 	stw	r2,-12(fp)

    return (irq_enabled & (1 << irq)) ? 1: 0;
  80c7b0:	00c00044 	movi	r3,1
  80c7b4:	e0bfff17 	ldw	r2,-4(fp)
  80c7b8:	1884983a 	sll	r2,r3,r2
  80c7bc:	1007883a 	mov	r3,r2
  80c7c0:	e0bffd17 	ldw	r2,-12(fp)
  80c7c4:	1884703a 	and	r2,r3,r2
  80c7c8:	1004c03a 	cmpne	r2,r2,zero
  80c7cc:	10803fcc 	andi	r2,r2,255
}
  80c7d0:	e037883a 	mov	sp,fp
  80c7d4:	df000017 	ldw	fp,0(sp)
  80c7d8:	dec00104 	addi	sp,sp,4
  80c7dc:	f800283a 	ret

0080c7e0 <alt_iic_isr_register>:
  * @param flags            
  * @return                 0 if successful, else error (-1)
  */
int alt_iic_isr_register(alt_u32 ic_id, alt_u32 irq, alt_isr_func isr, 
  void *isr_context, void *flags)
{
  80c7e0:	defff504 	addi	sp,sp,-44
  80c7e4:	dfc00a15 	stw	ra,40(sp)
  80c7e8:	df000915 	stw	fp,36(sp)
  80c7ec:	df000904 	addi	fp,sp,36
  80c7f0:	e13ffc15 	stw	r4,-16(fp)
  80c7f4:	e17ffd15 	stw	r5,-12(fp)
  80c7f8:	e1bffe15 	stw	r6,-8(fp)
  80c7fc:	e1ffff15 	stw	r7,-4(fp)
  int rc = -EINVAL;  
  80c800:	00bffa84 	movi	r2,-22
  80c804:	e0bff715 	stw	r2,-36(fp)
  int id = irq;             /* IRQ interpreted as the interrupt ID. */
  80c808:	e0bffd17 	ldw	r2,-12(fp)
  80c80c:	e0bff815 	stw	r2,-32(fp)
  alt_irq_context status;

  if (id < ALT_NIRQ)
  80c810:	e0bff817 	ldw	r2,-32(fp)
  80c814:	10800808 	cmpgei	r2,r2,32
  80c818:	1000271e 	bne	r2,zero,80c8b8 <alt_iic_isr_register+0xd8>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  80c81c:	0005303a 	rdctl	r2,status
  80c820:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  80c824:	e0fffb17 	ldw	r3,-20(fp)
  80c828:	00bfff84 	movi	r2,-2
  80c82c:	1884703a 	and	r2,r3,r2
  80c830:	1001703a 	wrctl	status,r2
  
  return context;
  80c834:	e0bffb17 	ldw	r2,-20(fp)
     * interrupts are disabled while the handler tables are updated to ensure
     * that an interrupt doesn't occur while the tables are in an inconsistant
     * state.
     */

    status = alt_irq_disable_all();
  80c838:	e0bffa15 	stw	r2,-24(fp)

    alt_irq[id].handler = isr;
  80c83c:	00802074 	movhi	r2,129
  80c840:	10847c04 	addi	r2,r2,4592
  80c844:	e0fff817 	ldw	r3,-32(fp)
  80c848:	180690fa 	slli	r3,r3,3
  80c84c:	10c5883a 	add	r2,r2,r3
  80c850:	e0fffe17 	ldw	r3,-8(fp)
  80c854:	10c00015 	stw	r3,0(r2)
    alt_irq[id].context = isr_context;
  80c858:	00802074 	movhi	r2,129
  80c85c:	10847c04 	addi	r2,r2,4592
  80c860:	e0fff817 	ldw	r3,-32(fp)
  80c864:	180690fa 	slli	r3,r3,3
  80c868:	10c5883a 	add	r2,r2,r3
  80c86c:	10800104 	addi	r2,r2,4
  80c870:	e0ffff17 	ldw	r3,-4(fp)
  80c874:	10c00015 	stw	r3,0(r2)

    rc = (isr) ? alt_ic_irq_enable(ic_id, id) : alt_ic_irq_disable(ic_id, id);
  80c878:	e0bffe17 	ldw	r2,-8(fp)
  80c87c:	10000526 	beq	r2,zero,80c894 <alt_iic_isr_register+0xb4>
  80c880:	e0bff817 	ldw	r2,-32(fp)
  80c884:	100b883a 	mov	r5,r2
  80c888:	e13ffc17 	ldw	r4,-16(fp)
  80c88c:	080c6800 	call	80c680 <alt_ic_irq_enable>
  80c890:	00000406 	br	80c8a4 <alt_iic_isr_register+0xc4>
  80c894:	e0bff817 	ldw	r2,-32(fp)
  80c898:	100b883a 	mov	r5,r2
  80c89c:	e13ffc17 	ldw	r4,-16(fp)
  80c8a0:	080c7080 	call	80c708 <alt_ic_irq_disable>
  80c8a4:	e0bff715 	stw	r2,-36(fp)
  80c8a8:	e0bffa17 	ldw	r2,-24(fp)
  80c8ac:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  80c8b0:	e0bff917 	ldw	r2,-28(fp)
  80c8b4:	1001703a 	wrctl	status,r2

    alt_irq_enable_all(status);
  }

  return rc; 
  80c8b8:	e0bff717 	ldw	r2,-36(fp)
}
  80c8bc:	e037883a 	mov	sp,fp
  80c8c0:	dfc00117 	ldw	ra,4(sp)
  80c8c4:	df000017 	ldw	fp,0(sp)
  80c8c8:	dec00204 	addi	sp,sp,8
  80c8cc:	f800283a 	ret

0080c8d0 <alt_open_fd>:
 * If the device can not be succesfully opened, then the input file descriptor
 * remains unchanged.
 */

static void alt_open_fd(alt_fd* fd, const char* name, int flags, int mode)
{
  80c8d0:	defff904 	addi	sp,sp,-28
  80c8d4:	dfc00615 	stw	ra,24(sp)
  80c8d8:	df000515 	stw	fp,20(sp)
  80c8dc:	df000504 	addi	fp,sp,20
  80c8e0:	e13ffc15 	stw	r4,-16(fp)
  80c8e4:	e17ffd15 	stw	r5,-12(fp)
  80c8e8:	e1bffe15 	stw	r6,-8(fp)
  80c8ec:	e1ffff15 	stw	r7,-4(fp)
  int old;

  old = open (name, flags, mode);
  80c8f0:	e1bfff17 	ldw	r6,-4(fp)
  80c8f4:	e17ffe17 	ldw	r5,-8(fp)
  80c8f8:	e13ffd17 	ldw	r4,-12(fp)
  80c8fc:	080cb100 	call	80cb10 <open>
  80c900:	e0bffb15 	stw	r2,-20(fp)

  if (old >= 0)
  80c904:	e0bffb17 	ldw	r2,-20(fp)
  80c908:	10001c16 	blt	r2,zero,80c97c <alt_open_fd+0xac>
  {
    fd->dev      = alt_fd_list[old].dev;
  80c90c:	00802074 	movhi	r2,129
  80c910:	10b84f04 	addi	r2,r2,-7876
  80c914:	e0fffb17 	ldw	r3,-20(fp)
  80c918:	18c00324 	muli	r3,r3,12
  80c91c:	10c5883a 	add	r2,r2,r3
  80c920:	10c00017 	ldw	r3,0(r2)
  80c924:	e0bffc17 	ldw	r2,-16(fp)
  80c928:	10c00015 	stw	r3,0(r2)
    fd->priv     = alt_fd_list[old].priv;
  80c92c:	00802074 	movhi	r2,129
  80c930:	10b84f04 	addi	r2,r2,-7876
  80c934:	e0fffb17 	ldw	r3,-20(fp)
  80c938:	18c00324 	muli	r3,r3,12
  80c93c:	10c5883a 	add	r2,r2,r3
  80c940:	10800104 	addi	r2,r2,4
  80c944:	10c00017 	ldw	r3,0(r2)
  80c948:	e0bffc17 	ldw	r2,-16(fp)
  80c94c:	10c00115 	stw	r3,4(r2)
    fd->fd_flags = alt_fd_list[old].fd_flags;
  80c950:	00802074 	movhi	r2,129
  80c954:	10b84f04 	addi	r2,r2,-7876
  80c958:	e0fffb17 	ldw	r3,-20(fp)
  80c95c:	18c00324 	muli	r3,r3,12
  80c960:	10c5883a 	add	r2,r2,r3
  80c964:	10800204 	addi	r2,r2,8
  80c968:	10c00017 	ldw	r3,0(r2)
  80c96c:	e0bffc17 	ldw	r2,-16(fp)
  80c970:	10c00215 	stw	r3,8(r2)

    alt_release_fd (old);
  80c974:	e13ffb17 	ldw	r4,-20(fp)
  80c978:	0809c140 	call	809c14 <alt_release_fd>
  }
} 
  80c97c:	0001883a 	nop
  80c980:	e037883a 	mov	sp,fp
  80c984:	dfc00117 	ldw	ra,4(sp)
  80c988:	df000017 	ldw	fp,0(sp)
  80c98c:	dec00204 	addi	sp,sp,8
  80c990:	f800283a 	ret

0080c994 <alt_io_redirect>:
 */
 
void alt_io_redirect(const char* stdout_dev, 
                     const char* stdin_dev, 
                     const char* stderr_dev)
{
  80c994:	defffb04 	addi	sp,sp,-20
  80c998:	dfc00415 	stw	ra,16(sp)
  80c99c:	df000315 	stw	fp,12(sp)
  80c9a0:	df000304 	addi	fp,sp,12
  80c9a4:	e13ffd15 	stw	r4,-12(fp)
  80c9a8:	e17ffe15 	stw	r5,-8(fp)
  80c9ac:	e1bfff15 	stw	r6,-4(fp)
  /* Redirect the channels */

  alt_open_fd (&alt_fd_list[STDOUT_FILENO], stdout_dev, O_WRONLY, 0777);
  80c9b0:	01c07fc4 	movi	r7,511
  80c9b4:	01800044 	movi	r6,1
  80c9b8:	e17ffd17 	ldw	r5,-12(fp)
  80c9bc:	01002074 	movhi	r4,129
  80c9c0:	21385204 	addi	r4,r4,-7864
  80c9c4:	080c8d00 	call	80c8d0 <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDIN_FILENO], stdin_dev, O_RDONLY, 0777);
  80c9c8:	01c07fc4 	movi	r7,511
  80c9cc:	000d883a 	mov	r6,zero
  80c9d0:	e17ffe17 	ldw	r5,-8(fp)
  80c9d4:	01002074 	movhi	r4,129
  80c9d8:	21384f04 	addi	r4,r4,-7876
  80c9dc:	080c8d00 	call	80c8d0 <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDERR_FILENO], stderr_dev, O_WRONLY, 0777);
  80c9e0:	01c07fc4 	movi	r7,511
  80c9e4:	01800044 	movi	r6,1
  80c9e8:	e17fff17 	ldw	r5,-4(fp)
  80c9ec:	01002074 	movhi	r4,129
  80c9f0:	21385504 	addi	r4,r4,-7852
  80c9f4:	080c8d00 	call	80c8d0 <alt_open_fd>
}  
  80c9f8:	0001883a 	nop
  80c9fc:	e037883a 	mov	sp,fp
  80ca00:	dfc00117 	ldw	ra,4(sp)
  80ca04:	df000017 	ldw	fp,0(sp)
  80ca08:	dec00204 	addi	sp,sp,8
  80ca0c:	f800283a 	ret

0080ca10 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
  80ca10:	defffe04 	addi	sp,sp,-8
  80ca14:	dfc00115 	stw	ra,4(sp)
  80ca18:	df000015 	stw	fp,0(sp)
  80ca1c:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
  80ca20:	d0a00917 	ldw	r2,-32732(gp)
  80ca24:	10000326 	beq	r2,zero,80ca34 <alt_get_errno+0x24>
  80ca28:	d0a00917 	ldw	r2,-32732(gp)
  80ca2c:	103ee83a 	callr	r2
  80ca30:	00000106 	br	80ca38 <alt_get_errno+0x28>
  80ca34:	d0a72a04 	addi	r2,gp,-25432
}
  80ca38:	e037883a 	mov	sp,fp
  80ca3c:	dfc00117 	ldw	ra,4(sp)
  80ca40:	df000017 	ldw	fp,0(sp)
  80ca44:	dec00204 	addi	sp,sp,8
  80ca48:	f800283a 	ret

0080ca4c <alt_file_locked>:
 * performed for devices. Filesystems are required to handle the ioctl() call
 * themselves, and report the error from the filesystems open() function. 
 */ 

static int alt_file_locked (alt_fd* fd)
{
  80ca4c:	defffd04 	addi	sp,sp,-12
  80ca50:	df000215 	stw	fp,8(sp)
  80ca54:	df000204 	addi	fp,sp,8
  80ca58:	e13fff15 	stw	r4,-4(fp)

  /*
   * Mark the file descriptor as belonging to a device.
   */

  fd->fd_flags |= ALT_FD_DEV;
  80ca5c:	e0bfff17 	ldw	r2,-4(fp)
  80ca60:	10800217 	ldw	r2,8(r2)
  80ca64:	10d00034 	orhi	r3,r2,16384
  80ca68:	e0bfff17 	ldw	r2,-4(fp)
  80ca6c:	10c00215 	stw	r3,8(r2)
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
  80ca70:	e03ffe15 	stw	zero,-8(fp)
  80ca74:	00001d06 	br	80caec <alt_file_locked+0xa0>
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
  80ca78:	00802074 	movhi	r2,129
  80ca7c:	10b84f04 	addi	r2,r2,-7876
  80ca80:	e0fffe17 	ldw	r3,-8(fp)
  80ca84:	18c00324 	muli	r3,r3,12
  80ca88:	10c5883a 	add	r2,r2,r3
  80ca8c:	10c00017 	ldw	r3,0(r2)
  80ca90:	e0bfff17 	ldw	r2,-4(fp)
  80ca94:	10800017 	ldw	r2,0(r2)
  80ca98:	1880111e 	bne	r3,r2,80cae0 <alt_file_locked+0x94>
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
  80ca9c:	00802074 	movhi	r2,129
  80caa0:	10b84f04 	addi	r2,r2,-7876
  80caa4:	e0fffe17 	ldw	r3,-8(fp)
  80caa8:	18c00324 	muli	r3,r3,12
  80caac:	10c5883a 	add	r2,r2,r3
  80cab0:	10800204 	addi	r2,r2,8
  80cab4:	10800017 	ldw	r2,0(r2)
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
  80cab8:	1000090e 	bge	r2,zero,80cae0 <alt_file_locked+0x94>
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
        (&alt_fd_list[i] != fd))
  80cabc:	e0bffe17 	ldw	r2,-8(fp)
  80cac0:	10c00324 	muli	r3,r2,12
  80cac4:	00802074 	movhi	r2,129
  80cac8:	10b84f04 	addi	r2,r2,-7876
  80cacc:	1887883a 	add	r3,r3,r2
   */

  for (i = 0; i <= alt_max_fd; i++)
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
  80cad0:	e0bfff17 	ldw	r2,-4(fp)
  80cad4:	18800226 	beq	r3,r2,80cae0 <alt_file_locked+0x94>
        (&alt_fd_list[i] != fd))
    {
      return -EACCES;
  80cad8:	00bffcc4 	movi	r2,-13
  80cadc:	00000806 	br	80cb00 <alt_file_locked+0xb4>
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
  80cae0:	e0bffe17 	ldw	r2,-8(fp)
  80cae4:	10800044 	addi	r2,r2,1
  80cae8:	e0bffe15 	stw	r2,-8(fp)
  80caec:	d0a00817 	ldw	r2,-32736(gp)
  80caf0:	1007883a 	mov	r3,r2
  80caf4:	e0bffe17 	ldw	r2,-8(fp)
  80caf8:	18bfdf2e 	bgeu	r3,r2,80ca78 <__alt_mem_onchip_mem+0xff804a78>
    }
  }
  
  /* The device is not locked */
 
  return 0;
  80cafc:	0005883a 	mov	r2,zero
}
  80cb00:	e037883a 	mov	sp,fp
  80cb04:	df000017 	ldw	fp,0(sp)
  80cb08:	dec00104 	addi	sp,sp,4
  80cb0c:	f800283a 	ret

0080cb10 <open>:
 *
 * ALT_OPEN is mapped onto the open() system call in alt_syscall.h
 */
 
int ALT_OPEN (const char* file, int flags, int mode)
{ 
  80cb10:	defff604 	addi	sp,sp,-40
  80cb14:	dfc00915 	stw	ra,36(sp)
  80cb18:	df000815 	stw	fp,32(sp)
  80cb1c:	df000804 	addi	fp,sp,32
  80cb20:	e13ffd15 	stw	r4,-12(fp)
  80cb24:	e17ffe15 	stw	r5,-8(fp)
  80cb28:	e1bfff15 	stw	r6,-4(fp)
  alt_dev* dev;
  alt_fd*  fd;
  int index  = -1;
  80cb2c:	00bfffc4 	movi	r2,-1
  80cb30:	e0bff915 	stw	r2,-28(fp)
  int status = -ENODEV;
  80cb34:	00bffb44 	movi	r2,-19
  80cb38:	e0bffa15 	stw	r2,-24(fp)
  int isafs = 0;
  80cb3c:	e03ffb15 	stw	zero,-20(fp)
  /* 
   * Check the device list, to see if a device with a matching name is 
   * registered.
   */
  
  if (!(dev = alt_find_dev (file, &alt_dev_list)))
  80cb40:	d1600604 	addi	r5,gp,-32744
  80cb44:	e13ffd17 	ldw	r4,-12(fp)
  80cb48:	080ce100 	call	80ce10 <alt_find_dev>
  80cb4c:	e0bff815 	stw	r2,-32(fp)
  80cb50:	e0bff817 	ldw	r2,-32(fp)
  80cb54:	1000051e 	bne	r2,zero,80cb6c <open+0x5c>
  {
    /* No matching device, so try the filesystem list */

    dev   = alt_find_file (file);
  80cb58:	e13ffd17 	ldw	r4,-12(fp)
  80cb5c:	080cea00 	call	80cea0 <alt_find_file>
  80cb60:	e0bff815 	stw	r2,-32(fp)
    isafs = 1;
  80cb64:	00800044 	movi	r2,1
  80cb68:	e0bffb15 	stw	r2,-20(fp)

  /* 
   * If a matching device or filesystem is found, allocate a file descriptor. 
   */

  if (dev)
  80cb6c:	e0bff817 	ldw	r2,-32(fp)
  80cb70:	10002926 	beq	r2,zero,80cc18 <open+0x108>
  {
    if ((index = alt_get_fd (dev)) < 0)
  80cb74:	e13ff817 	ldw	r4,-32(fp)
  80cb78:	080cfa80 	call	80cfa8 <alt_get_fd>
  80cb7c:	e0bff915 	stw	r2,-28(fp)
  80cb80:	e0bff917 	ldw	r2,-28(fp)
  80cb84:	1000030e 	bge	r2,zero,80cb94 <open+0x84>
    {
      status = index;
  80cb88:	e0bff917 	ldw	r2,-28(fp)
  80cb8c:	e0bffa15 	stw	r2,-24(fp)
  80cb90:	00002306 	br	80cc20 <open+0x110>
    }
    else
    {
      fd = &alt_fd_list[index];
  80cb94:	e0bff917 	ldw	r2,-28(fp)
  80cb98:	10c00324 	muli	r3,r2,12
  80cb9c:	00802074 	movhi	r2,129
  80cba0:	10b84f04 	addi	r2,r2,-7876
  80cba4:	1885883a 	add	r2,r3,r2
  80cba8:	e0bffc15 	stw	r2,-16(fp)
      fd->fd_flags = (flags & ~ALT_FD_FLAGS_MASK);
  80cbac:	e0fffe17 	ldw	r3,-8(fp)
  80cbb0:	00900034 	movhi	r2,16384
  80cbb4:	10bfffc4 	addi	r2,r2,-1
  80cbb8:	1886703a 	and	r3,r3,r2
  80cbbc:	e0bffc17 	ldw	r2,-16(fp)
  80cbc0:	10c00215 	stw	r3,8(r2)
      
      /* If this is a device, ensure it isn't already locked */

      if (isafs || ((status = alt_file_locked (fd)) >= 0))
  80cbc4:	e0bffb17 	ldw	r2,-20(fp)
  80cbc8:	1000051e 	bne	r2,zero,80cbe0 <open+0xd0>
  80cbcc:	e13ffc17 	ldw	r4,-16(fp)
  80cbd0:	080ca4c0 	call	80ca4c <alt_file_locked>
  80cbd4:	e0bffa15 	stw	r2,-24(fp)
  80cbd8:	e0bffa17 	ldw	r2,-24(fp)
  80cbdc:	10001016 	blt	r2,zero,80cc20 <open+0x110>
        /* 
         * If the device or filesystem provides an open() callback function,
         * call it now to perform any device/filesystem specific operations.
         */
    
        status = (dev->open) ? dev->open(fd, file, flags, mode): 0;
  80cbe0:	e0bff817 	ldw	r2,-32(fp)
  80cbe4:	10800317 	ldw	r2,12(r2)
  80cbe8:	10000826 	beq	r2,zero,80cc0c <open+0xfc>
  80cbec:	e0bff817 	ldw	r2,-32(fp)
  80cbf0:	10800317 	ldw	r2,12(r2)
  80cbf4:	e1ffff17 	ldw	r7,-4(fp)
  80cbf8:	e1bffe17 	ldw	r6,-8(fp)
  80cbfc:	e17ffd17 	ldw	r5,-12(fp)
  80cc00:	e13ffc17 	ldw	r4,-16(fp)
  80cc04:	103ee83a 	callr	r2
  80cc08:	00000106 	br	80cc10 <open+0x100>
  80cc0c:	0005883a 	mov	r2,zero
  80cc10:	e0bffa15 	stw	r2,-24(fp)
  80cc14:	00000206 	br	80cc20 <open+0x110>
      }
    }
  }
  else
  {
    status = -ENODEV;
  80cc18:	00bffb44 	movi	r2,-19
  80cc1c:	e0bffa15 	stw	r2,-24(fp)
  }

  /* Allocation failed, so clean up and return an error */ 

  if (status < 0)
  80cc20:	e0bffa17 	ldw	r2,-24(fp)
  80cc24:	1000090e 	bge	r2,zero,80cc4c <open+0x13c>
  {
    alt_release_fd (index);  
  80cc28:	e13ff917 	ldw	r4,-28(fp)
  80cc2c:	0809c140 	call	809c14 <alt_release_fd>
    ALT_ERRNO = -status;
  80cc30:	080ca100 	call	80ca10 <alt_get_errno>
  80cc34:	1007883a 	mov	r3,r2
  80cc38:	e0bffa17 	ldw	r2,-24(fp)
  80cc3c:	0085c83a 	sub	r2,zero,r2
  80cc40:	18800015 	stw	r2,0(r3)
    return -1;
  80cc44:	00bfffc4 	movi	r2,-1
  80cc48:	00000106 	br	80cc50 <open+0x140>
  }
  
  /* return the reference upon success */

  return index;
  80cc4c:	e0bff917 	ldw	r2,-28(fp)
}
  80cc50:	e037883a 	mov	sp,fp
  80cc54:	dfc00117 	ldw	ra,4(sp)
  80cc58:	df000017 	ldw	fp,0(sp)
  80cc5c:	dec00204 	addi	sp,sp,8
  80cc60:	f800283a 	ret

0080cc64 <usleep>:
#if defined (__GNUC__) && __GNUC__ >= 4
int ALT_USLEEP (useconds_t us)
#else
unsigned int ALT_USLEEP (unsigned int us)
#endif
{
  80cc64:	defffd04 	addi	sp,sp,-12
  80cc68:	dfc00215 	stw	ra,8(sp)
  80cc6c:	df000115 	stw	fp,4(sp)
  80cc70:	df000104 	addi	fp,sp,4
  80cc74:	e13fff15 	stw	r4,-4(fp)
  return alt_busy_sleep(us);
  80cc78:	e13fff17 	ldw	r4,-4(fp)
  80cc7c:	080ccb80 	call	80ccb8 <alt_busy_sleep>
}
  80cc80:	e037883a 	mov	sp,fp
  80cc84:	dfc00117 	ldw	ra,4(sp)
  80cc88:	df000017 	ldw	fp,0(sp)
  80cc8c:	dec00204 	addi	sp,sp,8
  80cc90:	f800283a 	ret

0080cc94 <altera_nios2_gen2_irq_init>:
/*
 * To initialize the internal interrupt controller, just clear the IENABLE
 * register so that all possible IRQs are disabled.
 */
void altera_nios2_gen2_irq_init(void) 
{
  80cc94:	deffff04 	addi	sp,sp,-4
  80cc98:	df000015 	stw	fp,0(sp)
  80cc9c:	d839883a 	mov	fp,sp
    NIOS2_WRITE_IENABLE(0);
  80cca0:	000170fa 	wrctl	ienable,zero
}
  80cca4:	0001883a 	nop
  80cca8:	e037883a 	mov	sp,fp
  80ccac:	df000017 	ldw	fp,0(sp)
  80ccb0:	dec00104 	addi	sp,sp,4
  80ccb4:	f800283a 	ret

0080ccb8 <alt_busy_sleep>:
#include "alt_types.h"

#include "priv/alt_busy_sleep.h"

unsigned int alt_busy_sleep (unsigned int us)
{
  80ccb8:	defffa04 	addi	sp,sp,-24
  80ccbc:	dfc00515 	stw	ra,20(sp)
  80ccc0:	df000415 	stw	fp,16(sp)
  80ccc4:	df000404 	addi	fp,sp,16
  80ccc8:	e13fff15 	stw	r4,-4(fp)
  {
    cycles_per_loop = 9;
  }
  else  
  {
    cycles_per_loop = 3;
  80cccc:	008000c4 	movi	r2,3
  80ccd0:	e0bffd15 	stw	r2,-12(fp)
  }
  

  big_loops = us / (INT_MAX/
  (ALT_CPU_FREQ/(cycles_per_loop * 1000000)));
  80ccd4:	e0fffd17 	ldw	r3,-12(fp)
  80ccd8:	008003f4 	movhi	r2,15
  80ccdc:	10909004 	addi	r2,r2,16960
  80cce0:	1885383a 	mul	r2,r3,r2
  80cce4:	100b883a 	mov	r5,r2
  80cce8:	0100bef4 	movhi	r4,763
  80ccec:	213c2004 	addi	r4,r4,-3968
  80ccf0:	08093300 	call	809330 <__udivsi3>
  {
    cycles_per_loop = 3;
  }
  

  big_loops = us / (INT_MAX/
  80ccf4:	100b883a 	mov	r5,r2
  80ccf8:	01200034 	movhi	r4,32768
  80ccfc:	213fffc4 	addi	r4,r4,-1
  80cd00:	08093300 	call	809330 <__udivsi3>
  80cd04:	100b883a 	mov	r5,r2
  80cd08:	e13fff17 	ldw	r4,-4(fp)
  80cd0c:	08093300 	call	809330 <__udivsi3>
  80cd10:	e0bffe15 	stw	r2,-8(fp)
  (ALT_CPU_FREQ/(cycles_per_loop * 1000000)));

  if (big_loops)
  80cd14:	e0bffe17 	ldw	r2,-8(fp)
  80cd18:	10002a26 	beq	r2,zero,80cdc4 <alt_busy_sleep+0x10c>
  {
    for(i=0;i<big_loops;i++)
  80cd1c:	e03ffc15 	stw	zero,-16(fp)
  80cd20:	00001706 	br	80cd80 <alt_busy_sleep+0xc8>
      /*
      * Do NOT Try to single step the asm statement below 
      * (single step will never return)
      * Step out of this function or set a breakpoint after the asm statements
      */
      __asm__ volatile (
  80cd24:	00a00034 	movhi	r2,32768
  80cd28:	10bfffc4 	addi	r2,r2,-1
  80cd2c:	10bfffc4 	addi	r2,r2,-1
  80cd30:	103ffe1e 	bne	r2,zero,80cd2c <__alt_mem_onchip_mem+0xff804d2c>
        "\n\t.pushsection .debug_alt_sim_info"
        "\n\t.int 4, 0, 0b, 1b"
        "\n\t.popsection"
        :: "r" (INT_MAX));
      us -= (INT_MAX/(ALT_CPU_FREQ/
      (cycles_per_loop * 1000000)));
  80cd34:	e0fffd17 	ldw	r3,-12(fp)
  80cd38:	008003f4 	movhi	r2,15
  80cd3c:	10909004 	addi	r2,r2,16960
  80cd40:	1885383a 	mul	r2,r3,r2
        "\n1:"
        "\n\t.pushsection .debug_alt_sim_info"
        "\n\t.int 4, 0, 0b, 1b"
        "\n\t.popsection"
        :: "r" (INT_MAX));
      us -= (INT_MAX/(ALT_CPU_FREQ/
  80cd44:	100b883a 	mov	r5,r2
  80cd48:	0100bef4 	movhi	r4,763
  80cd4c:	213c2004 	addi	r4,r4,-3968
  80cd50:	08093300 	call	809330 <__udivsi3>
  80cd54:	100b883a 	mov	r5,r2
  80cd58:	01200034 	movhi	r4,32768
  80cd5c:	213fffc4 	addi	r4,r4,-1
  80cd60:	08093300 	call	809330 <__udivsi3>
  80cd64:	1007883a 	mov	r3,r2
  80cd68:	e0bfff17 	ldw	r2,-4(fp)
  80cd6c:	10c5c83a 	sub	r2,r2,r3
  80cd70:	e0bfff15 	stw	r2,-4(fp)
  big_loops = us / (INT_MAX/
  (ALT_CPU_FREQ/(cycles_per_loop * 1000000)));

  if (big_loops)
  {
    for(i=0;i<big_loops;i++)
  80cd74:	e0bffc17 	ldw	r2,-16(fp)
  80cd78:	10800044 	addi	r2,r2,1
  80cd7c:	e0bffc15 	stw	r2,-16(fp)
  80cd80:	e0fffc17 	ldw	r3,-16(fp)
  80cd84:	e0bffe17 	ldw	r2,-8(fp)
  80cd88:	18bfe616 	blt	r3,r2,80cd24 <__alt_mem_onchip_mem+0xff804d24>
      "\n\tbne %0,zero,0b"
      "\n1:"
      "\n\t.pushsection .debug_alt_sim_info"
      "\n\t.int 4, 0, 0b, 1b"
      "\n\t.popsection"
      :: "r" (us*(ALT_CPU_FREQ/(cycles_per_loop * 1000000))));
  80cd8c:	e0fffd17 	ldw	r3,-12(fp)
  80cd90:	008003f4 	movhi	r2,15
  80cd94:	10909004 	addi	r2,r2,16960
  80cd98:	1885383a 	mul	r2,r3,r2
  80cd9c:	100b883a 	mov	r5,r2
  80cda0:	0100bef4 	movhi	r4,763
  80cda4:	213c2004 	addi	r4,r4,-3968
  80cda8:	08093300 	call	809330 <__udivsi3>
  80cdac:	1007883a 	mov	r3,r2
  80cdb0:	e0bfff17 	ldw	r2,-4(fp)
  80cdb4:	1885383a 	mul	r2,r3,r2
    /*
    * Do NOT Try to single step the asm statement below 
    * (single step will never return)
    * Step out of this function or set a breakpoint after the asm statements
    */
    __asm__ volatile (
  80cdb8:	10bfffc4 	addi	r2,r2,-1
  80cdbc:	103ffe1e 	bne	r2,zero,80cdb8 <__alt_mem_onchip_mem+0xff804db8>
  80cdc0:	00000d06 	br	80cdf8 <alt_busy_sleep+0x140>
      "\n\tbgt %0,zero,0b"
      "\n1:"
      "\n\t.pushsection .debug_alt_sim_info"
      "\n\t.int 4, 0, 0b, 1b"
      "\n\t.popsection"
      :: "r" (us*(ALT_CPU_FREQ/(cycles_per_loop * 1000000))));
  80cdc4:	e0fffd17 	ldw	r3,-12(fp)
  80cdc8:	008003f4 	movhi	r2,15
  80cdcc:	10909004 	addi	r2,r2,16960
  80cdd0:	1885383a 	mul	r2,r3,r2
  80cdd4:	100b883a 	mov	r5,r2
  80cdd8:	0100bef4 	movhi	r4,763
  80cddc:	213c2004 	addi	r4,r4,-3968
  80cde0:	08093300 	call	809330 <__udivsi3>
  80cde4:	1007883a 	mov	r3,r2
  80cde8:	e0bfff17 	ldw	r2,-4(fp)
  80cdec:	1885383a 	mul	r2,r3,r2
    /*
    * Do NOT Try to single step the asm statement below 
    * (single step will never return)
    * Step out of this function or set a breakpoint after the asm statements
    */
    __asm__ volatile (
  80cdf0:	10bfffc4 	addi	r2,r2,-1
  80cdf4:	00bffe16 	blt	zero,r2,80cdf0 <__alt_mem_onchip_mem+0xff804df0>
      "\n\t.int 4, 0, 0b, 1b"
      "\n\t.popsection"
      :: "r" (us*(ALT_CPU_FREQ/(cycles_per_loop * 1000000))));
  }
#endif /* #ifndef ALT_SIM_OPTIMIZE */
  return 0;
  80cdf8:	0005883a 	mov	r2,zero
}
  80cdfc:	e037883a 	mov	sp,fp
  80ce00:	dfc00117 	ldw	ra,4(sp)
  80ce04:	df000017 	ldw	fp,0(sp)
  80ce08:	dec00204 	addi	sp,sp,8
  80ce0c:	f800283a 	ret

0080ce10 <alt_find_dev>:
 * "name" must be an exact match for the devices registered name for a match to
 * be found.
 */
 
alt_dev* alt_find_dev(const char* name, alt_llist* llist)
{
  80ce10:	defffa04 	addi	sp,sp,-24
  80ce14:	dfc00515 	stw	ra,20(sp)
  80ce18:	df000415 	stw	fp,16(sp)
  80ce1c:	df000404 	addi	fp,sp,16
  80ce20:	e13ffe15 	stw	r4,-8(fp)
  80ce24:	e17fff15 	stw	r5,-4(fp)
  alt_dev* next = (alt_dev*) llist->next;
  80ce28:	e0bfff17 	ldw	r2,-4(fp)
  80ce2c:	10800017 	ldw	r2,0(r2)
  80ce30:	e0bffc15 	stw	r2,-16(fp)
  alt_32 len;

  len  = strlen(name) + 1;
  80ce34:	e13ffe17 	ldw	r4,-8(fp)
  80ce38:	08066f80 	call	8066f8 <strlen>
  80ce3c:	10800044 	addi	r2,r2,1
  80ce40:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
  80ce44:	00000d06 	br	80ce7c <alt_find_dev+0x6c>
    /* 
     * memcmp() is used here rather than strcmp() in order to reduce the size
     * of the executable.
     */

    if (!memcmp (next->name, name, len))
  80ce48:	e0bffc17 	ldw	r2,-16(fp)
  80ce4c:	10800217 	ldw	r2,8(r2)
  80ce50:	e0fffd17 	ldw	r3,-12(fp)
  80ce54:	180d883a 	mov	r6,r3
  80ce58:	e17ffe17 	ldw	r5,-8(fp)
  80ce5c:	1009883a 	mov	r4,r2
  80ce60:	080d1c40 	call	80d1c4 <memcmp>
  80ce64:	1000021e 	bne	r2,zero,80ce70 <alt_find_dev+0x60>
    {
      /* match found */

      return next;
  80ce68:	e0bffc17 	ldw	r2,-16(fp)
  80ce6c:	00000706 	br	80ce8c <alt_find_dev+0x7c>
    }
    next = (alt_dev*) next->llist.next;
  80ce70:	e0bffc17 	ldw	r2,-16(fp)
  80ce74:	10800017 	ldw	r2,0(r2)
  80ce78:	e0bffc15 	stw	r2,-16(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
  80ce7c:	e0fffc17 	ldw	r3,-16(fp)
  80ce80:	e0bfff17 	ldw	r2,-4(fp)
  80ce84:	18bff01e 	bne	r3,r2,80ce48 <__alt_mem_onchip_mem+0xff804e48>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;
  80ce88:	0005883a 	mov	r2,zero
}
  80ce8c:	e037883a 	mov	sp,fp
  80ce90:	dfc00117 	ldw	ra,4(sp)
  80ce94:	df000017 	ldw	fp,0(sp)
  80ce98:	dec00204 	addi	sp,sp,8
  80ce9c:	f800283a 	ret

0080cea0 <alt_find_file>:
 * either '/' or '\0' is the prefix of the filename. For example the filename:
 * "/myfilesystem/junk.txt" would match: "/myfilesystem", but not: "/myfile". 
 */
 
alt_dev* alt_find_file (const char* name)
{
  80cea0:	defffb04 	addi	sp,sp,-20
  80cea4:	dfc00415 	stw	ra,16(sp)
  80cea8:	df000315 	stw	fp,12(sp)
  80ceac:	df000304 	addi	fp,sp,12
  80ceb0:	e13fff15 	stw	r4,-4(fp)
  alt_dev* next = (alt_dev*) alt_fs_list.next;   
  80ceb4:	d0a00417 	ldw	r2,-32752(gp)
  80ceb8:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
  80cebc:	00003106 	br	80cf84 <alt_find_file+0xe4>
  {
    len = strlen(next->name);
  80cec0:	e0bffd17 	ldw	r2,-12(fp)
  80cec4:	10800217 	ldw	r2,8(r2)
  80cec8:	1009883a 	mov	r4,r2
  80cecc:	08066f80 	call	8066f8 <strlen>
  80ced0:	e0bffe15 	stw	r2,-8(fp)
    
    if (next->name[len-1] == '/')
  80ced4:	e0bffd17 	ldw	r2,-12(fp)
  80ced8:	10c00217 	ldw	r3,8(r2)
  80cedc:	e0bffe17 	ldw	r2,-8(fp)
  80cee0:	10bfffc4 	addi	r2,r2,-1
  80cee4:	1885883a 	add	r2,r3,r2
  80cee8:	10800003 	ldbu	r2,0(r2)
  80ceec:	10803fcc 	andi	r2,r2,255
  80cef0:	1080201c 	xori	r2,r2,128
  80cef4:	10bfe004 	addi	r2,r2,-128
  80cef8:	10800bd8 	cmpnei	r2,r2,47
  80cefc:	1000031e 	bne	r2,zero,80cf0c <alt_find_file+0x6c>
    {
      len -= 1;
  80cf00:	e0bffe17 	ldw	r2,-8(fp)
  80cf04:	10bfffc4 	addi	r2,r2,-1
  80cf08:	e0bffe15 	stw	r2,-8(fp)
    }

    if (((name[len] == '/') || (name[len] == '\0')) && 
  80cf0c:	e0bffe17 	ldw	r2,-8(fp)
  80cf10:	e0ffff17 	ldw	r3,-4(fp)
  80cf14:	1885883a 	add	r2,r3,r2
  80cf18:	10800003 	ldbu	r2,0(r2)
  80cf1c:	10803fcc 	andi	r2,r2,255
  80cf20:	1080201c 	xori	r2,r2,128
  80cf24:	10bfe004 	addi	r2,r2,-128
  80cf28:	10800be0 	cmpeqi	r2,r2,47
  80cf2c:	1000081e 	bne	r2,zero,80cf50 <alt_find_file+0xb0>
  80cf30:	e0bffe17 	ldw	r2,-8(fp)
  80cf34:	e0ffff17 	ldw	r3,-4(fp)
  80cf38:	1885883a 	add	r2,r3,r2
  80cf3c:	10800003 	ldbu	r2,0(r2)
  80cf40:	10803fcc 	andi	r2,r2,255
  80cf44:	1080201c 	xori	r2,r2,128
  80cf48:	10bfe004 	addi	r2,r2,-128
  80cf4c:	10000a1e 	bne	r2,zero,80cf78 <alt_find_file+0xd8>
        !memcmp (next->name, name, len))
  80cf50:	e0bffd17 	ldw	r2,-12(fp)
  80cf54:	10800217 	ldw	r2,8(r2)
  80cf58:	e0fffe17 	ldw	r3,-8(fp)
  80cf5c:	180d883a 	mov	r6,r3
  80cf60:	e17fff17 	ldw	r5,-4(fp)
  80cf64:	1009883a 	mov	r4,r2
  80cf68:	080d1c40 	call	80d1c4 <memcmp>
    if (next->name[len-1] == '/')
    {
      len -= 1;
    }

    if (((name[len] == '/') || (name[len] == '\0')) && 
  80cf6c:	1000021e 	bne	r2,zero,80cf78 <alt_find_file+0xd8>
        !memcmp (next->name, name, len))
    {
      /* match found */

      return next;
  80cf70:	e0bffd17 	ldw	r2,-12(fp)
  80cf74:	00000706 	br	80cf94 <alt_find_file+0xf4>
    }
    next = (alt_dev*) next->llist.next;
  80cf78:	e0bffd17 	ldw	r2,-12(fp)
  80cf7c:	10800017 	ldw	r2,0(r2)
  80cf80:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
  80cf84:	e0fffd17 	ldw	r3,-12(fp)
  80cf88:	d0a00404 	addi	r2,gp,-32752
  80cf8c:	18bfcc1e 	bne	r3,r2,80cec0 <__alt_mem_onchip_mem+0xff804ec0>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;     
  80cf90:	0005883a 	mov	r2,zero
}
  80cf94:	e037883a 	mov	sp,fp
  80cf98:	dfc00117 	ldw	ra,4(sp)
  80cf9c:	df000017 	ldw	fp,0(sp)
  80cfa0:	dec00204 	addi	sp,sp,8
  80cfa4:	f800283a 	ret

0080cfa8 <alt_get_fd>:
 * the offset of the file descriptor within the file descriptor array). A
 * negative value indicates failure.
 */

int alt_get_fd (alt_dev* dev)
{
  80cfa8:	defffc04 	addi	sp,sp,-16
  80cfac:	df000315 	stw	fp,12(sp)
  80cfb0:	df000304 	addi	fp,sp,12
  80cfb4:	e13fff15 	stw	r4,-4(fp)
  alt_32 i;
  int rc = -EMFILE;
  80cfb8:	00bffa04 	movi	r2,-24
  80cfbc:	e0bffe15 	stw	r2,-8(fp)
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
  80cfc0:	e03ffd15 	stw	zero,-12(fp)
  80cfc4:	00001906 	br	80d02c <alt_get_fd+0x84>
  {
    if (!alt_fd_list[i].dev)
  80cfc8:	00802074 	movhi	r2,129
  80cfcc:	10b84f04 	addi	r2,r2,-7876
  80cfd0:	e0fffd17 	ldw	r3,-12(fp)
  80cfd4:	18c00324 	muli	r3,r3,12
  80cfd8:	10c5883a 	add	r2,r2,r3
  80cfdc:	10800017 	ldw	r2,0(r2)
  80cfe0:	10000f1e 	bne	r2,zero,80d020 <alt_get_fd+0x78>
    {
      alt_fd_list[i].dev = dev;
  80cfe4:	00802074 	movhi	r2,129
  80cfe8:	10b84f04 	addi	r2,r2,-7876
  80cfec:	e0fffd17 	ldw	r3,-12(fp)
  80cff0:	18c00324 	muli	r3,r3,12
  80cff4:	10c5883a 	add	r2,r2,r3
  80cff8:	e0ffff17 	ldw	r3,-4(fp)
  80cffc:	10c00015 	stw	r3,0(r2)
      if (i > alt_max_fd)
  80d000:	d0e00817 	ldw	r3,-32736(gp)
  80d004:	e0bffd17 	ldw	r2,-12(fp)
  80d008:	1880020e 	bge	r3,r2,80d014 <alt_get_fd+0x6c>
      {
        alt_max_fd = i;
  80d00c:	e0bffd17 	ldw	r2,-12(fp)
  80d010:	d0a00815 	stw	r2,-32736(gp)
      }
      rc = i;
  80d014:	e0bffd17 	ldw	r2,-12(fp)
  80d018:	e0bffe15 	stw	r2,-8(fp)
      goto alt_get_fd_exit;
  80d01c:	00000606 	br	80d038 <alt_get_fd+0x90>
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
  80d020:	e0bffd17 	ldw	r2,-12(fp)
  80d024:	10800044 	addi	r2,r2,1
  80d028:	e0bffd15 	stw	r2,-12(fp)
  80d02c:	e0bffd17 	ldw	r2,-12(fp)
  80d030:	10800810 	cmplti	r2,r2,32
  80d034:	103fe41e 	bne	r2,zero,80cfc8 <__alt_mem_onchip_mem+0xff804fc8>
   * file descriptor pool.
   */

  ALT_SEM_POST(alt_fd_list_lock);

  return rc;
  80d038:	e0bffe17 	ldw	r2,-8(fp)
}
  80d03c:	e037883a 	mov	sp,fp
  80d040:	df000017 	ldw	fp,0(sp)
  80d044:	dec00104 	addi	sp,sp,4
  80d048:	f800283a 	ret

0080d04c <alt_icache_flush>:
 * alt_icache_flush() is called to flush the instruction cache for a memory
 * region of length "len" bytes, starting at address "start".
 */

void alt_icache_flush (void* start, alt_u32 len)
{
  80d04c:	defffb04 	addi	sp,sp,-20
  80d050:	df000415 	stw	fp,16(sp)
  80d054:	df000404 	addi	fp,sp,16
  80d058:	e13ffe15 	stw	r4,-8(fp)
  80d05c:	e17fff15 	stw	r5,-4(fp)

  /*
   * This is the most we would ever need to flush.
   */
 
  if (len > NIOS2_ICACHE_SIZE)
  80d060:	e0bfff17 	ldw	r2,-4(fp)
  80d064:	10840070 	cmpltui	r2,r2,4097
  80d068:	1000021e 	bne	r2,zero,80d074 <alt_icache_flush+0x28>
  {
    len = NIOS2_ICACHE_SIZE;
  80d06c:	00840004 	movi	r2,4096
  80d070:	e0bfff15 	stw	r2,-4(fp)
  }

  end = ((char*) start) + len;
  80d074:	e0fffe17 	ldw	r3,-8(fp)
  80d078:	e0bfff17 	ldw	r2,-4(fp)
  80d07c:	1885883a 	add	r2,r3,r2
  80d080:	e0bffd15 	stw	r2,-12(fp)

  for (i = start; i < end; i+= NIOS2_ICACHE_LINE_SIZE)
  80d084:	e0bffe17 	ldw	r2,-8(fp)
  80d088:	e0bffc15 	stw	r2,-16(fp)
  80d08c:	00000506 	br	80d0a4 <alt_icache_flush+0x58>
  { 
    __asm__ volatile ("flushi %0" :: "r" (i)); 
  80d090:	e0bffc17 	ldw	r2,-16(fp)
  80d094:	1000603a 	flushi	r2
    len = NIOS2_ICACHE_SIZE;
  }

  end = ((char*) start) + len;

  for (i = start; i < end; i+= NIOS2_ICACHE_LINE_SIZE)
  80d098:	e0bffc17 	ldw	r2,-16(fp)
  80d09c:	10800804 	addi	r2,r2,32
  80d0a0:	e0bffc15 	stw	r2,-16(fp)
  80d0a4:	e0fffc17 	ldw	r3,-16(fp)
  80d0a8:	e0bffd17 	ldw	r2,-12(fp)
  80d0ac:	18bff836 	bltu	r3,r2,80d090 <__alt_mem_onchip_mem+0xff805090>
   * For an unaligned flush request, we've got one more line left.
   * Note that this is dependent on NIOS2_ICACHE_LINE_SIZE to be a 
   * multiple of 2 (which it always is).
   */

  if (((alt_u32) start) & (NIOS2_ICACHE_LINE_SIZE - 1))
  80d0b0:	e0bffe17 	ldw	r2,-8(fp)
  80d0b4:	108007cc 	andi	r2,r2,31
  80d0b8:	10000226 	beq	r2,zero,80d0c4 <alt_icache_flush+0x78>
  {
    __asm__ volatile ("flushi %0" :: "r" (i));
  80d0bc:	e0bffc17 	ldw	r2,-16(fp)
  80d0c0:	1000603a 	flushi	r2
  /* 
   * Having flushed the cache, flush any stale instructions in the 
   * pipeline 
   */

  __asm__ volatile ("flushp");
  80d0c4:	0000203a 	flushp

#endif /* NIOS2_ICACHE_SIZE > 0 */
}
  80d0c8:	0001883a 	nop
  80d0cc:	e037883a 	mov	sp,fp
  80d0d0:	df000017 	ldw	fp,0(sp)
  80d0d4:	dec00104 	addi	sp,sp,4
  80d0d8:	f800283a 	ret

0080d0dc <alt_exception_cause_generated_bad_addr>:
 * Return: 1: BADADDR (bad_addr argument to handler) is valid
 *         0: BADADDR is not valid
 */
int 
alt_exception_cause_generated_bad_addr(alt_exception_cause cause)
{
  80d0dc:	defffe04 	addi	sp,sp,-8
  80d0e0:	df000115 	stw	fp,4(sp)
  80d0e4:	df000104 	addi	fp,sp,4
  80d0e8:	e13fff15 	stw	r4,-4(fp)
  switch (cause) {
  80d0ec:	e0bfff17 	ldw	r2,-4(fp)
  80d0f0:	10bffe84 	addi	r2,r2,-6
  80d0f4:	10c00428 	cmpgeui	r3,r2,16
  80d0f8:	18001a1e 	bne	r3,zero,80d164 <alt_exception_cause_generated_bad_addr+0x88>
  80d0fc:	100690ba 	slli	r3,r2,2
  80d100:	00802074 	movhi	r2,129
  80d104:	10b44504 	addi	r2,r2,-12012
  80d108:	1885883a 	add	r2,r3,r2
  80d10c:	10800017 	ldw	r2,0(r2)
  80d110:	1000683a 	jmp	r2
  80d114:	0080d154 	movui	r2,837
  80d118:	0080d154 	movui	r2,837
  80d11c:	0080d164 	muli	r2,zero,837
  80d120:	0080d164 	muli	r2,zero,837
  80d124:	0080d164 	muli	r2,zero,837
  80d128:	0080d154 	movui	r2,837
  80d12c:	0080d15c 	xori	r2,zero,837
  80d130:	0080d164 	muli	r2,zero,837
  80d134:	0080d154 	movui	r2,837
  80d138:	0080d154 	movui	r2,837
  80d13c:	0080d164 	muli	r2,zero,837
  80d140:	0080d154 	movui	r2,837
  80d144:	0080d15c 	xori	r2,zero,837
  80d148:	0080d164 	muli	r2,zero,837
  80d14c:	0080d164 	muli	r2,zero,837
  80d150:	0080d154 	movui	r2,837
  case NIOS2_EXCEPTION_MISALIGNED_TARGET_PC:
  case NIOS2_EXCEPTION_TLB_READ_PERM_VIOLATION:
  case NIOS2_EXCEPTION_TLB_WRITE_PERM_VIOLATION:
  case NIOS2_EXCEPTION_MPU_DATA_REGION_VIOLATION:
  case NIOS2_EXCEPTION_ECC_DATA_ERR:
    return 1;
  80d154:	00800044 	movi	r2,1
  80d158:	00000306 	br	80d168 <alt_exception_cause_generated_bad_addr+0x8c>

  case NIOS2_EXCEPTION_TLB_MISS:
  case NIOS2_EXCEPTION_ECC_TLB_ERR:
    return 0;
  80d15c:	0005883a 	mov	r2,zero
  80d160:	00000106 	br	80d168 <alt_exception_cause_generated_bad_addr+0x8c>

  default:
    return 0;
  80d164:	0005883a 	mov	r2,zero
  }
}
  80d168:	e037883a 	mov	sp,fp
  80d16c:	df000017 	ldw	fp,0(sp)
  80d170:	dec00104 	addi	sp,sp,4
  80d174:	f800283a 	ret

0080d178 <atexit>:
  80d178:	200b883a 	mov	r5,r4
  80d17c:	000f883a 	mov	r7,zero
  80d180:	000d883a 	mov	r6,zero
  80d184:	0009883a 	mov	r4,zero
  80d188:	080d2401 	jmpi	80d240 <__register_exitproc>

0080d18c <exit>:
  80d18c:	defffe04 	addi	sp,sp,-8
  80d190:	000b883a 	mov	r5,zero
  80d194:	dc000015 	stw	r16,0(sp)
  80d198:	dfc00115 	stw	ra,4(sp)
  80d19c:	2021883a 	mov	r16,r4
  80d1a0:	080d3580 	call	80d358 <__call_exitprocs>
  80d1a4:	00802074 	movhi	r2,129
  80d1a8:	10bd4004 	addi	r2,r2,-2816
  80d1ac:	11000017 	ldw	r4,0(r2)
  80d1b0:	20800f17 	ldw	r2,60(r4)
  80d1b4:	10000126 	beq	r2,zero,80d1bc <exit+0x30>
  80d1b8:	103ee83a 	callr	r2
  80d1bc:	8009883a 	mov	r4,r16
  80d1c0:	080d4d80 	call	80d4d8 <_exit>

0080d1c4 <memcmp>:
  80d1c4:	01c000c4 	movi	r7,3
  80d1c8:	3980192e 	bgeu	r7,r6,80d230 <memcmp+0x6c>
  80d1cc:	2144b03a 	or	r2,r4,r5
  80d1d0:	11c4703a 	and	r2,r2,r7
  80d1d4:	10000f26 	beq	r2,zero,80d214 <memcmp+0x50>
  80d1d8:	20800003 	ldbu	r2,0(r4)
  80d1dc:	28c00003 	ldbu	r3,0(r5)
  80d1e0:	10c0151e 	bne	r2,r3,80d238 <memcmp+0x74>
  80d1e4:	31bfff84 	addi	r6,r6,-2
  80d1e8:	01ffffc4 	movi	r7,-1
  80d1ec:	00000406 	br	80d200 <memcmp+0x3c>
  80d1f0:	20800003 	ldbu	r2,0(r4)
  80d1f4:	28c00003 	ldbu	r3,0(r5)
  80d1f8:	31bfffc4 	addi	r6,r6,-1
  80d1fc:	10c00e1e 	bne	r2,r3,80d238 <memcmp+0x74>
  80d200:	21000044 	addi	r4,r4,1
  80d204:	29400044 	addi	r5,r5,1
  80d208:	31fff91e 	bne	r6,r7,80d1f0 <__alt_mem_onchip_mem+0xff8051f0>
  80d20c:	0005883a 	mov	r2,zero
  80d210:	f800283a 	ret
  80d214:	20c00017 	ldw	r3,0(r4)
  80d218:	28800017 	ldw	r2,0(r5)
  80d21c:	18bfee1e 	bne	r3,r2,80d1d8 <__alt_mem_onchip_mem+0xff8051d8>
  80d220:	31bfff04 	addi	r6,r6,-4
  80d224:	21000104 	addi	r4,r4,4
  80d228:	29400104 	addi	r5,r5,4
  80d22c:	39bff936 	bltu	r7,r6,80d214 <__alt_mem_onchip_mem+0xff805214>
  80d230:	303fe91e 	bne	r6,zero,80d1d8 <__alt_mem_onchip_mem+0xff8051d8>
  80d234:	003ff506 	br	80d20c <__alt_mem_onchip_mem+0xff80520c>
  80d238:	10c5c83a 	sub	r2,r2,r3
  80d23c:	f800283a 	ret

0080d240 <__register_exitproc>:
  80d240:	defffa04 	addi	sp,sp,-24
  80d244:	dc000315 	stw	r16,12(sp)
  80d248:	04002074 	movhi	r16,129
  80d24c:	843d4004 	addi	r16,r16,-2816
  80d250:	80c00017 	ldw	r3,0(r16)
  80d254:	dc400415 	stw	r17,16(sp)
  80d258:	dfc00515 	stw	ra,20(sp)
  80d25c:	18805217 	ldw	r2,328(r3)
  80d260:	2023883a 	mov	r17,r4
  80d264:	10003726 	beq	r2,zero,80d344 <__register_exitproc+0x104>
  80d268:	10c00117 	ldw	r3,4(r2)
  80d26c:	010007c4 	movi	r4,31
  80d270:	20c00e16 	blt	r4,r3,80d2ac <__register_exitproc+0x6c>
  80d274:	1a000044 	addi	r8,r3,1
  80d278:	8800221e 	bne	r17,zero,80d304 <__register_exitproc+0xc4>
  80d27c:	18c00084 	addi	r3,r3,2
  80d280:	18c7883a 	add	r3,r3,r3
  80d284:	18c7883a 	add	r3,r3,r3
  80d288:	12000115 	stw	r8,4(r2)
  80d28c:	10c7883a 	add	r3,r2,r3
  80d290:	19400015 	stw	r5,0(r3)
  80d294:	0005883a 	mov	r2,zero
  80d298:	dfc00517 	ldw	ra,20(sp)
  80d29c:	dc400417 	ldw	r17,16(sp)
  80d2a0:	dc000317 	ldw	r16,12(sp)
  80d2a4:	dec00604 	addi	sp,sp,24
  80d2a8:	f800283a 	ret
  80d2ac:	00800034 	movhi	r2,0
  80d2b0:	10800004 	addi	r2,r2,0
  80d2b4:	10002626 	beq	r2,zero,80d350 <__register_exitproc+0x110>
  80d2b8:	01006404 	movi	r4,400
  80d2bc:	d9400015 	stw	r5,0(sp)
  80d2c0:	d9800115 	stw	r6,4(sp)
  80d2c4:	d9c00215 	stw	r7,8(sp)
  80d2c8:	00000000 	call	0 <__reset-0x800000>
  80d2cc:	d9400017 	ldw	r5,0(sp)
  80d2d0:	d9800117 	ldw	r6,4(sp)
  80d2d4:	d9c00217 	ldw	r7,8(sp)
  80d2d8:	10001d26 	beq	r2,zero,80d350 <__register_exitproc+0x110>
  80d2dc:	81000017 	ldw	r4,0(r16)
  80d2e0:	10000115 	stw	zero,4(r2)
  80d2e4:	02000044 	movi	r8,1
  80d2e8:	22405217 	ldw	r9,328(r4)
  80d2ec:	0007883a 	mov	r3,zero
  80d2f0:	12400015 	stw	r9,0(r2)
  80d2f4:	20805215 	stw	r2,328(r4)
  80d2f8:	10006215 	stw	zero,392(r2)
  80d2fc:	10006315 	stw	zero,396(r2)
  80d300:	883fde26 	beq	r17,zero,80d27c <__alt_mem_onchip_mem+0xff80527c>
  80d304:	18c9883a 	add	r4,r3,r3
  80d308:	2109883a 	add	r4,r4,r4
  80d30c:	1109883a 	add	r4,r2,r4
  80d310:	21802215 	stw	r6,136(r4)
  80d314:	01800044 	movi	r6,1
  80d318:	12406217 	ldw	r9,392(r2)
  80d31c:	30cc983a 	sll	r6,r6,r3
  80d320:	4992b03a 	or	r9,r9,r6
  80d324:	12406215 	stw	r9,392(r2)
  80d328:	21c04215 	stw	r7,264(r4)
  80d32c:	01000084 	movi	r4,2
  80d330:	893fd21e 	bne	r17,r4,80d27c <__alt_mem_onchip_mem+0xff80527c>
  80d334:	11006317 	ldw	r4,396(r2)
  80d338:	218cb03a 	or	r6,r4,r6
  80d33c:	11806315 	stw	r6,396(r2)
  80d340:	003fce06 	br	80d27c <__alt_mem_onchip_mem+0xff80527c>
  80d344:	18805304 	addi	r2,r3,332
  80d348:	18805215 	stw	r2,328(r3)
  80d34c:	003fc606 	br	80d268 <__alt_mem_onchip_mem+0xff805268>
  80d350:	00bfffc4 	movi	r2,-1
  80d354:	003fd006 	br	80d298 <__alt_mem_onchip_mem+0xff805298>

0080d358 <__call_exitprocs>:
  80d358:	defff504 	addi	sp,sp,-44
  80d35c:	df000915 	stw	fp,36(sp)
  80d360:	dd400615 	stw	r21,24(sp)
  80d364:	dc800315 	stw	r18,12(sp)
  80d368:	dfc00a15 	stw	ra,40(sp)
  80d36c:	ddc00815 	stw	r23,32(sp)
  80d370:	dd800715 	stw	r22,28(sp)
  80d374:	dd000515 	stw	r20,20(sp)
  80d378:	dcc00415 	stw	r19,16(sp)
  80d37c:	dc400215 	stw	r17,8(sp)
  80d380:	dc000115 	stw	r16,4(sp)
  80d384:	d9000015 	stw	r4,0(sp)
  80d388:	2839883a 	mov	fp,r5
  80d38c:	04800044 	movi	r18,1
  80d390:	057fffc4 	movi	r21,-1
  80d394:	00802074 	movhi	r2,129
  80d398:	10bd4004 	addi	r2,r2,-2816
  80d39c:	12000017 	ldw	r8,0(r2)
  80d3a0:	45005217 	ldw	r20,328(r8)
  80d3a4:	44c05204 	addi	r19,r8,328
  80d3a8:	a0001c26 	beq	r20,zero,80d41c <__call_exitprocs+0xc4>
  80d3ac:	a0800117 	ldw	r2,4(r20)
  80d3b0:	15ffffc4 	addi	r23,r2,-1
  80d3b4:	b8000d16 	blt	r23,zero,80d3ec <__call_exitprocs+0x94>
  80d3b8:	14000044 	addi	r16,r2,1
  80d3bc:	8421883a 	add	r16,r16,r16
  80d3c0:	8421883a 	add	r16,r16,r16
  80d3c4:	84402004 	addi	r17,r16,128
  80d3c8:	a463883a 	add	r17,r20,r17
  80d3cc:	a421883a 	add	r16,r20,r16
  80d3d0:	e0001e26 	beq	fp,zero,80d44c <__call_exitprocs+0xf4>
  80d3d4:	80804017 	ldw	r2,256(r16)
  80d3d8:	e0801c26 	beq	fp,r2,80d44c <__call_exitprocs+0xf4>
  80d3dc:	bdffffc4 	addi	r23,r23,-1
  80d3e0:	843fff04 	addi	r16,r16,-4
  80d3e4:	8c7fff04 	addi	r17,r17,-4
  80d3e8:	bd7ff91e 	bne	r23,r21,80d3d0 <__alt_mem_onchip_mem+0xff8053d0>
  80d3ec:	00800034 	movhi	r2,0
  80d3f0:	10800004 	addi	r2,r2,0
  80d3f4:	10000926 	beq	r2,zero,80d41c <__call_exitprocs+0xc4>
  80d3f8:	a0800117 	ldw	r2,4(r20)
  80d3fc:	1000301e 	bne	r2,zero,80d4c0 <__call_exitprocs+0x168>
  80d400:	a0800017 	ldw	r2,0(r20)
  80d404:	10003226 	beq	r2,zero,80d4d0 <__call_exitprocs+0x178>
  80d408:	a009883a 	mov	r4,r20
  80d40c:	98800015 	stw	r2,0(r19)
  80d410:	00000000 	call	0 <__reset-0x800000>
  80d414:	9d000017 	ldw	r20,0(r19)
  80d418:	a03fe41e 	bne	r20,zero,80d3ac <__alt_mem_onchip_mem+0xff8053ac>
  80d41c:	dfc00a17 	ldw	ra,40(sp)
  80d420:	df000917 	ldw	fp,36(sp)
  80d424:	ddc00817 	ldw	r23,32(sp)
  80d428:	dd800717 	ldw	r22,28(sp)
  80d42c:	dd400617 	ldw	r21,24(sp)
  80d430:	dd000517 	ldw	r20,20(sp)
  80d434:	dcc00417 	ldw	r19,16(sp)
  80d438:	dc800317 	ldw	r18,12(sp)
  80d43c:	dc400217 	ldw	r17,8(sp)
  80d440:	dc000117 	ldw	r16,4(sp)
  80d444:	dec00b04 	addi	sp,sp,44
  80d448:	f800283a 	ret
  80d44c:	a0800117 	ldw	r2,4(r20)
  80d450:	80c00017 	ldw	r3,0(r16)
  80d454:	10bfffc4 	addi	r2,r2,-1
  80d458:	15c01426 	beq	r2,r23,80d4ac <__call_exitprocs+0x154>
  80d45c:	80000015 	stw	zero,0(r16)
  80d460:	183fde26 	beq	r3,zero,80d3dc <__alt_mem_onchip_mem+0xff8053dc>
  80d464:	95c8983a 	sll	r4,r18,r23
  80d468:	a0806217 	ldw	r2,392(r20)
  80d46c:	a5800117 	ldw	r22,4(r20)
  80d470:	2084703a 	and	r2,r4,r2
  80d474:	10000b26 	beq	r2,zero,80d4a4 <__call_exitprocs+0x14c>
  80d478:	a0806317 	ldw	r2,396(r20)
  80d47c:	2088703a 	and	r4,r4,r2
  80d480:	20000c1e 	bne	r4,zero,80d4b4 <__call_exitprocs+0x15c>
  80d484:	89400017 	ldw	r5,0(r17)
  80d488:	d9000017 	ldw	r4,0(sp)
  80d48c:	183ee83a 	callr	r3
  80d490:	a0800117 	ldw	r2,4(r20)
  80d494:	15bfbf1e 	bne	r2,r22,80d394 <__alt_mem_onchip_mem+0xff805394>
  80d498:	98800017 	ldw	r2,0(r19)
  80d49c:	153fcf26 	beq	r2,r20,80d3dc <__alt_mem_onchip_mem+0xff8053dc>
  80d4a0:	003fbc06 	br	80d394 <__alt_mem_onchip_mem+0xff805394>
  80d4a4:	183ee83a 	callr	r3
  80d4a8:	003ff906 	br	80d490 <__alt_mem_onchip_mem+0xff805490>
  80d4ac:	a5c00115 	stw	r23,4(r20)
  80d4b0:	003feb06 	br	80d460 <__alt_mem_onchip_mem+0xff805460>
  80d4b4:	89000017 	ldw	r4,0(r17)
  80d4b8:	183ee83a 	callr	r3
  80d4bc:	003ff406 	br	80d490 <__alt_mem_onchip_mem+0xff805490>
  80d4c0:	a0800017 	ldw	r2,0(r20)
  80d4c4:	a027883a 	mov	r19,r20
  80d4c8:	1029883a 	mov	r20,r2
  80d4cc:	003fb606 	br	80d3a8 <__alt_mem_onchip_mem+0xff8053a8>
  80d4d0:	0005883a 	mov	r2,zero
  80d4d4:	003ffb06 	br	80d4c4 <__alt_mem_onchip_mem+0xff8054c4>

0080d4d8 <_exit>:
 *
 * ALT_EXIT is mapped onto the _exit() system call in alt_syscall.h
 */

void ALT_EXIT (int exit_code)
{
  80d4d8:	defffd04 	addi	sp,sp,-12
  80d4dc:	df000215 	stw	fp,8(sp)
  80d4e0:	df000204 	addi	fp,sp,8
  80d4e4:	e13fff15 	stw	r4,-4(fp)
  ALT_LOG_PRINT_BOOT("[alt_exit.c] Entering _exit() function.\r\n");
  ALT_LOG_PRINT_BOOT("[alt_exit.c] Exit code from main was %d.\r\n",exit_code);
  /* Stop all other threads */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Calling ALT_OS_STOP().\r\n");
  ALT_OS_STOP();
  80d4e8:	0001883a 	nop
  80d4ec:	e0bfff17 	ldw	r2,-4(fp)
  80d4f0:	e0bffe15 	stw	r2,-8(fp)
/*
 * Routine called on exit.
 */
static ALT_INLINE ALT_ALWAYS_INLINE void alt_sim_halt(int exit_code)
{
  register int r2 asm ("r2") = exit_code;
  80d4f4:	e0bffe17 	ldw	r2,-8(fp)
  __asm__ volatile ("\n0:\n\taddi %0,%0, -1\n\tbgt %0,zero,0b" : : "r" (ALT_CPU_FREQ/100) ); /* Delay for >30ms */

  __asm__ volatile ("break 2" : : "r"(r2), "r"(r3) ALT_GMON_DATA );

#else /* !DEBUG_STUB */
  if (r2) {
  80d4f8:	10000226 	beq	r2,zero,80d504 <_exit+0x2c>
    ALT_SIM_FAIL();
  80d4fc:	002af070 	cmpltui	zero,zero,43969
  80d500:	00000106 	br	80d508 <_exit+0x30>
  } else {
    ALT_SIM_PASS();
  80d504:	002af0b0 	cmpltui	zero,zero,43970
  ALT_SIM_HALT(exit_code);

  /* spin forever, since there's no where to go back to */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Spinning forever.\r\n");
  while (1);
  80d508:	003fff06 	br	80d508 <__alt_mem_onchip_mem+0xff805508>
