/*
 * "Hello World" example.
 *
 * This example prints 'Hello from Nios II' to the STDOUT stream. It runs on
 * the Nios II 'standard', 'full_featured', 'fast', and 'low_cost' example
 * designs. It runs with or without the MicroC/OS-II RTOS and requires a STDOUT
 * device in your system's hardware.
 * The memory footprint of this hosted application is ~69 kbytes by default
 * using the standard reference design.
 *
 * For a reduced footprint version of this template, and an explanation of how
 * to reduce the memory footprint for a given application, see the
 * "small_hello_world" template.
 *
 */

#include <unistd.h>
#include "stdio.h"
#include "system.h"
#include "sys/alt_alarm.h"
#include <altera_avalon_pio_regs.h>
#include <system.h> // to use the symbolic names
#include <altera_avalon_pio_regs.h> // to use PIO functions
#include <alt_types.h> // alt_u32 is a kind of alt_types
#include <sys/alt_irq.h>
#include <stdbool.h>
#include "pacemaker.h"

#define AVI_VALUE 300
#define AEI_VALUE 800
#define PVARP_VALUE 50
#define VRP_VALUE 150
#define LRI_VALUE 950
#define URI_VALUE 900

typedef enum{
	AVI_IDLE,
	AVI_WAIT
}avi_state;

typedef enum{
	AEI_IDLE,
	AEI_WAIT
}aei_state;

typedef enum{
	LRI_IDLE,
	LRI_WAIT
}lri_state;

typedef enum{
	URI_IDLE,
	URI_WAIT
}uri_state;

typedef enum{
	PVARP_IDLE,
	PVARP_BLOCK
}pvarp_state;

typedef enum{
	VRP_IDLE,
	VRP_BLOCK
}vrp_state;

int AS = 0, VS = 0, AP = 0, VP = 0 ,V_event = 0, VR = 0, A_event = 0, AR = 0;
int avi_timer = 0, aei_timer = 0, pvarp_timer = 0, vrp_timer = 0,  lri_timer = 0, uri_timer = 0;
bool  inside_URI = false;

avi_state avi_current_state =  AVI_IDLE;
aei_state aei_current_state = AEI_IDLE;
lri_state lri_current_state = LRI_IDLE;
uri_state uri_current_state = URI_IDLE;
pvarp_state pvarp_current_state = PVARP_IDLE;
vrp_state vrp_current_state = VRP_IDLE;

//SCchart implementation
int doTick = 0;
// Timer ISR
alt_u32 timer_isr_function(void* context) {
	doTick = 1;
	return 1; // Set the timer to trigger every 10ms
}



void avi_timer_isr(void* context) {
    avi_timer = 1;
}

void aei_timer_isr(void* context) {
    aei_timer = 1;
}


void pvarp_timer_isr(void* context, alt_u32 id) {
	pvarp_timer = 1;
}

void vrp_timer_isr(void* context, alt_u32 id) {
	vrp_timer = 1;
}

void lri_timer_isr(void* context) {
    lri_timer = 1;
}

void uri_timer_isr(void* context) {
    uri_timer = 1;
}

//void pacemaker_C_logic(){
//
//}



int main(){
//	//SCchart implementation
//	TickData model;//create the struct
//	reset(&model);//call reset function
//	alt_alarm timer;// TIMER
//	alt_alarm_start(&timer, 1, timer_isr_function, NULL);//start the timer, with timeout of 100 milli-seconds

	//C implementation
	alt_alarm avi_timer, aei_timer, pvarp_timer, var_timer, lri_timer, uri_timer;
	int timeCountMain = 0;


	while (1) {
//		//SCchart implementation
//		if(doTick) {
//			doTick = 0;
//			// input readings
//			model.AS = (((~IORD_ALTERA_AVALON_PIO_DATA(KEYS_BASE)) & 0x2) >> 1);
//			model.VS = ((~IORD_ALTERA_AVALON_PIO_DATA(KEYS_BASE)) & 0x1);
//
//			if(model.AS) {
//				printf("AS\n");
//			}
//			if(model.VS) {
//				printf("VS\n");
//			}
//
//			model.deltaT = 1;
//
//			tick(&model);//call tick function
//
//			if(model.AP) {
//				printf("AP\n");
//				IOWR_ALTERA_AVALON_PIO_DATA(LEDS_GREEN_BASE, 0b10);
//			}
//			else if(model.VP) {
//				printf("VP\n");
//				IOWR_ALTERA_AVALON_PIO_DATA(LEDS_GREEN_BASE, 0b01);
//			}
//			else {
//				IOWR_ALTERA_AVALON_PIO_DATA(LEDS_GREEN_BASE, 0b00);
//			}
//		}
//


		//C implementation
		AS = (((~IORD_ALTERA_AVALON_PIO_DATA(KEYS_BASE)) & 0x2) >> 1);
		VS = ((~IORD_ALTERA_AVALON_PIO_DATA(KEYS_BASE)) & 0x1);

		if(AS ==1) {
			printf("AS\n");
		}
		if(VS==1) {
			printf("VS\n");
		}

//		pacemaker_C_logic();


		// Implement state transitions and actions based on current_state
		        //AVI
		        switch (avi_current_state) {
		            case AVI_IDLE:
		                if (A_event == 1) {
		                    alt_alarm_start(&avi_timer, AVI_VALUE, avi_timer_isr, NULL);
		                    avi_current_state = AVI_WAIT;
		                }
		                break;

		            case AVI_WAIT:
		                if (V_event == 1) {
		                	avi_current_state = AVI_IDLE;
		                }else if((avi_timer == 1) && (!inside_URI)) {
		                    VP = 1;
		                    avi_current_state = AVI_IDLE;
		                }
		                break;
		        }

		        //AEI
		         switch (aei_current_state) {
		            case AEI_IDLE:
		                if (V_event == 1) {
		                    alt_alarm_start(&aei_timer, AEI_VALUE, aei_timer_isr, NULL);
		                    aei_current_state = AEI_WAIT;
		                }
		               break;

		            case AEI_WAIT:
		                if (A_event == 1) {
		                	aei_current_state = AEI_IDLE;
		                }else if(aei_timer == 1) {
		                    AP = 1;
		                    aei_current_state = AEI_IDLE;
		                }
		                break;
		        }

		        //LRI
		        switch (lri_current_state) {
		            case LRI_IDLE:
		                if (V_event == 1) {
		                    alt_alarm_start(&lri_timer, LRI_VALUE, lri_timer_isr, NULL);
		                    lri_current_state = LRI_WAIT;
		                }
		               break;

		            case LRI_WAIT:
		                if (V_event == 1) {
		                    alt_alarm_start(&lri_timer, LRI_VALUE, lri_timer_isr, NULL);
		                    lri_current_state = LRI_WAIT;
		                }else if(lri_timer == 1) {
		                    VP = 1;
		                    lri_current_state = LRI_IDLE;
		                }
		                break;
		        }



		        //URI
		        switch (uri_current_state) {
		            case URI_IDLE:
		                if (V_event == 1) {
		                    alt_alarm_start(&uri_timer, URI_VALUE, uri_timer_isr, NULL);
		                    inside_URI = true;
		                    uri_current_state = URI_WAIT;
		                }
		               break;

		            case URI_WAIT:
		                if (V_event == 1) {
		                    alt_alarm_start(&uri_timer, URI_VALUE, uri_timer_isr, NULL);
		                    uri_current_state = URI_WAIT;
		                }else if(uri_timer == 1) {
		                    inside_URI = false;
		                }
		                break;
		        }



		        //PVARP
		        switch (pvarp_current_state) {
		            case PVARP_IDLE:
		                if (AS == 1 || AP == 1) {
		                    A_event = 1;
		                    pvarp_current_state = PVARP_IDLE;
		                }else if(VS == 1 || VP == 1){
		                    alt_alarm_start(&pvarp_timer, PVARP_VALUE, pvarp_timer_isr, NULL);
		                    pvarp_current_state = PVARP_BLOCK;
		                }
		               break;

		            case PVARP_BLOCK:
		                if (AS == 1) {
		                    AR = 1;
		                    pvarp_current_state = PVARP_BLOCK;
		                }else if(pvarp_timer == 1) {
		                	pvarp_current_state = PVARP_IDLE;
		                }
		                break;
		        }

		        //VRP
		        switch (vrp_current_state) {
		            case VRP_IDLE:
		                if (VS == 1|| VP == 1) {
		                    V_event = 1;
		                    alt_alarm_start(&vrp_timer, VRP_VALUE, vrp_timer_isr, NULL);
		                    vrp_current_state = VRP_BLOCK;
		                }
		               break;

		            case VRP_BLOCK:
		                if (VS == 1) {
		                    VR = 1;
		                    vrp_current_state = VRP_BLOCK;
		                }else if(vrp_timer == 1) {
		                	vrp_current_state = VRP_IDLE;
		                }
		                break;
		        }

		if(AP == 1) {
			printf("AP\n");
			IOWR_ALTERA_AVALON_PIO_DATA(LEDS_GREEN_BASE, 0b10);
		}else if(VP == 1 ) {
			printf("VP\n");
			IOWR_ALTERA_AVALON_PIO_DATA(LEDS_GREEN_BASE, 0b01);
		}else {
			IOWR_ALTERA_AVALON_PIO_DATA(LEDS_GREEN_BASE, 0b00);
		}




	}

	return 0;
}
